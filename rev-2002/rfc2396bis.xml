<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc toc="yes"?>
<?rfc linkmailto="no"?>
<?rfc editing="no"?>
<?rfc-ext parse-xml-in-artwork="yes" ?>
<rfc obsoletes="2732, 2396, 1808" updates="1738" category="std"
     ipr="full2026" docName="draft-fielding-uri-rfc2396bis-0x">

<front>
  <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>

  <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
    <organization abbrev="MIT/LCS">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>MIT/LCS, Room NE43-356</street>
        <street>200 Technology Square</street>
        <city>Cambridge</city>
        <region>MA</region>
        <code>02139</code>
        <country>USA</country>
      </postal>
      <phone>+1-617-253-5702</phone>
      <facsimile>+1-617-258-5999</facsimile>
      <email>timbl@w3.org</email>
      <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>
  <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <postal>
        <street>5251 California Ave., Suite 110</street>
        <city>Irvine</city>
        <region>CA</region>
        <code>92612-3074</code>
        <country>USA</country>
      </postal>
      <phone>+1-949-679-2960</phone>
      <facsimile>+1-949-679-2972</facsimile>
      <email>fielding@gbiv.com</email>
      <uri>http://roy.gbiv.com/</uri>
    </address>
  </author>
  <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <phone>+1-408-536-3024</phone>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>

  <date month='February' year='2004'></date>

  <area>Applications</area>
  <keyword>uniform resource identifier</keyword>
  <keyword>URI</keyword>
  <keyword>URL</keyword>
  <keyword>URN</keyword>
  <keyword>WWW</keyword>
  <keyword>resource</keyword>

  <abstract>
<t>
A Uniform Resource Identifier (URI) is a compact string of characters
for identifying an abstract or physical resource.  This specification
defines the generic URI syntax and a process for resolving URI references
that might be in relative form, along with guidelines and security
considerations for the use of URIs on the Internet.
</t>
<t>
The URI syntax defines a grammar that is a superset of all valid URIs,
such that an implementation can parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier.  This specification does not define a generative
grammar for URIs; that task is performed by the individual
specifications of each URI scheme.
</t></abstract>
<note title='Editorial Note'>
<t>
Discussion of this draft and comments to the editors should be sent
to the uri@w3.org mailing list.  An issues list and version history
is available at
<eref target="http://gbiv.com/protocols/uri/rev-2002/issues.html">&lt;http://gbiv.com/protocols/uri/rev-2002/issues.html&gt;</eref>.
</t></note>
</front>
<middle>
<section title="Introduction" anchor="intro">
<t>
A Uniform Resource Identifier (URI) provides a simple and extensible
means for identifying a resource.  This specification of URI syntax
and semantics is derived from concepts introduced by the World Wide
Web global information initiative, whose use of such identifiers dates
from 1990 and is described in "Universal Resource Identifiers in WWW"
<xref target="RFC1630"/>, and is designed to meet the
recommendations laid out in "Functional Recommendations for Internet
Resource Locators" <xref target="RFC1736"/> and "Functional Requirements
for Uniform Resource Names" <xref target="RFC1737"/>.
</t>
<t>
This document obsoletes <xref target="RFC2396"/>, which merged
"Uniform Resource Locators" <xref target="RFC1738"/> and
"Relative Uniform Resource Locators" <xref target="RFC1808"/> in order
to define a single, generic syntax for all URIs.  It excludes those
portions of RFC 1738 that defined the specific syntax of individual
URI schemes; those portions will be updated as separate documents.
The process for registration of new URI schemes is defined separately
by <xref target="RFC2717"/>.
Advice for designers of new URI schemes can be found in
<xref target="RFC2718"/>.
</t>
<t>
All significant changes from RFC 2396 are noted in <xref target="changes"/>.
</t>
<t>
This specification uses the terms "character" and "character encoding"
in accordance with the definitions provided in <xref target="RFC2978"/>.
</t>

<section title="Overview of URIs" anchor="overview">
<t>
URIs are characterized as follows:
</t>
<iref item="uniform" primary="true"/>
<t>Uniform
  <list>
    <t>
Uniformity provides several benefits: it allows different types
of resource identifiers to be used in the same context, even
when the mechanisms used to access those resources may differ;
it allows uniform semantic interpretation of common syntactic
conventions across different types of resource identifiers; it
allows introduction of new types of resource identifiers
without interfering with the way that existing identifiers are
used; and, it allows the identifiers to be reused in many
different contexts, thus permitting new applications or
protocols to leverage a pre-existing, large, and widely-used
set of resource identifiers.
    </t>
  </list>
</t>
<iref item="resource" primary="true"/>
<t>Resource
  <list>
    <t>
Anything that can be named or described can be a resource.
Familiar examples include an electronic document, an image,
a service (e.g., "today's weather report for Los Angeles"),
and a collection of other resources.
A resource is not necessarily accessible via the Internet;
e.g., human beings, corporations, and bound books in a library
can also be resources.
Likewise, abstract concepts can be resources, such as the operators and
operands of a mathematical equation or the types of a relationship
(e.g., "parent" or "employee").
    </t>
  </list>
</t>
<iref item="identifier" primary="true"/>        
<t>Identifier
  <list>
    <t>
An identifier embodies the information required to distinguish what is
being identified from all other things within its scope of identification.
    </t>
  </list>
</t>
<t>
A URI is an identifier that consists of a sequence of characters
matching the syntax defined by the grammar rule named "URI" in
<xref target="components"/>.
A URI can be used to refer to a resource.
This specification does not place any
limits on the nature of a resource or the reasons why an application
might wish to refer to a resource.  URIs have a global scope
and should be interpreted consistently regardless of context, but
that interpretation may be defined in relation to the user's context
(e.g., "http://localhost/" refers to a resource that is relative to
the user's network interface and yet not specific to any one user).
</t>

<section title="Generic Syntax" anchor="generic-syntax">
<iref item="generic syntax" primary="true"/>        
<t>
Each URI begins with a scheme name, as defined in <xref target="scheme"/>,
that refers to a specification for assigning identifiers within that scheme.
As such, the URI syntax is a federated and extensible naming system wherein
each scheme's specification may further restrict the syntax and semantics
of identifiers using that scheme.
</t>
<t>
This specification defines those elements of the URI syntax that are
required of all URI schemes or are common to many URI schemes.  It thus
defines the syntax and semantics that are needed to implement a
scheme-independent parsing mechanism for URI references, such that the
scheme-dependent handling of a URI can be postponed until the
scheme-dependent semantics are needed.  Likewise, protocols and data
formats that make use of URI references can refer to this specification
as defining the range of syntax allowed for all URIs, including those
schemes that have yet to be defined.
</t>
<t>
A parser of the generic URI syntax is capable of parsing any URI
reference into its major components; once the scheme is determined,
further scheme-specific parsing can be performed on the components.
In other words, the URI generic syntax is a superset of the syntax
of all URI schemes.
</t>
</section>

<section title="Examples" anchor="examples">
<figure><preamble>
The following examples illustrate URIs that are in common use.
</preamble><artwork>
   ftp://ftp.is.co.za/rfc/rfc1808.txt

   http://www.ietf.org/rfc/rfc2396.txt

   mailto:John.Doe@example.com

   news:comp.infosystems.www.servers.unix

   telnet://melvyl.ucop.edu/
</artwork></figure>
</section>

<section title="URI, URL, and URN" anchor="URLvsURN">
<iref item="URL" primary="true"/>        
<iref item="URN" primary="true"/>        
<iref item="locator" primary="true"/>        
<iref item="name" primary="true"/>        
<t>
A URI can be further classified as a locator, a name, or both.  The
term "Uniform Resource Locator" (URL) refers to the subset of URIs
that, in addition to identifying a resource, provide a means of
locating the resource by describing its primary access mechanism
(e.g., its network "location").  The term "Uniform Resource Name" (URN)
has been used historically to refer to both URIs under the "urn" scheme
<xref target="RFC2141"/>, which are required to remain globally unique
and persistent even when the resource ceases to exist or becomes
unavailable, and to any other URI with the properties of a name.
</t>
<t>
An individual scheme does not need to be classified as being just one of
"name" or "locator".  Instances of URIs from any given scheme may have
the characteristics of names or locators or both, often depending on the
persistence and care in the assignment of identifiers by the naming
authority, rather than any quality of the scheme.  Future specifications
and related documentation should use the general term "URI", rather than
the more restrictive terms URL and URN <xref target="RFC3305"/>.
</t>
</section>

</section>
<section title="Design Considerations" anchor="design">
<section title="Transcription" anchor="transcription">        
<iref item="transcription" primary="true"/>        
<t>
The URI syntax has been designed with global transcription as one of
its main considerations.  A URI is a sequence of characters from a very
limited set: the letters of the basic Latin alphabet, digits,
and a few special characters.  A URI may be represented in a variety
of ways: e.g., ink on paper, pixels on a screen, or a sequence of
integers from a coded character set.  The interpretation of a URI depends
only on the characters used and not how those characters are
represented in a network protocol.
</t>
<t>
The goal of transcription can be described by a simple scenario.
Imagine two colleagues, Sam and Kim, sitting in a pub at an
international conference and exchanging research ideas.  Sam asks Kim
for a location to get more information, so Kim writes the URI for the
research site on a napkin.  Upon returning home, Sam takes out the
napkin and types the URI into a computer, which then retrieves the
information to which Kim referred.
</t>
<t>
There are several design considerations revealed by the scenario:
  <list style="symbols">
    <t>
A URI is a sequence of characters that is not always
represented as a sequence of octets.
    </t>
    <t>
A URI might be transcribed from a non-network source, and thus
should consist of characters that are most likely to be able to
be entered into a computer, within the constraints imposed by
keyboards (and related input devices) across languages and locales.
    </t>
    <t>
A URI often needs to be remembered by people, and it is easier
for people to remember a URI when it consists of meaningful or
familiar components.
    </t>
  </list>
</t>
<t>
These design considerations are not always in alignment.  For example, it
is often the case that the most meaningful name for a URI component
would require characters that cannot be typed into some systems.  The
ability to transcribe a resource identifier from one medium to
another has been considered more important than having a URI consist of
the most meaningful of components.  In local or regional contexts
and with improving technology, users might benefit from being able to
use a wider range of characters; such use is not defined in this
specification.
</t>
</section>

<section title="Separating Identification from Interaction"
         anchor="identification">
<iref item="access" primary="true"/>        
<t>
A common misunderstanding of URIs is that they are only used to
refer to accessible resources.  In fact, the URI alone only provides
identification; access to the resource is neither guaranteed nor
implied by the presence of a URI.  Instead, an operation (if any)
associated with a URI reference is defined by the protocol element,
data format attribute, or natural language text in which it appears.
</t>
<iref item="resolution" primary="true"/>        
<iref item="dereference" primary="true"/>        
<t>
Given a URI, a system may attempt to perform a variety of operations
on the resource, as might be characterized by such words as
"access", "update", "replace", or "find attributes".  Such operations
are defined by the protocols that make use of URIs, not by this
specification.  However, we do use a few general terms for describing
common operations on URIs.  URI "resolution" is the process of determining
an access mechanism and the appropriate parameters necessary to dereference
a URI; such resolution may require several iterations.  To use that access
mechanism to perform an action on the URI's resource is to "dereference"
the URI.
</t>
<iref item="retrieval" primary="true"/>        
<iref item="representation" primary="true"/>        
<t>
When URIs are used within information systems to identify sources
of information, the most common form of URI dereference is "retrieval":
making use of a URI in order to retrieve a representation of its associated
resource.  A "representation" is a sequence of octets, along with
representation metadata describing those octets, that constitutes a
record of the state of the resource at the time that the representation
is generated.  Retrieval is achieved by a process that might include
using the URI as a cache key to check for a locally cached representation,
resolution of the URI to determine an appropriate access mechanism (if any),
and dereference of the URI for the sake of applying a retrieval operation.
Depending on the protocols used to perform the retrieval, additional
information might be supplied about the resource (resource metadata)
and its relation to other resources.
</t>
<iref item="sameness" primary="true"/>        
<t>
URI references in information systems are designed to be late-binding:
the result of an access is generally determined at the time it is accessed
and may vary over time or due to other aspects of the interaction.
When an author creates a reference to such a resource, they do so with
the intention that the reference be used in the future; what is being
identified is not some specific result that was obtained in the past,
but rather some characteristic that is expected to be true for future
results.  In such cases, the resource referred to by the URI is actually
a sameness of characteristics as observed over time, perhaps elucidated
by additional comments or assertions made by the resource provider.
</t>
<t>
Although many URI schemes are named after protocols, this does not
imply that use of such a URI will result in access to the resource
via the named protocol.  URIs are often used simply for the sake of
identification.  Even when a URI is used to retrieve a representation
of a resource, that access might be through gateways, proxies, caches,
and name resolution services that are independent of the protocol
associated with the scheme name, and the resolution of some URIs may
require the use of more than one protocol (e.g., both DNS and HTTP
are typically used to access an "http" URI's origin server when
a representation isn't found in a local cache).
</t>
</section>

<section title="Hierarchical Identifiers" anchor="hierarchical">
<iref item="hierarchical" primary="true"/>        
<t>
The URI syntax is organized hierarchically, with components listed
in order of decreasing significance from left to right.  For some URI schemes,
the visible hierarchy is limited to the scheme itself: everything after
the scheme component delimiter (":") is considered opaque to URI processing.
Other URI schemes make the hierarchy explicit and visible to
generic parsing algorithms.
</t>
<t>
The generic syntax uses the slash ("/"), question mark ("?"), and
number sign ("#") characters for the purpose of delimiting components
that are significant to the generic parser's hierarchical interpretation
of an identifier.  In addition to aiding the readability of such
identifiers through the consistent use of familiar syntax, this
uniform representation of hierarchy across naming schemes allows
scheme-independent references to be made relative to that hierarchy.
</t>
<t>
The slash ("/") character indicates hierarchy between the
<xref target="scheme">scheme</xref> and the first question mark ("?") or
number sign ("#"), or the end of the URI string.  In other words,
the slash ("/") character does not indicate hierarchy within the
the query (<xref target="query"/>) and fragment (<xref target="fragment"/>)
components of a URI. URI schemes that do not adhere to the generic
parser's hierarchical syntax may still use the slash ("/") character
for any purpose, since its hierarchical interpretation is only relevant
during the parsing of relative references.
</t>
<iref item="relative" primary="true"/>        
<t>
It is often the case that a group or "tree" of documents has been
constructed to serve a common purpose, wherein the vast majority of URIs
in these documents point to resources within the tree rather than
outside of it.  Similarly, documents located at a particular site are
much more likely to refer to other resources at that site than to
resources at remote sites.
Relative referencing of URIs allows document trees to be partially
independent of their location and access scheme.  For instance, it is
possible for a single set of hypertext documents to be simultaneously
accessible and traversable via each of the "file", "http", and "ftp"
schemes if the documents refer to each other using relative references.
Furthermore, such document trees can be moved, as a whole, without
changing any of the relative references.
</t>
<t>
A relative URI reference (<xref target="relative-uri"/>) refers to a
resource by describing the difference within a hierarchical name space
between the current context and the target URI.  The reference resolution
algorithm, presented in <xref target="reference-resolution"/>, defines
how such references are resolved.  Since relative references can only
be used within the context of a hierarchical URI, designers of new URI
schemes should use a syntax conforming to the generic hierarchical syntax
unless there are compelling reasons to forbid relative referencing
within that scheme.
</t>
</section>

</section>

<section title="Syntax Notation" anchor="notation">
<iref item="ABNF" primary="true"/>        
<iref item="URI grammar" subitem="ALPHA" primary="true"/>
<iref item="URI grammar" subitem="CR" primary="true"/>
<iref item="URI grammar" subitem="CTL" primary="true"/>
<iref item="URI grammar" subitem="DIGIT" primary="true"/>
<iref item="URI grammar" subitem="DQUOTE" primary="true"/>
<iref item="URI grammar" subitem="HEXDIG" primary="true"/>
<iref item="URI grammar" subitem="LF" primary="true"/>
<iref item="URI grammar" subitem="OCTET" primary="true"/>
<iref item="URI grammar" subitem="SP" primary="true"/>
<t>
This specification uses the Augmented Backus-Naur Form (ABNF) notation of
<xref target="RFC2234"/>, including the following core ABNF productions
defined by that specification:
ALPHA (letters), CR (carriage return), CTL (control characters),
DIGIT (decimal digits), DQUOTE (double quote), HEXDIG (hexadecimal digits),
LF (line feed), and SP (space).
The complete URI syntax is collected in <xref target="collected-abnf"/>.
</t>
</section>

</section>

<section title="Characters" anchor="characters">
<iref item="characters" primary="true"/>
<t>
Although ABNF notation defines its terminal values to be non-negative
integers based on the US-ASCII coded character set <xref target="ASCII"/>,
we must invert that relation in order to understand the URI syntax,
since URIs are defined as strings of characters independent of any
particular encoding.  Therefore, the integer values must be mapped
back to their corresponding characters via US-ASCII in order to complete
the syntax rules.
</t>
<t>
This specification does not mandate the use of any particular
character encoding scheme for mapping between URI characters
and the octets used to store or transmit those characters.
When a URI appears in a protocol element, the character encoding is
defined by that protocol; absent such a definition, a URI is assumed
to use the same character encoding as the surrounding text.
</t>
<t>
A URI is composed from a limited set of characters consisting of
digits, letters, and a few graphic symbols.
A <xref target="reserved">reserved</xref> subset of those characters
may be used to delimit syntax components within a URI, while the remaining
characters, including both the <xref target="unreserved">unreserved</xref>
set and those reserved characters not acting as delimiters, define each
component's data.
</t>

<section title="Percent Encoding" anchor="percent-encoding">
<figure><preamble>
<iref item="percent-encoding" primary="true"/>
<iref item="pct-encoded" primary="true"/>
A percent-encoding mechanism is used to represent a data octet in a
component when that octet's corresponding character is outside
the allowed set or is being used as a delimiter of, or within, the component.
A percent-encoded octet is encoded as a character triplet, consisting of the
percent character "%" followed by the two hexadecimal digits representing
that octet's numeric value.  For example, "%20" is the percent-encoding
for the binary octet "00100000" (ABNF: %x20), which in US-ASCII corresponds
to the space character (SP).
<iref item="URI grammar" subitem="pct-encoded" primary="true"/>
</preamble><artwork type="abnf">
   pct-encoded = "%" HEXDIG HEXDIG
</artwork><postamble>
The uppercase hexadecimal digits 'A' through 'F' are equivalent to the
lowercase digits 'a' through 'f', respectively.  Two URIs that differ
only in the case of hexadecimal digits used in percent-encoded octets are
equivalent.  For consistency, URI generators and normalizers should
use uppercase hexadecimal digits for all percent-encodings.
</postamble></figure>
</section>

<section title="Reserved Characters" anchor="reserved">
<figure><preamble>
<iref item="reserved" primary="true"/>
URIs include components and sub-components that are delimited by
characters in the "reserved" set.  These characters are called "reserved"
because they may (or may not) be defined as delimiters by the generic
syntax, by each scheme-specific syntax, or by the implementation-specific
syntax of a URI's dereferencing algorithm.  If data for a URI component
would conflict with a reserved character's purpose as a delimiter,
then the conflicting data must be percent-encoded before forming the URI.
<iref item="gen-delims" primary="true"/>
<iref item="sub-delims" primary="true"/>
<iref item="URI grammar" subitem="reserved" primary="true"/>
<iref item="URI grammar" subitem="gen-delims" primary="true"/>
<iref item="URI grammar" subitem="sub-delims" primary="true"/>
</preamble><artwork type="abnf">
   reserved    = gen-delims / sub-delims

   gen-delims  = ":" / "/" / "?" / "#" / "[" / "]" / "@"

   sub-delims  = "!" / "$" / "&amp;" / "'" / "(" / ")"
               / "*" / "+" / "," / ";" / "="
</artwork></figure>
<t>
A subset of the reserved characters (gen-delims) are used as delimiters
of the generic URI components described in <xref target="components"/>.
A component's ABNF syntax rule will not use the "reserved" production
directly; instead, each rule lists those reserved characters that are
allowed within that component (i.e., not delimiting it).  The allowed
reserved characters, including those in the sub-delims set and any of
the gen-delims that are not a delimiter of that component, are reserved
for use as sub-component delimiters within the component.  Only the most
common sub-components are defined by this specification; other
sub-components may be defined by a URI scheme's specification, or by the
implementation-specific syntax of a URI's dereferencing algorithm,
provided that such sub-components are delimited by characters in that
component's reserved set.  If no such delimiting role has been assigned,
then a reserved character appearing in a component represents the
data octet corresponding to its encoding in US-ASCII.
</t>
<t>
URIs that differ in the replacement of a reserved character with its
corresponding percent-encoded octet are not equivalent.  Percent-encoding
a reserved character, or decoding a percent-encoded octet that
corresponds to a reserved character, will change how the URI is
interpreted by most applications.
</t>
</section>

<section title="Unreserved Characters" anchor="unreserved">
<figure><preamble>
<iref item="unreserved" primary="true"/>
Characters that are allowed in a URI but do not have a reserved
purpose are called unreserved.  These include uppercase and lowercase
letters, decimal digits, hyphen, period, underscore, and tilde.
<iref item="URI grammar" subitem="unreserved" primary="true"/>
<iref item="URI grammar" subitem="mark" primary="true"/>
</preamble><artwork type="abnf">
   unreserved  = ALPHA / DIGIT / "-" / "." / "_" / "~"
</artwork></figure>
<t>
URIs that differ in the replacement of an unreserved character with
its corresponding percent-encoded octet are equivalent: they identify
the same resource.  However, percent-encoded unreserved characters may
change the result of some URI comparisons (<xref target="comparison"/>),
potentially leading to incorrect or inefficient behavior.
For consistency, percent-encoded octets in the ranges of
ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D), period (%2E),
underscore (%5F), or tilde (%7E) should not be created by URI generators
and, when found in a URI, should be decoded to their corresponding
unreserved character by URI normalizers.
</t>
</section>

<section title="When to Encode or Decode" anchor="when-to-percent-encode">
<t>
Under normal circumstances, the only time that octets within a
URI string are percent-encoded is during the process of generating
the URI from its component parts.  It is during that process that an
implementation determines which of the reserved characters are to be
used as sub-component delimiters and which can be safely used as data.
Once generated, a URI is always in its percent-encoded form.
</t>
<t>
When a URI is dereferenced, the components and sub-components significant
to the scheme-specific dereferencing process (if any) must be parsed and
separated before the percent-encoded octets within those components
can be safely decoded, since otherwise the data may be mistaken for
component delimiters.  The only exception is for percent-encoded octets
corresponding to characters in the unreserved set, which can be decoded
at any time.  For example, the octet corresponding to the tilde ("~")
character is often encoded as "%7E" by older URI processing software;
the "%7E" can be replaced by "~" without changing its interpretation.
</t>
<t>
Because the percent ("%") character serves as the indicator for
percent-encoded octets, it must be percent-encoded as "%25" in order
for that octet to be used as data within a URI.  Implementations must not
percent-encode or decode the same string more than once, since decoding
an already decoded string might lead to misinterpreting a percent data
octet as the beginning of a percent-encoding, or vice versa in the case
of percent-encoding an already percent-encoded string.
</t>
<t>
URI characters serve as an external interface for identification
between systems.  A system that internally provides identifiers in the
form of a different character encoding, such as EBCDIC, will generally
perform character translation of textual identifiers to UTF-8 (or some
other superset of the US-ASCII character encoding) at an internal interface,
since that results in more meaningful identifiers than simply
percent-encoding the original octets.  When interpreting an incoming
URI on such an interface, percent-encoded octets must be decoded before
the reverse transcoding can be applied.
</t>
<t>
In some cases, the interface between a URI component and the identifying
data it has been crafted to represent is much less direct than a character
encoding translation.  For example, portions of a URI might reflect a
query on non-ASCII data, numeric coordinates on a map, etc.  Likewise,
a URI scheme may define components with additional encoding requirements,
such as base64, that are applied prior to forming the component and
generating the URI.
</t>
<t>
When a URI scheme defines a component that represents textual data
consisting of characters from the Unicode (ISO 10646) character
set, the data should be encoded first as octets according to the
UTF-8 <xref target="RFC2279"/> character encoding, and then only those
octets that do not correspond to characters in the unreserved set
should be percent-encoded.  For example, the character A would be
represented as "A", the character LATIN CAPITAL LETTER A WITH GRAVE
would be represented as "%C3%80", and the character KATAKANA LETTER A
would be represented as "%E3%82%A2".
</t>
</section>

</section>

<section title="Syntax Components" anchor="components">
<iref item="URI" primary="true"/>
<iref item="authority" primary="false"/>
<iref item="path" primary="false"/>
<figure><preamble>
The generic URI syntax consists of a hierarchical sequence of components
referred to as the scheme, authority, path, query, and fragment.
<iref item="URI grammar" subitem="URI" primary="true"/>
<iref item="URI grammar" subitem="scheme" primary="false"/>
<iref item="URI grammar" subitem="authority" primary="false"/>
<iref item="URI grammar" subitem="path" primary="false"/>
<iref item="URI grammar" subitem="query" primary="false"/>
<iref item="URI grammar" subitem="fragment" primary="false"/>
</preamble><artwork type="abnf">
   URI = scheme ":" ["//" authority] path ["?" query] ["#" fragment]
</artwork><postamble>
The scheme and path components are required, though path may be empty
(no characters).  An ABNF-driven parser will find that the border between
authority and path is ambiguous; they are disambiguated by the
"first-match-wins" (a.k.a. "greedy") algorithm.  In other words, if
authority is present then the first segment of the path must be empty.
</postamble></figure>
<figure><preamble>
The following are two example URIs and their component parts:
</preamble><artwork>
      foo://example.com:8042/over/there?name=ferret#nose
      \_/   \______________/\_________/ \_________/ \__/
       |           |            |            |        |
    scheme     authority       path        query   fragment
       |   _____________________|__
      / \ /                        \
      urn:example:animal:ferret:nose
</artwork></figure>

<section title="Scheme" anchor="scheme">
<iref item="scheme" primary="true"/>
<t>
Each URI begins with a scheme name that refers to a specification for
assigning identifiers within that scheme. As such, the URI syntax is a
federated and extensible naming system wherein each scheme's specification
may further restrict the syntax and semantics of identifiers using that
scheme. 
</t>
<figure><preamble>
Scheme names consist of a sequence of characters beginning with a
letter and followed by any combination of letters, digits, plus ("+"),
period ("."), or hyphen ("-").  Although scheme is case-insensitive,
the canonical form is lowercase and documents that specify schemes
must do so using lowercase letters.  An implementation should accept
uppercase letters as equivalent to lowercase in scheme names
(e.g., allow "HTTP" as well as "http"), for the sake of robustness,
but should only generate lowercase scheme names, for consistency.
<iref item="URI grammar" subitem="scheme" primary="true"/>
</preamble><artwork type="abnf">
   scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
</artwork><postamble>
Individual schemes are not specified by this document.
The process for registration of new URI schemes is defined separately
by <xref target="RFC2717"/>.  The scheme registry maintains
the mapping between scheme names and their specifications.
Advice for designers of new URI schemes can be found in
<xref target="RFC2718"/>.
</postamble></figure>
</section>

<section title="Authority" anchor="authority">
<iref item="authority" primary="true"/>
<t>
Many URI schemes include a hierarchical element for a naming
authority, such that governance of the name space defined by the
remainder of the URI is delegated to that authority (which may,
in turn, delegate it further).  The generic syntax provides a common
means for distinguishing an authority based on a registered name
or server address, along with optional port and user information.
</t>
<figure><preamble>
The authority component is preceded by a double slash ("//") and is
terminated by the next slash ("/"), question mark ("?"), or
number sign ("#") character, or by the end of the URI.
<iref item="URI grammar" subitem="authority" primary="true"/>
<iref item="URI grammar" subitem="userinfo" primary="false"/>
<iref item="URI grammar" subitem="host" primary="false"/>
<iref item="URI grammar" subitem="port" primary="false"/>
</preamble><artwork type="abnf">
   authority   = [ userinfo "@" ] host [ ":" port ]
</artwork><postamble>
Some schemes do not allow the userinfo and/or port sub-components.
When presented with a URI that violates one or more scheme-specific
restrictions, the scheme-specific URI resolution process should flag
the reference as an error rather than ignore the unused parts; doing so
reduces the number of equivalent URIs and helps detect abuses of the
generic syntax that might indicate the URI has been constructed to
mislead the user (<xref target="security-semantic"/>).
</postamble></figure>

<section title="User Information" anchor="userinfo">
<iref item="userinfo" primary="true"/>
<figure><preamble>
The userinfo sub-component may consist of a user name and, optionally,
scheme-specific information about how to gain authorization to access
the resource.  The user information, if present, is followed by a
commercial at-sign ("@") that delimits it from the host.
<iref item="URI grammar" subitem="userinfo" primary="true"/>
</preamble><artwork type="abnf">
   userinfo    = *( unreserved / pct-encoded / sub-delims )
</artwork></figure>
<t>
Some URI schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text has proven to
be a security risk in almost every case where it has been used.
Note also that userinfo might be crafted to look like a trusted
domain name in order to mislead users, as described in
<xref target="security-semantic"/>.
</t>
</section>

<section title="Host" anchor="host">
<iref item="host" primary="true"/>
<figure><preamble>
The host sub-component of authority is identified by an IP literal
encapsulated within square brackets, an IPv4 address in dotted-decimal form,
or a host name.
<iref item="URI grammar" subitem="host" primary="true"/>
</preamble><artwork type="abnf">
   host        = IP-literal / IPv4address / reg-name
</artwork><postamble>
The production for host is ambiguous because it does not completely
distinguish between an IPv4address and a reg-name.  Again, the
"first-match-wins" algorithm applies: If host matches the production for
IPv4address, then it should be considered an IPv4 address literal
and not a reg-name.
</postamble></figure>
<figure><preamble>
<iref item="IPv6" primary="true"/>
<iref item="IP-literal" primary="true"/>
<iref item="IPv6address" primary="true"/>
<iref item="ls32" primary="true"/>
<iref item="h4" primary="true"/>
<iref item="vflag" primary="true"/>
A host identified by an Internet Protocol literal address, version 6
<xref target="RFC3513"/> or later, is distinguished by enclosing the IP
literal within square-brackets ("[" and "]").  This is the only place
where square-bracket characters are allowed in the URI syntax.
In anticipation of future, as-yet-undefined IP literal address formats,
an optional version flag may be used to indicate such a format
explicitly rather than relying on heuristic determination.
<iref item="URI grammar" subitem="IP-literal" primary="true"/>
<iref item="URI grammar" subitem="IPv6address" primary="false"/>
<iref item="URI grammar" subitem="vflag" primary="true"/>
</preamble><artwork type="abnf">
   IP-literal = "[" ( IPv6address | vflag "." 1*pchar ) "]"

   vflag       = "v" HEXDIG
</artwork><postamble>
The version flag does not indicate the IP version; rather, it indicates
future versions of the literal format.  As such, implementations must
not provide the vflag for existing IPv4 and IPv6 literal addresses.
If a URI containing an IP-literal that starts with "v" (case-insensitive),
indicating that the version flag is present, is dereferenced by an application
that does not know the meaning of that version flag, then the application
should return an appropriate error for "address mechanism not supported".
</postamble></figure>
<figure><preamble>
A host identified by an IPv6 literal address is represented inside
the square brackets without a preceding version flag.  The ABNF provided
here is a translation of the text definition of an IPv6 literal address
provided in <xref target="RFC3513"/>.
<iref item="URI grammar" subitem="IPv6address" primary="true"/>
<iref item="URI grammar" subitem="ls32" primary="true"/>
<iref item="URI grammar" subitem="h4" primary="true"/>
</preamble><artwork type="abnf">
   IPv6address =                          6( h4 ":" ) ls32
               /                     "::" 5( h4 ":" ) ls32
               / [              h4 ] "::" 4( h4 ":" ) ls32
               / [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32
               / [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32
               / [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32
               / [ *4( h4 ":" ) h4 ] "::"             ls32
               / [ *5( h4 ":" ) h4 ] "::"             h4
               / [ *6( h4 ":" ) h4 ] "::"

   ls32        = ( h4 ":" h4 ) / IPv4address
               ; least-significant 32 bits of address

   h4          = 1*4HEXDIG
</artwork></figure>
<figure><preamble>
<iref item="IPv4" primary="true"/>
<iref item="IPv4address" primary="true"/>
<iref item="dec-octet" primary="true"/>
A host identified by an IPv4 literal address is represented in
dotted-decimal notation (a sequence of four decimal numbers in the
range 0 to 255, separated by "."), as described in <xref target="RFC1123"/>
by reference to <xref target="RFC0952"/>.  Note that other forms of
dotted notation may be interpreted on some platforms, as described in
<xref target="security-ipv4"/>, but only the dotted-decimal form of
four octets is allowed by this grammar.
<iref item="URI grammar" subitem="IPv4address" primary="true"/>
<iref item="URI grammar" subitem="dec-octet" primary="true"/>
</preamble><artwork type="abnf">
   IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet

   dec-octet   = DIGIT                 ; 0-9
               / %x31-39 DIGIT         ; 10-99
               / "1" 2DIGIT            ; 100-199
               / "2" %x30-34 DIGIT     ; 200-249
               / "25" %x30-35          ; 250-255
</artwork></figure>
<figure><preamble>
<iref item="reg-name" primary="true"/>
<iref item="registered name" primary="true"/>
A host identified by a registered name is a string of 0 to 255
characters that is intended for lookup within a locally-defined host or
service name registry.  The most common of such registry mechanisms, and
the format required for globally-scoped identifiers, is the Domain Name
System (DNS), as defined by Section 3 of <xref target="RFC1034"/> and
Section 2.1 of <xref target="RFC1123"/>.  A DNS name consists of a
sequence of domain labels separated by ".", each domain label starting and
ending with an alphanumeric character and possibly also containing "-"
characters.  The rightmost domain label of a fully qualified domain name
in DNS may be followed by a single "." and should be followed by one
if it is necessary to distinguish between the complete domain name and
some local domain.
<iref item="URI grammar" subitem="reg-name" primary="true"/>
</preamble><artwork type="abnf">
   reg-name    = 0*255( unreserved / pct-encoded / sub-delims )
</artwork><postamble>
If the host component is defined and the registered name is empty
(zero length), then the registered name defaults to "localhost".
The reg-name syntax allows for percent-encoded octets, which is necessary
to enable internationalized domain names to be provided in URIs; such octets
must represent characters encoded in the UTF-8 character encoding prior
to being percent-encoded.
</postamble></figure>
<t>
This specification does not mandate a particular registered name lookup
technology, and therefore does not restrict the syntax of reg-name beyond
that necessary for interoperability.  A URI resolution implementation might
use DNS, host tables, yellow pages, NetInfo, WINS, or any other system
for lookup of host and service names.  However, a globally-scoped naming
system, such as DNS fully-qualified domain names, is necessary for URIs
that are intended to have global scope, and thus names conforming to the
DNS syntax are strongly recommended.
</t>
<t>
The presence of host within a URI does not imply that the scheme
requires access to the given host on the Internet.  In many cases,
the host syntax is used only for the sake of reusing the existing
registration process created and deployed for DNS, thus obtaining a
globally unique name without the cost of deploying another registry.
However, such use comes with its own costs: domain name ownership
may change over time for reasons not anticipated by the URI creator.
</t>
</section>

<section title="Port" anchor="port">
<iref item="port" primary="true"/>
<figure><preamble>
The port sub-component of authority is designated by an optional
port number in decimal following the host and delimited from it by
a single colon (":") character.
<iref item="URI grammar" subitem="port" primary="true"/>
</preamble><artwork type="abnf">
   port        = *DIGIT
</artwork><postamble>
A scheme may define a default port.  For example, the "http" scheme defines
a default port of "80", corresponding to its reserved TCP port number.
The type of port designated by the port number (e.g., TCP, UDP, SCTP, etc.)
is defined by the URI scheme.  URI generators and normalizers should omit
the port component and its ":" delimiter if port is empty or its value
would be the same as the scheme's default.
</postamble></figure>
</section>

</section>

<section title="Path" anchor="path">
<iref item="path" primary="true"/>
<iref item="segment" primary="true"/>
<iref item="pchar" primary="true"/>
<figure><preamble>
The path component contains data, usually organized in hierarchical form,
that, along with data in the non-hierarchical <xref target="query">query</xref>
component, serves to identify a resource within the scope of the URI's
scheme and naming authority (if any).  If a URI contains an authority
component, then the initial path segment must be empty (i.e., the path must
begin with a slash ("/") character or be entirely empty).  The path is
terminated by the first question mark ("?") or number sign ("#") character,
or by the end of the URI.
<iref item="URI grammar" subitem="path-segments" primary="true"/>
<iref item="URI grammar" subitem="segment" primary="true"/>
<iref item="URI grammar" subitem="pchar" primary="true"/>
</preamble><artwork type="abnf">
   path          = segment *( "/" segment )
   segment       = *pchar

   pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"
</artwork></figure>
<t>
A path consists of a sequence of path segments separated by a
slash ("/") character.  A path is always defined for a URI, though
the defined path may be empty (zero length).  Use of the slash character
to indicate hierarchy is only required when a URI will be used as the
context for relative references.  For example, the URI
&lt;mailto:fred@example.com&gt; has a path of "fred@example.com", whereas
the URI &lt;foo://info.example.com?fred&gt; has an empty path.
</t>
<iref item="dot-segments" primary="true"/>
<t>
The path segments "." and ".." are defined for relative reference within
the path name hierarchy.  They are intended for use at the beginning of
a relative path reference (<xref target="relative-uri"/>) for indicating
relative position within the hierarchical tree of names, with a similar
effect to how they are used within some operating systems' file directory
structure to indicate the current directory and parent directory,
respectively.  Unlike a file system, however, these dot-segments are
only interpreted within the URI path hierarchy and are removed
as part of the URI normalization or resolution process, as described in
<xref target="absolutize"/>.
</t>
<t>
Aside from dot-segments in hierarchical paths, a path segment is
considered opaque by the generic syntax.  URI-generating applications
often use the reserved characters allowed in segment for the purpose
of delimiting scheme-specific or generator-specific sub-components.
For example, the semicolon (";") and equals ("=") reserved characters
are often used for delimiting parameters and parameter values
applicable to that segment.  The comma (",") reserved character is often
used for similar purposes.  For example, one URI generator might use
a segment like "name;v=1.1" to indicate a reference to version 1.1 of "name",
whereas another might use a segment like "name,1.1" to indicate the same.
Parameter types may be defined by scheme-specific semantics, but in most
cases the syntax of a parameter is specific to the implementation
of the URI's dereferencing algorithm.
</t>
</section>

<section title="Query" anchor="query">
<figure><preamble>
<iref item="query" primary="true"/>
The query component contains non-hierarchical data that, along with data
in the <xref target="path">path</xref> component, serves to identify a
resource within the scope of the URI's scheme and naming authority (if any).
The query component is indicated by the first question mark ("?") character 
and terminated by a number sign ("#") character or by the end of the URI.
<iref item="URI grammar" subitem="query" primary="true"/>
<iref item="URI grammar" subitem="pchar" primary="false"/>
</preamble><artwork type="abnf">
   query       = *( pchar / "/" / "?" )
</artwork></figure>
<t>
The characters slash ("/") and question mark ("?") are allowed to
represent data within the query component, but such use is discouraged;
incorrect implementations of reference resolution often fail to
distinguish them from hierarchical separators, thus resulting in
non-interoperable results while parsing relative references.  However,
since query components are often used to carry identifying information
in the form of "key=value" pairs, and one frequently used value is a
reference to another URI, it is sometimes better for usability to
avoid percent-encoding those characters.
<list>
<t>
Note: Some client applications will fail to separate a reference's
query component from its path component before merging the base and
reference paths (<xref target="absolutize"/>).  This may result in
loss of information if the query component contains the strings
"/../" or "/./".
</t>
</list>
</t>
</section>

<section title="Fragment" anchor="fragment">
<figure><preamble>
<iref item="fragment" primary="true"/>
The fragment identifier component of a URI allows indirect identification
of a secondary resource by reference to a primary resource and additional
identifying information.  The identified secondary resource may be some
portion or subset of the primary resource, some view on representations
of the primary resource, or some other resource.  A fragment identifier
component is indicated by the presence of a number sign ("#") character
and terminated by the end of the URI string.
<iref item="URI grammar" subitem="fragment" primary="true"/>
<iref item="URI grammar" subitem="pchar" primary="false"/>
</preamble><artwork type="abnf">
   fragment    = *( pchar / "/" / "?" )
</artwork></figure>
<t>
The semantics of a fragment identifier are defined by the set of
representations that might result from a retrieval action on the primary
resource. The fragment's format and resolution is therefore dependent on
the media type <xref target="RFC2046"/> of the retrieved representation,
even though such a retrieval is only performed if the URI is dereferenced.
Individual media types may define their own restrictions on, or structure
within, the fragment identifier syntax for specifying different types of
subsets, views, or external references that are identifiable as secondary
resources by that media type.  If the primary resource is represented by
multiple media types, as is often the case for resources whose representation
is selected based on attributes of the retrieval request, then interpretation
of the fragment identifier should be consistent across all of those
media types in order for it to be viable as an identifier.
</t>
<t>
As with any URI, use of a fragment identifier component does not imply
that a retrieval action will take place.  A URI with a fragment identifier
may be used to refer to the secondary resource without any implication
that the primary resource is accessible.  However, if a URI is used
in a context that does call for retrieval and is not a same-document
reference (<xref target="same-document"/>), the fragment identifier is
only valid as a reference if a retrieval action on the primary resource
succeeds and results in a representation for which the fragment identifier
is meaningful.
</t>
<t>
Fragment identifiers have a special role in information systems as
the primary form of client-side indirect referencing, allowing
an author to specifically identify those aspects of an existing
resource that are only indirectly provided by the resource owner.
As such, interpretation of the fragment identifier during a retrieval
action is performed solely by the user agent; the fragment identifier
is not passed to other systems during the process of retrieval.
Although this is often perceived to be a loss of information,
particularly in regards to accurate redirection of references as
content moves over time, it also serves to prevent information
providers from denying reference authors the right to selectively
refer to information within a resource.
</t>
<t>
The characters slash ("/") and question mark ("?") are allowed to
represent data within the fragment identifier, but such use is
discouraged for the same reasons as described above for query.
</t>
</section>

</section>

<section title="Usage" anchor="usage">
<t>
When applications make reference to a URI, they do not always use the
full form of reference defined by the "URI" syntax production.
In order to save space and take advantage of hierarchical locality,
many Internet protocol elements and media type formats allow an
abbreviation of a URI, while others restrict the syntax to a particular
form of URI.  We define the most common forms of reference syntax in
this specification because they impact and depend upon the design of
the generic syntax, requiring a uniform parsing algorithm
in order to be interpreted consistently.
</t>

<section title="URI Reference" anchor="uri-reference">
<iref item="URI-reference" primary="true"/>
<figure><preamble>
The ABNF rule URI-reference is used to denote the most common usage of a
resource identifier.
<iref item="URI grammar" subitem="URI-reference" primary="true"/>
<iref item="URI grammar" subitem="URI" primary="false"/>
<iref item="URI grammar" subitem="relative-URI" primary="false"/>
</preamble><artwork type="abnf">
   URI-reference = URI / relative-URI
</artwork><postamble>
A URI-reference may be relative:
if the reference string's prefix matches the syntax of a scheme followed by
its colon separator, then the reference is a URI rather than a relative-URI.
</postamble></figure>
<t>
A URI-reference is typically parsed first into the five URI components,
in order to determine what components are present and whether or not the
reference is relative, and then each component is parsed for
its subparts and their validation.  The ABNF of URI-reference, along with
the "first-match-wins" disambiguation rule, is sufficient to define a
validating parser for the generic syntax.  Readers familiar with
regular expressions should see <xref target="regexp"/> for an example
of a non-validating URI-reference parser that will take any given
string and extract the URI components.
</t>
</section>

<section title="Relative URI" anchor="relative-uri">
<iref item="relative-URI" primary="true"/>
<iref item="network-path" primary="true"/>
<iref item="absolute-path" primary="true"/>
<iref item="relative-path" primary="true"/>
<figure><preamble>
A relative URI reference takes advantage of the hier-part syntax
(<xref target="components"/>) in order to express a reference that is
relative to the name space of another hierarchical URI.
<iref item="URI grammar" subitem="relative-URI" primary="true"/>
<iref item="URI grammar" subitem="query" primary="false"/>
<iref item="URI grammar" subitem="fragment" primary="false"/>
</preamble><artwork type="abnf">
   relative-URI  = ["//" authority] path ["?" query] ["#" fragment]
</artwork><postamble>
The URI referred to by a relative reference is obtained by applying
the reference resolution algorithm of <xref target="reference-resolution"/>.
</postamble></figure>
<t>
A relative reference that begins with two slash characters is termed a
network-path reference; such references are rarely used.
A relative reference that begins with a single slash character is
termed an absolute-path reference.  A relative reference that does not
begin with a slash character is termed a relative-path reference.
</t>
<t>
A path segment that contains a colon character (e.g., "this:that")
cannot be used as the first segment of a relative-path reference
because it would be mistaken for a scheme name.  Such a segment must be
preceded by a dot-segment (e.g., "./this:that") to make a relative-path
reference.
</t>
</section>

<section title="Absolute URI" anchor="absolute-uri">
<iref item="absolute" primary="true"/>
<iref item="absolute-URI" primary="true"/>
<figure><preamble>
Some protocol elements allow only the absolute form of a URI without
a fragment identifier.  For example, defining the base URI for later
use by relative references calls for an absolute-URI production that
does not allow a fragment.
<iref item="URI grammar" subitem="absolute-URI" primary="true"/>
<iref item="URI grammar" subitem="scheme" primary="false"/>
<iref item="URI grammar" subitem="query" primary="false"/>
</preamble><artwork type="abnf">
   absolute-URI  = scheme ":" ["//" authority] path ["?" query]
</artwork></figure>
</section>

<section title="Same-document Reference" anchor="same-document">
<iref item="same-document" primary="true"/>
<t>
When a URI reference occurring within a document or message refers
to a URI that is, aside from its fragment component (if any),
identical to the base URI (<xref target="base-uri"/>), that reference
is called a "same-document" reference.  The most frequent examples
of same-document references are relative references that are empty
or include only the number sign ("#") separator followed by a fragment
identifier.
</t>
<t>
When a same-document reference is dereferenced for the purpose of a
retrieval action, the target of that reference is defined to be within
that current document or message; the dereference should not result in
a new retrieval.
</t>
</section>

<section title="Suffix Reference" anchor="suffix">
<iref item="suffix" primary="true"/>
<t>
The URI syntax is designed for unambiguous reference to resources and
extensibility via the URI scheme.  However, as URI identification and
usage have become commonplace, traditional media (television, radio,
newspapers, billboards, etc.) have increasingly used a suffix of
the URI as a reference, consisting of only the authority and path
portions of the URI, such as
</t>
<figure><artwork>
   www.w3.org/Addressing/
</artwork></figure>
<t>
or simply a DNS registered name on its own.  Such references are primarily
intended for human interpretation rather than machine, with the
assumption that context-based heuristics are sufficient to complete
the URI (e.g., most host names beginning with "www" are likely to have
a URI prefix of "http://").  Although there is no standard set of
heuristics for disambiguating a URI suffix, many client implementations
allow them to be entered by the user and heuristically resolved.
</t>
<t>
While this practice of using suffix references is common, it should
be avoided whenever possible and never used in situations where long-term
references are expected.  The heuristics noted above will change over time,
particularly when new URI schemes are introduced, and are often
incorrect when used out of context.  Furthermore, they can lead to
security issues along the lines of those described in
<xref target="RFC1535"/>.
</t>
<t>
Since a URI suffix has the same syntax as a relative path reference, a
suffix reference cannot be used in contexts where a relative reference
is expected.  As a result, suffix references are limited to those places where
there is no defined base URI, such as dialog boxes and off-line advertisements.
</t>
</section>

</section>

<section title="Reference Resolution" anchor="reference-resolution">
<iref item="relative" primary="false"/>
<iref item="resolution" primary="false"/>
<t>
This section defines the process of resolving a URI reference within
a context that allows relative references, such that the result is a
string matching the "URI" syntax production of <xref target="components"/>.
</t>

<section title="Establishing a Base URI" anchor="base-uri">
<iref item="base URI" primary="true"/>
<t>
The term "relative" implies that there exists some "base URI" against
which the relative reference is applied.  Aside from same-document
references (<xref target="same-document"/>, relative references are
only usable if the base URI is known.  The base URI must be established
by the parser prior to parsing URI references that might be relative.
</t>
<t>
The base URI of a document can be established in one of four ways,
listed below in order of precedence.  The order of precedence can be
thought of in terms of layers, where the innermost defined base URI
has the highest precedence.  This can be visualized graphically as:
</t>
<figure><artwork>
   .----------------------------------------------------------.
   |  .----------------------------------------------------.  |
   |  |  .----------------------------------------------.  |  |
   |  |  |  .----------------------------------------.  |  |  |
   |  |  |  |  .----------------------------------.  |  |  |  |
   |  |  |  |  |       &lt;relative-reference&gt;       |  |  |  |  |
   |  |  |  |  `----------------------------------'  |  |  |  |
   |  |  |  | (5.1.1) Base URI embedded in the       |  |  |  |
   |  |  |  |         document's content             |  |  |  |
   |  |  |  `----------------------------------------'  |  |  |
   |  |  | (5.1.2) Base URI of the encapsulating entity |  |  |
   |  |  |         (message, document, or none).        |  |  |
   |  |  `----------------------------------------------'  |  |
   |  | (5.1.3) URI used to retrieve the entity            |  |
   |  `----------------------------------------------------'  |
   | (5.1.4) Default Base URI is application-dependent        |
   `----------------------------------------------------------'
</artwork></figure>

<section title="Base URI within Document Content" anchor="base-context">
<t>
Within certain document media types, the base URI of the document can
be embedded within the content itself such that it can be readily
obtained by a parser.  This can be useful for descriptive documents,
such as tables of content, which may be transmitted to others through
protocols other than their usual retrieval context (e.g., E-Mail or
USENET news).
</t>
<t>
It is beyond the scope of this document to specify how, for each
media type, the base URI can be embedded.  It is assumed that user
agents manipulating such media types will be able to obtain the
appropriate syntax from that media type's specification.
</t>
<t>
A mechanism for embedding the base URI within MIME container types
(e.g., the message and multipart types) is defined by MHTML
<xref target="RFC2110"/>.  Protocols that do not use the MIME message
header syntax, but do allow some form of tagged metadata to be included
within messages, may define their own syntax for defining the base
URI as part of a message.
</t>
</section>

<section title="Base URI from the Encapsulating Entity"
         anchor="base-encapsulated">
<t>
If no base URI is embedded, the base URI of a document is defined by
the document's retrieval context.  For a document that is enclosed
within another entity (such as a message or another document), the
retrieval context is that entity; thus, the default base URI of the
document is the base URI of the entity in which the document is
encapsulated.
</t>
</section>

<section title="Base URI from the Retrieval URI" anchor="base-retrieval">
<t>
If no base URI is embedded and the document is not encapsulated
within some other entity (e.g., the top level of a composite entity),
then, if a URI was used to retrieve the base document, that URI shall
be considered the base URI.  Note that if the retrieval was the
result of a redirected request, the last URI used (i.e., that which
resulted in the actual retrieval of the document) is the base URI.
</t>
</section>

<section title="Default Base URI" anchor="base-default">
<t>
If none of the conditions described in above apply,
then the base URI is defined by the context of the application.
Since this definition is necessarily application-dependent, failing
to define the base URI using one of the other methods may result in
the same content being interpreted differently by different types of
application.
</t>
<t>
It is the responsibility of the distributor(s) of a document
containing a relative reference to ensure that the base URI for that document
can be established.  It must be emphasized that a relative reference,
aside from a same-document reference, cannot be used reliably in
situations where the document's base URI is not well-defined.
</t>
</section>
</section>

<section title="Obtaining the Referenced URI" anchor="absolutize">
<t>
This section describes an example algorithm for resolving URI
references that might be relative to a given base URI.  The algorithm
is intended to provide a definitive result that can be used to test
the output of other implementations.  Implementation of the algorithm
itself is not required, but the result given by an implementation must
match the result that would be given by this algorithm.
</t>
<t>
The base URI (Base) is established according to the rules of
<xref target="base-uri"/> and parsed into the five main components
described in <xref target="components"/>.  Note that only the scheme
component is required to be present in the base URI; the other components
may be empty or undefined.  A component is undefined if its preceding
separator does not appear in the URI reference; the path component is
never undefined, though it may be empty.  The algorithm assumes that
the base URI is well-formed and does not contain dot-segments in its path.
</t>
<figure><preamble>
For each URI reference (R), the following pseudocode describes an
algorithm for transforming R into its target URI (T):
</preamble>
<artwork>
   -- The URI reference is parsed into the five URI components
   --
   (R.scheme, R.authority, R.path, R.query, R.fragment) = parse(R);

   -- A non-strict parser may ignore a scheme in the reference
   -- if it is identical to the base URI's scheme.
   --
   if ((not strict) and (R.scheme == Base.scheme)) then
      undefine(R.scheme);
   endif;

   if defined(R.scheme) then
      T.scheme    = R.scheme;
      T.authority = R.authority;
      T.path      = remove_dot_segments(R.path);
      T.query     = R.query;
   else
      if defined(R.authority) then
         T.authority = R.authority;
         T.path      = remove_dot_segments(R.path);
         T.query     = R.query;
      else
         if (R.path == "") then
            T.path = Base.path;
            if defined(R.query) then
               T.query = R.query;
            else
               T.query = Base.query;
            endif;
         else
            if (R.path starts-with "/") then 
               T.path = remove_dot_segments(R.path);
            else
               T.path = merge(Base.path, R.path);
               T.path = remove_dot_segments(T.path);
            endif;
            T.query = R.query; 
         endif;
         T.authority = Base.authority;
      endif;
      T.scheme = Base.scheme;
   endif;

   T.fragment = R.fragment;
</artwork></figure>
<iref item="merge" primary="true"/>
<t>
The pseudocode above refers to a merge routine for merging a
relative-path reference with the path of the base URI.  This is
accomplished as follows:
<list style="symbols">
<t>
If the base URI's path is empty, then return a string consisting of "/"
concatenated with the reference's path component; otherwise,
</t>
<t>
If the base URI's path is non-hierarchical, as indicated by not beginning
with a slash, then return a string consisting of the reference's path
component; otherwise,
</t>
<t>
Return a string consisting of the reference's path component appended to
all but the last segment of the base URI's path (i.e., any characters
after the right-most "/" in the base URI path are excluded).
</t>
</list>
</t>
<iref item="remove_dot_segments" primary="true"/>
<t>
The pseudocode also refers to a remove_dot_segments routine
for interpreting and removing the special "." and ".." complete
path segments from a referenced path.  This is done after the
path is extracted from a reference, whether or not the path
was relative, in order to remove any invalid or extraneous
dot-segments prior to forming the target URI.  Although there
are many ways to accomplish this removal process, we describe a
simple method using a separate string buffer:
<list style="numbers">
<t>
The buffer is initialized with the unprocessed path component.
</t>
<t>
If the buffer begins with "./" or "../", the "." or ".." segment is removed.
</t>
<t>
All occurrences of "/./" in the buffer are replaced with "/".
</t>
<t>
If the buffer ends with "/.", the "." is removed.
</t>
<t>
All occurrences of "/&lt;segment&gt;/../" in the buffer, where ".."
and &lt;segment&gt; are complete path segments, are iteratively replaced
with "/" in order from left to right until no matching pattern remains.
If the buffer ends with "/&lt;segment&gt;/..", that is also replaced with "/".
Note that &lt;segment&gt; may be empty.
</t>
<t>
All prefixes of "&lt;segment&gt;/../" in the buffer, where ".."
and &lt;segment&gt; are complete path segments, are iteratively replaced
with "/" in order from left to right until no matching pattern remains.
If the buffer ends with "&lt;segment&gt;/..", that is also replaced with "/".
Note that &lt;segment&gt; may be empty.
</t>
<t>
The remaining buffer is returned as the result of remove_dot_segments.
</t>
</list>
</t>
<t>
Some systems may find it more efficient to implement the remove_dot_segments
algorithm as a stack of path segments being compressed, rather than as a
series of string pattern replacements.
</t>
</section>

<section title="Recomposition of a Parsed URI" anchor="recomposition">
<figure><preamble>
Parsed URI components can be recomposed to obtain the corresponding
URI reference string.  Using pseudocode, this would be:
</preamble><artwork>
   result = ""

   if defined(scheme) then
      append scheme to result;
      append ":" to result;
   endif;

   if defined(authority) then
      append "//" to result;
      append authority to result;
   endif;

   append path to result;

   if defined(query) then
      append "?" to result;
      append query to result;
   endif;

   if defined(fragment) then
      append "#" to result;
      append fragment to result;
   endif;

   return result;
</artwork><postamble>
Note that we are careful to preserve the distinction between a
component that is undefined, meaning that its separator was not
present in the reference, and a component that is empty, meaning
that the separator was present and was immediately followed by the
next component separator or the end of the reference.
</postamble></figure>
</section>

<section title="Reference Resolution Examples" anchor="reference-examples">
<t>
Within an object with a well-defined base URI of
</t>
<figure><artwork>
   http://a/b/c/d;p?q
</artwork></figure>
<t>
a relative URI reference would be resolved as follows:
</t>

<section title="Normal Examples" anchor="relative-normal">
<figure><artwork>
   "g:h"           =  "g:h"
   "g"             =  "http://a/b/c/g"
   "./g"           =  "http://a/b/c/g"
   "g/"            =  "http://a/b/c/g/"
   "/g"            =  "http://a/g"
   "//g"           =  "http://g"
   "?y"            =  "http://a/b/c/d;p?y"
   "g?y"           =  "http://a/b/c/g?y"
   "#s"            =  "http://a/b/c/d;p?q#s"
   "g#s"           =  "http://a/b/c/g#s"
   "g?y#s"         =  "http://a/b/c/g?y#s"
   ";x"            =  "http://a/b/c/;x"
   "g;x"           =  "http://a/b/c/g;x"
   "g;x?y#s"       =  "http://a/b/c/g;x?y#s"
   "."             =  "http://a/b/c/"
   "./"            =  "http://a/b/c/"
   ".."            =  "http://a/b/"
   "../"           =  "http://a/b/"
   "../g"          =  "http://a/b/g"
   "../.."         =  "http://a/"
   "../../"        =  "http://a/"
   "../../g"       =  "http://a/g"
</artwork></figure>
</section>

<section title="Abnormal Examples" anchor="relative-abnormal">
<t>
Although the following abnormal examples are unlikely to occur in
normal practice, all URI parsers should be capable of resolving them
consistently.  Each example uses the same base as above.
</t>
<t>
An empty reference refers to the current base URI.
</t>
<figure><artwork>
   ""              =  "http://a/b/c/d;p?q"
</artwork></figure>
<t>
Parsers must be careful in handling the case where there are more
relative path ".." segments than there are hierarchical levels in the
base URI's path.  Note that the ".." syntax cannot be used to change
the authority component of a URI.
</t>
<figure><artwork>
   "../../../g"    =  "http://a/g"
   "../../../../g" =  "http://a/g"
</artwork></figure>
<t>
Similarly, parsers must remove the dot-segments "." and ".." when
they are complete components of a path, but not when they are only
part of a segment.
</t>
<figure><artwork>
   "/./g"          =  "http://a/g"
   "/../g"         =  "http://a/g"
   "g."            =  "http://a/b/c/g."
   ".g"            =  "http://a/b/c/.g"
   "g.."           =  "http://a/b/c/g.."
   "..g"           =  "http://a/b/c/..g"
</artwork></figure>
<t>
Less likely are cases where the relative URI uses unnecessary or
nonsensical forms of the "." and ".." complete path segments.
</t>
<figure><artwork>
   "./../g"        =  "http://a/b/g"
   "./g/."         =  "http://a/b/c/g/"
   "g/./h"         =  "http://a/b/c/g/h"
   "g/../h"        =  "http://a/b/c/h"
   "g;x=1/./y"     =  "http://a/b/c/g;x=1/y"
   "g;x=1/../y"    =  "http://a/b/c/y"
</artwork></figure>
<t>
Some applications fail to separate the reference's query and/or
fragment components from a relative path before merging it with
the base path and removing dot-segments.  This error is rarely noticed,
since typical usage of a fragment never includes the hierarchy ("/")
character, and the query component is not normally used within
relative references.
</t>
<figure><artwork>
   "g?y/./x"       =  "http://a/b/c/g?y/./x"
   "g?y/../x"      =  "http://a/b/c/g?y/../x"
   "g#s/./x"       =  "http://a/b/c/g#s/./x"
   "g#s/../x"      =  "http://a/b/c/g#s/../x"
</artwork></figure>
<t>
Some parsers allow the scheme name to be present in a relative URI if
it is the same as the base URI scheme.  This is considered to be a
loophole in prior specifications of partial URI <xref target="RFC1630"/>.
Its use should be avoided, but is allowed for backward compatibility.
</t>
<figure><artwork>
   "http:g"        =  "http:g"         ; for strict parsers
                   /  "http://a/b/c/g" ; for backward compatibility
</artwork></figure>
</section>
</section>

</section>

<section title="Normalization and Comparison" anchor="comparison">
<t>
One of the most common operations on URIs is simple comparison:
determining if two URIs are equivalent without using the URIs to
access their respective resource(s).  A comparison is performed
every time a response cache is accessed, a browser checks its
history to color a link, or an XML parser processes tags within a namespace.
Extensive normalization prior to comparison of URIs is often used
by spiders and indexing engines to prune a search space or
reduce duplication of request actions and response storage.
</t>
<t>
URI comparison is performed in respect to some particular purpose,
and software with differing purposes will often be subject to differing
design trade-offs in regards to how much effort should be spent in
reducing duplicate identifiers.  This section describes a variety of
methods that may be used to compare URIs, the trade-offs between them,
and the types of applications that might use them.
</t>

<section title="Equivalence" anchor="equivalence">
<t>
Since URIs exist to identify resources, presumably they should be
considered equivalent when they identify the same resource.  However,
such a definition of equivalence is not of much practical use, since
there is no way for software to compare two resources without knowledge
of the implementation-specific syntax of each URI's dereferencing algorithm.
For this reason, determination of equivalence or
difference of URIs is based on string comparison, perhaps augmented by
reference to additional rules provided by URI scheme definitions.
We use the terms "different" and "equivalent" to describe
the possible outcomes of such comparisons, but there
are many application-dependent versions of equivalence.
</t>
<t>
Even though it is possible to determine that two URIs are equivalent,
it is never possible to be sure that two URIs identify different
resources. Therefore, comparison methods are designed to minimize
false negatives while strictly avoiding false positives.
</t>
<t>
In testing for equivalence, it is generally unwise to directly compare
relative URI references; they should be converted to their absolute forms
before comparison.  Furthermore, when URI references are being compared
for the purpose of selecting (or avoiding) a network action, such as
retrieval of a representation, it is often necessary to remove fragment
identifiers from the URIs prior to comparison.
</t>
</section>

<section title="Comparison Ladder" anchor="comparison-ladder">
<t>
A variety of methods are used in practice to test URI equivalence.
These methods fall into a range, distinguished by the amount of
processing required and the degree to which the probability of false
negatives is reduced.  As noted above, false negatives cannot in
principle be eliminated.  In practice, their probability can be reduced,
but this reduction requires more processing and is not cost-effective
for all applications.
</t>
<t>
If this range of comparison practices is considered as a ladder, the
following discussion will climb the ladder, starting with those that
are cheap but have a relatively higher chance of producing false negatives,
and proceeding to those that have higher computational cost and lower risk
of false negatives.
</t>

<section title="Simple String Comparison" anchor="comparison-string">
<t>
If two URIs, considered as character strings, are identical, then it is
safe to conclude that they are equivalent.  This type of equivalence test
has very low computational cost and is in wide use in a variety of
applications, particularly in the domain of parsing.
</t>
<t>
Testing strings for equivalence requires some basic precautions.
This procedure is often referred to as "bit-for-bit" or "byte-for-byte"
comparison, which is potentially misleading.  Testing of strings for
equality is normally based on pairwise comparison of the characters
that make up the strings, starting from the first and proceeding until
both strings are exhausted and all characters found to be equal, a
pair of characters compares unequal, or one of the strings is exhausted
before the other.
</t>
<t>
Such character comparisons require that each pair of characters be put
in comparable form.  For example, should one URI be stored in a byte
array in EBCDIC encoding, and the second be in a Java String object,
bit-for-bit comparisons applied naively will produce both false-positive
and false-negative errors.  Thus, in principle, it is better to speak of
equality on a character-for-character rather than byte-for-byte or
bit-for-bit basis.
</t>
<t>
Unicode defines a character as being identified by number
("codepoint") with an associated bundle of visual and other semantics.
At the software level, it is not practical to compare semantic bundles,
so in practical terms, character-by-character comparisons are done
codepoint-by-codepoint.
</t>
</section>

<section title="Syntax-based Normalization" anchor="normalize-syntax">
<figure><preamble>
Software may use logic based on the definitions provided by this
specification to reduce the probability of false negatives.  Such
processing is moderately higher in cost than character-for-character
string comparison.  For example, an application using this approach
could reasonably consider the following two URIs equivalent:
</preamble><artwork>
   example://a/b/c/%7A
   eXAMPLE://a/./b/../b/c/%7a
</artwork><postamble>
Web user agents, such as browsers, typically apply this type of URI
normalization when determining whether a cached response is available.
Syntax-based normalization includes such techniques as case normalization,
encoding normalization, and removal of dot-segments.
</postamble></figure>

<section title="Case Normalization" anchor="normalize-case">
<t>
When a URI scheme uses components of the generic syntax, it will
also use the common syntax equivalence rules, namely that the scheme
and host are case insensitive and therefore can be normalized
to lowercase.  For example, the URI &lt;HTTP://www.EXAMPLE.com/&gt; is
equivalent to &lt;http://www.example.com/&gt;.
</t>
</section>

<section title="Encoding Normalization" anchor="normalize-encoding">
<t>
The percent-encoding mechanism (<xref target="percent-encoding"/>)
is a frequent source of variance among otherwise identical URIs.
One cause is the choice of uppercase or lowercase letters for the
hexadecimal digits within the encoding triplet (e.g., "%3a" versus "%3A").
Such sequences are always equivalent; for the sake of uniformity, URI
generators and normalizers should use uppercase letters for the
hex digits A-F.
</t>
<t>
Some URI generators percent-encode octets that do not require
percent-encoding, resulting in URIs that are equivalent to their
non-encoded counterparts.  Such URIs should be normalized by
decoding any percent-encoded octet that corresponds to an unreserved
character, as described in <xref target="unreserved"/>.
</t>
</section>

<section title="Path Segment Normalization" anchor="normalize-path">
<t>
The complete path segments "." and ".." have a special meaning within
hierarchical URI schemes.  As such, they should not appear in absolute
paths; if they are found, they can be removed by applying the
remove_dot_segments algorithm to the path, as described in
<xref target="absolutize"/>.
</t>
</section>

</section>

<section title="Scheme-based Normalization" anchor="normalize-scheme">
<figure><preamble>
The syntax and semantics of URIs vary from scheme to scheme, as described
by the defining specification for each scheme.  Software may use
scheme-specific rules, at further processing cost, to reduce the
probability of false negatives.  For example, since the "http" scheme
makes use of an authority component, has a default port of "80", and
defines an empty path to be equivalent to "/", the following four URIs
are equivalent:
</preamble><artwork>
   http://example.com
   http://example.com/
   http://example.com:/
   http://example.com:80/
</artwork><postamble>
In general, a URI that uses the generic syntax for authority with an
empty path should be normalized to a path of "/"; likewise, an explicit
":port", where the port is empty or the default for the scheme, is
equivalent to one where the port and its ":" delimiter are elided.
In other words, the second of the above URI examples is the normal form
for the "http" scheme.
</postamble></figure>
</section>

<section title="Protocol-based Normalization" anchor="normalize-protocol">
<figure><preamble>
Web spiders, for which substantial effort to reduce the incidence
of false negatives is often cost-effective, are observed to implement
even more aggressive techniques in URI comparison.  For example, if they
observe that a URI such as
</preamble><artwork>
   http://example.com/data
</artwork></figure>
<figure><preamble>
redirects to a URI differing only in the trailing slash
</preamble><artwork>
   http://example.com/data/
</artwork><postamble>
they will likely regard the two as equivalent in the future.  Obviously,
this kind of technique is only appropriate in special situations.
</postamble></figure>
</section>

</section>

<section title="Canonical Form" anchor="canonical-form">
<t>
It is in the best interests of everyone to avoid false-negatives in
comparing URIs and to minimize the amount of software processing for
such comparisons.  Those who generate and make reference to URIs can
reduce the cost of processing and the risk of false negatives by
consistently providing them in a form that is reasonably canonical
with respect to their scheme.  Specifically:
<list style="symbols">
  <t>Always provide the URI scheme in lowercase characters.</t>
  <t>Always provide the host, if any, in lowercase characters.</t>
  <t>Only perform percent-encoding where it is essential.</t>
  <t>Always use uppercase A-through-F characters when percent-encoding.</t>
  <t>Prevent /./ and /../ from appearing in non-relative URI paths.</t>
  <t>For schemes that define an empty path to be equivalent to a path
     of "/", use "/".</t>
</list>
</t>
<t>
The good practices listed above are motivated by deployed software
that frequently use these techniques for the purposes of normalization.
</t>
</section>

</section>

<section title="Security Considerations" anchor="security">
<t>
A URI does not in itself pose a security threat.  However, since URIs
are often used to provide a compact set of instructions for access to
network resources, care must be taken to properly interpret the data
within a URI, to prevent that data from causing unintended access, and
to avoid including data that should not be revealed in plain text.
</t>
<section title="Reliability and Consistency" anchor="security-reliability">
<t>
There is no guarantee that, having once used a given URI to retrieve
some information, the same information will be retrievable by
that URI in the future. Nor is there any guarantee that the information
retrievable via that URI in the future will be observably similar to 
that retrieved in the past.  The URI syntax does not constrain how a
given scheme or authority apportions its name space or maintains it
over time.  Such a guarantee can only be obtained from the person(s)
controlling that name space and the resource in question.  A specific
URI scheme may define additional semantics, such as name persistence,
if those semantics are required of all naming authorities for that scheme.
</t>
</section>
<section title="Malicious Construction" anchor="security-malicious">
<t>
It is sometimes possible to construct a URI such that an attempt to
perform a seemingly harmless, idempotent operation, such as the
retrieval of a representation, will in fact cause a possibly damaging
remote operation to occur.  The unsafe URI is typically constructed by
specifying a port number other than that reserved for the network protocol
in question.  The client unwittingly contacts a site that is running a
different protocol service.  The content of the URI contains instructions
that, when interpreted according to this other protocol, cause an
unexpected operation.
</t>
<t>
Caution should be used when dereferencing a URI that specifies a TCP port
number other than the default for the scheme, especially when it is
a number within the reserved space.  A frequent example of abuse has
been the use of a network protocol-based scheme with a port component
of "25", thereby fooling user agent software into sending an 
unintended or impersonating message via an SMTP server.
</t>
<t>
Care should be taken when a URI contains percent-encoded octets that match
the delimiters for a given protocol (for example, CR and LF characters for
telnet protocols) that these percent-encoded octets are not decoded before
transmission.  Transfer of the percent-encoding might violate the protocol,
but that is less harmful than allowing decoded octets to be interpreted as
additional operations or parameters, triggering an unexpected and possibly
harmful remote operation.
</t>
</section>
<section title="Rare IP Address Formats" anchor="security-ipv4">
<t>
Although the URI syntax for IPv4address only allows the common,
dotted-decimal form of IPv4 address literal, many implementations that
process URIs make use of platform-dependent system routines, such as
gethostbyname() and inet_aton(), to translate the string literal to an
actual IP address.  Unfortunately, such system routines often allow and
process a much larger set of formats than those described in
<xref target="host"/>.
</t>
<t>
For example, many implementations allow dotted forms of three numbers,
wherein the last part is interpreted as a 16-bit quantity and placed in
the right-most two bytes of the network address (e.g., a Class B network).
Likewise, a dotted form of two numbers means the last part is interpreted
as a 24-bit quantity and placed in the right most three bytes of the network
address (Class A), and a single number (without dots) is interpreted as
a 32-bit quantity and stored directly in the network address.  Adding
further to the confusion, some implementations allow each dotted part
to be interpreted as decimal, octal, or hexadecimal, as specified in
the C language (i.e., a leading 0x or 0X implies hexadecimal; otherwise,
a leading 0 implies octal; otherwise, the number is interpreted as decimal).
</t>
<t>
These additional IP address formats are not allowed in the URI syntax
due to differences between platform implementations.  However, they
can become a security concern if an application attempts to filter
access to resources based on the IP address in string literal format.
If such filtering is performed, it is recommended that literals
be converted to numeric form and filtered based on the numeric value,
rather than a prefix or suffix of the string form.
</t>
</section>
<section title="Sensitive Information" anchor="security-sensitive">
<t>
It is clearly unwise to use a URI that contains a password which is
intended to be secret. In particular, the use of a password within
the userinfo component of a URI is strongly discouraged except
in those rare cases where the 'password' parameter is intended to be
public.
</t>
</section>
<section title="Semantic Attacks" anchor="security-semantic">
<figure><preamble>
Because the userinfo component is rarely used and appears before the
host in the authority component, it can be used to construct a URI
that is intended to mislead a human user by appearing to identify one
(trusted) naming authority while actually identifying a different
authority hidden behind the noise.  For example
</preamble><artwork>
   http://www.example.com&amp;story=breaking_news@10.0.0.1/top_story.htm
</artwork><postamble>
might lead a human user to assume that the host is 'www.example.com',
whereas it is actually '10.0.0.1'.  Note that the misleading userinfo
could be much longer than the example above.
</postamble></figure>
<t>
A misleading URI, such as the one above, is an attack on the user's
preconceived notions about the meaning of a URI, rather than an attack
on the software itself.  User agents may be able to reduce the impact
of such attacks by visually distinguishing the various components of
the URI when rendered, such as by using a different color or tone to
render userinfo if any is present, though there is no general panacea.
More information on URI-based semantic attacks can be found in 
<xref target="Siedzik"/>.
</t>
</section>
</section>

<section title="Acknowledgments" anchor="ack">
<t>
This specification is derived from RFC 2396 <xref target="RFC2396"/>,
RFC 1808 <xref target="RFC1808"/>, and RFC 1738 <xref target="RFC1738"/>;
the acknowledgments in those documents still apply.
It also incorporates the update (with corrections) for IPv6 literals
in the host syntax, as defined by Robert M. Hinden, Brian E. Carpenter,
and Larry Masinter in <xref target="RFC2732"/>.
In addition, contributions by Reese Anschultz, Daniel Barclay, Tim Bray,
Mike Brown, Rob Cameron, Jeremy Carroll, John C. Klensin, Dan Connolly,
Adam M. Costello, John Cowan, Jason Diamond, Martin Duerst, Stefan Eissing,
Clive D.W. Feather, Tony Hammond, Pat Hayes, Henry Holtzman, Graham Klyne,
Dan Kohn, Bruce Lilly, Andrew Main, Ira McDonald, Michael Mealling,
Stephen Pollei,
Julian Reschke, Tomas Rokicki, Miles Sabin, Mark Thomson, Ronald Tschalaer,
Norm Walsh, Marc Warne, Stuart Williams, and Henry Zongaro
are gratefully acknowledged.
</t>
</section>
</middle>
<back>
  <references title="Normative References">

<reference anchor="ASCII">
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author>
      <organization>American National Standards Institute</organization>
    </author>
    <date year="1986" />
  </front>
  <seriesInfo name="ANSI" value="X3.4" />
</reference>

<reference anchor='RFC2234'>
<front>
<title abbrev='ABNF for Syntax Specifications'>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.H.' surname='Crocker' fullname='David H. Crocker'>
<organization>Internet Mail Consortium</organization>
<address>
<postal>
<street>675 Spruce Dr.</street>
<city>Sunnyvale</city>
<region>CA</region>
<code>94086</code>
<country>US</country></postal>
<phone>+1 408 246 8253</phone>
<facsimile>+1 408 249 6205</facsimile>
<email>dcrocker@imc.org</email></address></author>
<author initials='P.' surname='Overell' fullname='Paul Overell'>
<organization>Demon Internet Ltd</organization>
<address>
<postal>
<street>Dorking Business Park</street>
<street>Dorking</street>
<city>Surrey</city>
<region>England</region>
<code>RH4 1HN</code>
<country>UK</country></postal>
<email>paulo@turnpike.com</email></address></author>
<date month='November' year='1997' /></front>
<seriesInfo name='RFC' value='2234' />
<format type='TXT' octets='24265' target='http://www.ietf.org/rfc/rfc2234.txt' />
</reference>

  </references>

  <references title="Informative References">
  
<reference anchor='RFC2277'>
<front>
<title abbrev='Charset Policy'>IETF Policy on Character Sets and Languages</title>
<author initials='H.T.' surname='Alvestrand' fullname='Harald Tveit Alvestrand'>
<organization>UNINETT</organization>
<address>
<postal>
<street>P.O.Box 6883 Elgeseter</street>
<street>N-7002 TRONDHEIM</street>
<country>NORWAY</country></postal>
<phone>+47 73 59 70 94</phone>
<email>Harald.T.Alvestrand@uninett.no</email></address></author>
<date month='January' year='1998'></date>
<area>Applications</area>
<keyword>Internet Engineering Task Force</keyword>
<keyword>character encoding</keyword></front>
<seriesInfo name='BCP' value='18' />
<seriesInfo name='RFC' value='2277' />
</reference>

<reference anchor='RFC1630'>
<front>
<title abbrev='URIs in WWW'>Universal Resource Identifiers in WWW: A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World-Wide Web</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization>CERN, World-Wide Web project</organization>
<address>
<postal>
<street>1211 Geneva 23</street>
<city></city>
<region></region>
<code></code>
<country>CH</country></postal>
<phone>+41 22 7673755</phone>
<facsimile>+41 22 7677155</facsimile>
<email>timbl@info.cern.ch</email></address></author>
<date month='June' year='1994'></date></front>
<seriesInfo name='RFC' value='1630' />
</reference>

<reference anchor='RFC1738'>
<front>
<title>Uniform Resource Locators (URL)</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization>CERN, World-Wide Web project</organization>
<address>
<postal>
<street>1211 Geneva 23</street>
<city></city>
<region></region>
<code></code>
<country>CH</country></postal>
<phone>+41 22 7673755</phone>
<facsimile>+41 22 7677155</facsimile>
<email>timbl@info.cern.ch</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Xerox PARC</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code>
<country>US</country></postal>
<phone>+1 415 812 4365</phone>
<facsimile>+1 415 812 4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='M.' surname='McCahill' fullname='Mark McCahill'>
<organization>University of Minnesota, Computer and Information Services</organization>
<address>
<postal>
<street>100 Union Street SE, Shepherd Labs</street>
<street>Room 152</street>
<city>Minneapolis</city>
<region>MN</region>
<code>55455</code>
<country>US</country></postal>
<phone>+1 612 625 1300</phone>
<email>mpm@boombox.micro.umn.edu</email></address></author>
<date month='December' year='1994'></date>
</front>
<seriesInfo name='RFC' value='1738' />
</reference>
  
<reference anchor='RFC2396'>
<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifiers (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='MIT/LCS'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<author initials='R.T.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='U.C. Irvine'>University of California, Irvine</organization>
<address>
<postal>
<street>Information and Computer Science</street>
<city>Irvine</city>
<region>CA</region>
<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Xerox Corporation'>Xerox PARC</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<facsimile>+1(415)812-4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<date month='August' year='1998' />
<area>Applications</area>
<keyword>resource</keyword>
<keyword>URI</keyword>
</front>
<seriesInfo name='RFC' value='2396' />
</reference>

<reference anchor='RFC1123'>
<front>
<title>Requirements for Internet Hosts - Application and Support</title>
<author initials='R.' surname='Braden' fullname='Robert Braden'>
<organization>University of Southern California (USC), Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone>
<email>Braden@ISI.EDU</email></address></author>
<date month='October' year='1989'></date></front>
<seriesInfo name='STD' value='3' />
<seriesInfo name='RFC' value='1123' />
</reference>

<reference anchor='RFC1808'>
<front>
<title>Relative Uniform Resource Locators</title>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization>University of California Irvine, Department of Information and Computer Science</organization>
<address>
<postal>
<street></street>
<city>Irvine</city>
<region>CA</region>
<code>92717-3425</code>
<country>US</country></postal>
<phone>+1 714 824 4049</phone>
<facsimile>+1 714 824 4056</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<date month='June' year='1995'></date>
</front>
<seriesInfo name='RFC' value='1808' />
</reference>

<reference anchor='RFC2046'>
<front>
<title abbrev='Media Types'>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 East Garvey Avenue South</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<phone>+1 818 919 3600</phone>
<facsimile>+1 818 919 3614</facsimile>
<email>ned@innosoft.com</email></address></author>
<author initials='N.' surname='Borenstein' fullname='Nathaniel S. Borenstein'>
<organization>First Virtual Holdings</organization>
<address>
<postal>
<street>25 Washington Avenue</street>
<city>Morristown</city>
<region>NJ</region>
<code>07960</code>
<country>US</country></postal>
<phone>+1 201 540 8967</phone>
<facsimile>+1 201 993 3032</facsimile>
<email>nsb@nsb.fv.com</email></address></author>
<date month='November' year='1996'></date>
</front>
<seriesInfo name='RFC' value='2046' />
</reference>

<reference anchor='RFC2978'>
<front>
<title>IANA Charset Registration Procedures</title>
<author initials='N.' surname='Freed' fullname='N. Freed'>
<organization /></author>
<author initials='J.' surname='Postel' fullname='J. Postel'>
<organization /></author>
<date month='October' year='2000' />
</front>
<seriesInfo name='BCP' value='19' />
<seriesInfo name='RFC' value='2978' />
<format type='TXT' octets='21615' target='http://www.ietf.org/rfc/rfc2978.txt' />
</reference>

<reference anchor='RFC1535'>
<front>
<title abbrev='DNS Software Enhancements'>A Security Problem and Proposed Correction With Widely Deployed DNS Software</title>
<author initials='E.' surname='Gavron' fullname='Ehud Gavron'>
<organization>ACES Research Inc.</organization>
<address>
<postal>
<street>PO Box 14546</street>
<city>Tucson</city>
<region>AZ</region>
<code>85711</code>
<country>US</country></postal>
<phone>+1 602 743 9841</phone>
<email>gavron@aces.com</email></address></author>
<date month='October' year='1993' />
</front>
<seriesInfo name='RFC' value='1535' />
<format type='TXT' octets='9722' target='http://www.ietf.org/rfc/rfc1535.txt' />
</reference>

<reference anchor="RFC2518">
<front>
<title>HTTP Extensions for Distributed Authoring -- WEBDAV</title>
<author initials="Y." surname="Goland" fullname="Y. Goland">
  <organization>Microsoft Corporation</organization>
  <address><email>yarong@microsoft.com</email></address>
</author>
<author initials="E." surname="Whitehead" fullname="E. J. Whitehead, Jr.">
  <organization abbrev="UC Irvine">Dept. Of Information and Computer
Science, University of California, Irvine</organization>
  <address><email>ejw@ics.uci.edu</email></address>
</author>
<author initials="A." surname="Faizi" fullname="A. Faizi">
  <organization abbrev="Netscape">Netscape</organization>
  <address><email>asad@netscape.com</email></address>
</author>
<author initials="S.R." surname="Carter" fullname="S. R. Carter">
  <organization abbrev="Novell">Novell</organization>
  <address><email>srcarter@novell.com</email></address>
</author>
<author initials="D." surname="Jensen" fullname="D. Jensen">
  <organization abbrev="Novell">Novell</organization>
  <address><email>dcjensen@novell.com</email></address>
</author>
<date month="February" year="1999"/>
</front>
<seriesInfo name="RFC" value="2518"/>
</reference>

<reference anchor='RFC0952'>
<front>
<title>DoD Internet host table specification</title>
<author initials='K.' surname='Harrenstien' fullname='K. Harrenstien'>
<organization>SRI International</organization></author>
<author initials='M.' surname='Stahl' fullname='M. Stahl'>
<organization>SRI International</organization></author>
<author initials='E.' surname='Feinler' fullname='E. Feinler'>
<organization>SRI International</organization></author>
<date month='October' day='1' year='1985' /></front>
<seriesInfo name='RFC' value='952' />
<format type='TXT' octets='12388' target='http://www.ietf.org/rfc/rfc952.txt' />
</reference>

<reference anchor='RFC3513'>
<front>
<title abbrev='IPv6 Addressing'>Internet Protocol Version 6 (IPv6) Addressing Architecture</title>
<author initials='R.' surname='Hinden' fullname='Robert M. Hinden'>
<organization>Nokia</organization>
<address>
<postal>
<street>313 Fairchild Drive</street>
<street>Mountainview</street>
<street>CA 94043</street>
<country>USA</country></postal>
<phone>+1 650-625-2004</phone>
<email>hinden@iprg.nokia.com</email></address></author>
<author initials='S.' surname='Deering' fullname='Stephen E. Deering'>
<organization>Cisco Systems, Inc.</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<street>San Jose</street>
<street>CA 95134-1706</street>
<country>USA</country></postal>
<phone>+1 408 527-8213</phone>
<email>deering@cisco.com</email></address></author>
<date month='April' year='2003' />
<area>Internet</area>
<keyword>internet protocol version 6</keyword>
<keyword>IPv6</keyword>
<keyword>addressing</keyword>
</front>
<seriesInfo name='RFC' value='3513' />
<format type='TXT' octets='53920' target='http://www.ietf.org/rfc/rfc3513.txt' />
</reference>

<reference anchor='RFC2732'>
<front>
<title abbrev='IPv6 Literal Addresses in URL&apos;s'>Format for Literal IPv6 Addresses in URL's</title>
<author initials='R.M.' surname='Hinden' fullname='Robert M. Hinden'>
<organization>Nokia</organization>
<address>
<postal>
<street>313 Fairchild Drive</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<phone>+1 650 625 2004</phone>
<email>hinden@iprg.nokia.com</email></address></author>
<author initials='B.E.' surname='Carpenter' fullname='Brian E. Carpenter'>
<organization>IBM, iCAIR</organization>
<address>
<postal>
<street>1890 Maple Avenue</street>
<street>Suite 150</street>
<city>Evanston</city>
<region>IL</region>
<code>60201</code>
<country>US</country></postal>
<email>brian@icair.org</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>AT&amp;T Labs</organization>
<address>
<postal>
<street>75 Willow Road</street>
<city>Menlo Park</city>
<region>CA</region>
<code>94025</code>
<country>US</country></postal>
<email>LMM@acm.org</email></address></author>
<date month='December' year='1999' />
</front>
<seriesInfo name='RFC' value='2732' />
<format type='TXT' octets='7984' target='http://www.ietf.org/rfc/rfc2732.txt' />
</reference>

<reference anchor='RFC1736'>
<front>
<title abbrev='Recommendations for IRLs'>Functional Recommendations for Internet Resource Locators</title>
<author initials='J.' surname='Kunze' fullname='John A. Kunze'>
<organization>Information Systems and Technology</organization>
<address>
<postal>
<street>293 Evans Hall</street>
<city>Berkeley</city>
<region>CA</region>
<code>94720</code>
<country>US</country></postal>
<phone>+1 510 642 1530</phone>
<facsimile>+1 510 643 5385</facsimile>
<email>jak@violet.berkeley.edu</email></address></author>
<date month='February' year='1995'></date></front>
<seriesInfo name='RFC' value='1736' />
</reference>

<reference anchor='RFC2718'>
<front>
<title>Guidelines for new URL Schemes</title>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Xerox Corporation, Palo Alto Research Center</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94304</code>
<country>US</country></postal>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='H.' surname='Alvestrand' fullname='Harald Tveit Alvestrand'>
<organization>Maxware</organization>
<address>
<postal>
<street>N-7005 Trondheim</street>
<city>Pirsenteret</city>
<region />
<code />
<country>NO</country></postal>
<phone>+47 73 545700</phone>
<email>harald.alvestrand@maxware.no</email></address></author>
<author initials='D.' surname='Zigmond' fullname='Dan Zigmond'>
<organization>WebTV Networks, Inc.</organization>
<address>
<postal>
<street>305 Lytton Avenue</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94301</code>
<country>US</country></postal>
<phone>+1 650 614 6071</phone>
<email>djz@corp.webtv.net</email></address></author>
<author initials='R.' surname='Petke' fullname='Rich Petke'>
<organization>UUNET Technologies</organization>
<address>
<postal>
<street>5000 Britton Road</street>
<street>P. O. Box 5000</street>
<city>Hilliard</city>
<region>OH</region>
<code>43026-5000</code>
<country>US</country></postal>
<phone>+1 614 723 4157</phone>
<facsimile>+1 614 723 8407</facsimile>
<email>rpetke@wcom.net</email></address></author>
<date month='November' year='1999' />
</front>
<seriesInfo name='RFC' value='2718' />
<format type='TXT' octets='19208' target='http://www.ietf.org/rfc/rfc2718.txt' />
</reference>

<reference anchor='RFC1737'>
<front>
<title abbrev='Requirements for Uniform Resource Names'>Functional Requirements for Uniform Resource Names</title>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Xerox Palo Alto Research Center</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94304</code>
<country>US</country></postal>
<phone>+1 415 812 4365</phone>
<facsimile>+1 415 812 4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='K.' surname='Sollins' fullname='Karen Sollins'>
<organization>MIT Laboratory for Computer Science</organization>
<address>
<postal>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>US</country></postal>
<phone>+1 617 253 2673</phone>
<email>sollins@lcs.mit.edu</email></address></author>
<date month='December' year='1994'></date></front>
<seriesInfo name='RFC' value='1737' />
</reference>

<reference anchor='RFC3305'>
<front>
<title>Report from the Joint W3C/IETF URI Planning Interest Group: Uniform Resource Identifiers (URIs), URLs, and Uniform Resource Names (URNs): Clarifications and Recommendations</title>
<author initials='M.' surname='Mealling' fullname='M. Mealling'>
<organization /></author>
<author initials='R.' surname='Denenberg' fullname='R. Denenberg'>
<organization /></author>
<date month='August' year='2002' /></front>
<seriesInfo name='RFC' value='3305' />
<format type='TXT' octets='21793' target='http://www.ietf.org/rfc/rfc3305.txt' />
</reference>

<reference anchor='RFC2141'>
<front>
<title>URN Syntax</title>
<author initials='R.' surname='Moats' fullname='Ryan Moats'>
<organization>AT&amp;T</organization>
<address>
<postal>
<street>15621 Drexel Circle</street>
<street>Omaha</street>
<street>NE 68135-2358</street>
<country>USA</country></postal>
<phone>+1 402 894-9456</phone>
<email>jayhawk@ds.internic.net</email></address></author>
<date month='May' year='1997' />
<area>Applications</area>
<keyword>URN</keyword>
<keyword>uniform resource</keyword>
<abstract>
<t>
   Uniform Resource Names (URNs) are intended to serve as persistent,
   location-independent, resource identifiers. This document sets
   forward the canonical syntax for URNs.  A discussion of both existing
   legacy and new namespaces and requirements for URN presentation and
   transmission are presented.  Finally, there is a discussion of URN
   equivalence and how to determine it.
</t></abstract>
</front>
<seriesInfo name='RFC' value='2141' />
<format type='TXT' octets='14077' target='http://www.ietf.org/rfc/rfc2141.txt' />
<format type='HTML' octets='32020' target='http://xml.resource.org/public/rfc/html/rfc2141.html' />
<format type='XML' octets='17551' target='http://xml.resource.org/public/rfc/xml/rfc2141.xml' />
</reference>

<reference anchor='RFC1034'>
<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date month='November' year='1987'></date></front>
<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
</reference>

<reference anchor='RFC2110'>
<front>
<title abbrev='MHTML'>MIME E-mail Encapsulation of Aggregate Documents, such as HTML (MHTML)</title>
<author initials='J.' surname='Palme' fullname='Jacob Palme'>
<organization>Stockholm University and KTH</organization>
<address>
<postal>
<street>Electrum 230</street>
<street>S-164 40 Kista</street>
<country>Sweden</country></postal>
<phone>+46-8-16 16 67</phone>
<facsimile>+46-8-783 08 29</facsimile>
<email>jpalme@dsv.su.se</email></address></author>
<author initials='A.' surname='Hopmann' fullname='Alex Hopmann'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>3590 North First Street</street>
<street>Suite 300</street>
<street>San Jose</street>
<street>CA 95134</street>
<street>Working group chairman:</street></postal>
<email>alexhop@microsoft.com</email></address></author>
<date month='March' year='1997'></date>
<area>Applications</area>
<keyword>encapsulate</keyword>
<keyword>hypertext markup language</keyword>
<keyword>mail</keyword>
<keyword>multipurpose internet mail extensions</keyword>
</front>
<seriesInfo name='RFC' value='2110' />
</reference>

<reference anchor='RFC2717'>
<front>
<title>Registration Procedures for URL Scheme Names</title>
<author initials='R.' surname='Petke' fullname='Rich Petke'>
<organization>UUNET Technologies</organization>
<address>
<postal>
<street>5000 Britton Road</street>
<street>P. O. Box 5000</street>
<city>Hilliard</city>
<region>OH</region>
<code>43026-5000</code>
<country>US</country></postal>
<phone>+1 614 723 4157</phone>
<facsimile>+1 614 723 8407</facsimile>
<email>rpetke@wcom.net</email></address></author>
<author initials='I.' surname='King' fullname='Ian King'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052-6399</code>
<country>US</country></postal>
<phone>+1 425 703 2293</phone>
<facsimile>+1 425 936 7329</facsimile>
<email>iking@microsoft.com</email></address></author>
<date month='November' year='1999' />
</front>
<seriesInfo name='BCP' value='35' />
<seriesInfo name='RFC' value='2717' />
</reference>

<reference anchor='Siedzik'
   target='http://www.giac.org/practical/gsec/Richard_Siedzik_GSEC.pdf'>
<front>
<title>Semantic Attacks: What's in a URL?</title>
<author initials='R.' surname='Siedzik' fullname='Richard Siedzik'>
<organization>SANS Institute</organization>
</author>
<date day='6' month='April' year='2001'></date>
</front>
<format type='PDF' target='http://www.giac.org/practical/gsec/Richard_Siedzik_GSEC.pdf' />
</reference>

<reference anchor='RFC2279'>
<front>
<title abbrev='UTF-8'>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='Francois Yergeau'>
<organization>Alis Technologies</organization>
<address>
<postal>
<street>100, boul. Alexis-Nihon</street>
<street>Suite 600</street>
<city>Montreal</city>
<region>Quebec</region>
<code>H4M 2P2</code>
<country>CA</country></postal>
<phone>+1 514 747 2547</phone>
<facsimile>+1 514 747 2561</facsimile>
<email>fyergeau@alis.com</email></address></author>
<date month='January' year='1998'></date>
</front>
<seriesInfo name='RFC' value='2279' />
</reference>
  
</references>

<section title="Collected ABNF for URI" anchor="collected-abnf">
<figure><artwork>
 URI = scheme ":" ["//" authority] path ["?" query] ["#" fragment]

 URI-reference = URI / relative-URI

 relative-URI  = ["//" authority] path ["?" query] ["#" fragment]

 absolute-URI  = scheme ":" ["//" authority] path ["?" query]

 scheme        = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )

 authority     = [ userinfo "@" ] host [ ":" port ]
 userinfo      = *( unreserved / pct-encoded / sub-delims )
 host          = IP-literal / IPv4address / reg-name
 port          = *DIGIT

 IP-literal    = "[" ( IPv6address | vflag "." 1*pchar ) "]"

 vflag         = "v" HEXDIG

 IPv6address   =                          6( h4 ":" ) ls32
               /                     "::" 5( h4 ":" ) ls32
               / [              h4 ] "::" 4( h4 ":" ) ls32
               / [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32
               / [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32
               / [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32
               / [ *4( h4 ":" ) h4 ] "::"             ls32
               / [ *5( h4 ":" ) h4 ] "::"             h4
               / [ *6( h4 ":" ) h4 ] "::"

 h4            = 1*4HEXDIG
 ls32          = ( h4 ":" h4 ) / IPv4address

 IPv4address   = dec-octet "." dec-octet "." dec-octet "." dec-octet

 dec-octet     = DIGIT                 ; 0-9
               / %x31-39 DIGIT         ; 10-99
               / "1" 2DIGIT            ; 100-199
               / "2" %x30-34 DIGIT     ; 200-249
               / "25" %x30-35          ; 250-255

 reg-name      = 0*255( unreserved / pct-encoded / sub-delims )

 path          = segment *( "/" segment )
 segment       = *pchar

 query         = *( pchar / "/" / "?" )

 fragment      = *( pchar / "/" / "?" )

 pct-encoded   = "%" HEXDIG HEXDIG

 pchar         = unreserved / pct-encoded / sub-delims / ":" / "@"

 unreserved    = ALPHA / DIGIT / "-" / "." / "_" / "~"
 reserved      = gen-delims / sub-delims
 gen-delims    = ":" / "/" / "?" / "#" / "[" / "]" / "@"
 sub-delims    = "!" / "$" / "&amp;" / "'" / "(" / ")"
               / "*" / "+" / "," / ";" / "="
</artwork></figure>
</section>

<section title="Parsing a URI Reference with a Regular Expression" anchor="regexp">
<t>
Since the "first-match-wins" algorithm is identical to the "greedy"
disambiguation method used by POSIX regular expressions, it is
natural and commonplace to use a regular expression for parsing the
potential five components of a URI reference.
</t>
<t>
The following line is the regular expression for breaking-down a
well-formed URI reference into its components.
</t>
<figure><artwork>
   ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
    12            3  4          5       6  7        8 9
</artwork></figure>
<t>
The numbers in the second line above are only to assist readability;
they indicate the reference points for each subexpression (i.e., each
paired parenthesis).  We refer to the value matched for subexpression
&lt;n&gt; as $&lt;n&gt;.  For example, matching the above expression to
</t>
<figure><artwork>
   http://www.ics.uci.edu/pub/ietf/uri/#Related
</artwork></figure>
<t>
results in the following subexpression matches:
</t>
<figure><artwork>
   $1 = http:
   $2 = http
   $3 = //www.ics.uci.edu
   $4 = www.ics.uci.edu
   $5 = /pub/ietf/uri/
   $6 = &lt;undefined&gt;
   $7 = &lt;undefined&gt;
   $8 = #Related
   $9 = Related
</artwork></figure>
<t>
where &lt;undefined&gt; indicates that the component is not present, as is
the case for the query component in the above example.  Therefore, we
can determine the value of the four components and fragment as
</t>
<figure><artwork>
   scheme    = $2
   authority = $4
   path      = $5
   query     = $7
   fragment  = $9
</artwork></figure>
<t>
and, going in the opposite direction, we can recreate a URI reference
from its components using the algorithm of <xref target="recomposition"/>.
</t>
</section>

<section title="Delimiting a URI in Context" anchor="delimiting">
<t>
URIs are often transmitted through formats that do not provide a clear
context for their interpretation.  For example, there are many
occasions when a URI is included in plain text; examples include text
sent in electronic mail, USENET news messages, and, most importantly,
printed on paper.  In such cases, it is important to be able to
delimit the URI from the rest of the text, and in particular from
punctuation marks that might be mistaken for part of the URI.
</t>
<t>
In practice, URIs are delimited in a variety of ways, but usually
within double-quotes "http://example.com/", angle brackets
&lt;http://example.com/&gt;, or just using whitespace
</t>
<figure><artwork>
   http://example.com/
</artwork></figure>
<t>
These wrappers do not form part of the URI.
</t>
<t>
In some cases, extra whitespace (spaces, line-breaks, tabs, etc.) may
need to be added to break a long URI across lines. The whitespace
should be ignored when extracting the URI.
</t>
<t>
No whitespace should be introduced after a hyphen ("-") character.
Because some typesetters and printers may (erroneously) introduce a
hyphen at the end of line when breaking a line, the interpreter of a
URI containing a line break immediately after a hyphen should ignore
all whitespace around the line break, and should be aware
that the hyphen may or may not actually be part of the URI.
</t>
<t>
Using &lt;&gt; angle brackets around each URI is especially recommended as
a delimiting style for a reference that contains embedded whitespace.
</t>
<t>
The prefix "URL:" (with or without a trailing space) was formerly
recommended as a way to help distinguish a URI from other bracketed
designators, though it is not commonly used in practice and is
no longer recommended.
</t>
<t>
For robustness, software that accepts user-typed URI should attempt
to recognize and strip both delimiters and embedded whitespace.
</t>
<figure><preamble>
For example, the text:
</preamble><artwork>
   Yes, Jim, I found it under "http://www.w3.org/Addressing/",
   but you can probably pick it up from &lt;ftp://foo.example.
   com/rfc/&gt;.  Note the warning in &lt;http://www.ics.uci.edu/pub/
   ietf/uri/historical.html#WARNING&gt;.
</artwork></figure>
<t>
contains the URI references
</t>
<figure><artwork>
   http://www.w3.org/Addressing/
   ftp://foo.example.com/rfc/
   http://www.ics.uci.edu/pub/ietf/uri/historical.html#WARNING
</artwork></figure>
</section>


<section title="Summary of Non-editorial Changes" anchor="changes">

<section title="Additions" anchor="additions">
<t>
IPv6 (and later) literals have been added to the list of possible identifiers
for the host portion of a authority component, as described by
<xref target="RFC2732"/>, with the addition of "[" and "]" to
the reserved set and a version flag to anticipate future versions of
IP literals.  Square brackets are now specified as reserved within the
authority component and not allowed outside their use as delimiters for
an IP literal within host.  In order to make this change without changing
the technical definition of the path, query, and fragment components,
those rules were redefined to directly specify the characters allowed
rather than be defined in terms of uric.
</t>
<t>
Since <xref target="RFC2732"/> defers to <xref target="RFC3513"/>
for definition of an IPv6 literal address, which unfortunately lacks
an ABNF description of IPv6address, we created a new ABNF rule
for IPv6address that matches the text representations defined by
Section 2.2 of <xref target="RFC3513"/>.  Likewise, the definition
of IPv4address has been improved in order to limit each decimal
octet to the range 0-255.
</t>
<t>
<xref target="comparison">Section 6</xref> on URI normalization and comparison
has been completely rewritten and extended using input from Tim Bray
and discussion within the W3C Technical Architecture Group.
</t>
<t>
An ABNF production for URI has been introduced to correspond to the
common usage of the term: an absolute URI with optional fragment.
</t>
</section>

<section title="Modifications from RFC 2396" anchor="modifications">
<t>
The ad-hoc BNF syntax has been replaced with the ABNF of
<xref target="RFC2234"/>.  This change required all rule names that
formerly included underscore characters to be renamed with a dash instead.
</t>
<t>
Section 2 on characters has been rewritten to explain what characters
are reserved, when they are reserved, and why they are reserved even
when not used as delimiters by the generic syntax.
The mark characters that are typically unsafe to decode, including
the exclamation mark ("!"), asterisk ("*"), single-quote ("'"), and
open and close parentheses ("(" and ")"), have been moved to the reserved
set in order to clarify the distinction between reserved and unreserved
and hopefully answer the most common question of scheme designers.
Likewise, the section on percent-encoded characters has been rewritten, and
URI normalizers are now given license to decode any percent-encoded octets
corresponding to unreserved characters.  In general, the terms "escaped"
and "unescaped" have been replaced with "percent-encoded" and "decoded",
respectively, to reduce confusion with other forms of escape mechanisms.
</t>
<t>
The ABNF for URI and URI-reference has been redesigned to make them
more friendly to LALR parsers and significantly reduce complexity.
As a result, the layout form of syntax description has been removed,
along with the uric, uric_no_slash, hier_part, opaque_part, net_path,
abs_path, rel_path, path_segments, rel_segment, and mark productions.
All references to "opaque" URIs have been replaced with a better
description of how the path component may be opaque to hierarchy.
The ambiguity regarding the parsing of URI-reference as a URI or a
relative-URI with a colon in the first segment is now explained
and disambiguated in the section defining relative-URI.
</t>
<t>
The fragment identifier has been moved back into the section on
generic syntax components and within the URI and relative-URI
productions, though it remains excluded from absolute-URI.
The number sign ("#") character has been moved back to the reserved set
as a result of reintegrating the fragment syntax.
</t>
<t>
The ABNF has been corrected to allow a relative URI path to be empty.
This also allows an absolute-URI to consist of nothing after the "scheme:",
as is present in practice with the "dav:" namespace <xref target="RFC2518"/>
and the "about:" scheme used internally by many WWW browser implementations.
The ambiguity regarding the boundary between authority and path
is now explained and disambiguated in the same section.
</t>
<t>
Registry-based naming authorities that use the generic syntax are now
defined within the host production and limited to 255 path characters.
This change allows current implementations, where whatever name provided
is simply fed to the local name resolution mechanism, to be consistent
with the specification and removes the need to re-specify DNS name
formats here.  It also allows the host component to contain percent-encoded
octets, which is necessary to enable internationalized domain names to be
provided in URIs, processed in their native character encodings at the
application layers above URI processing, and passed to an IDNA library
as a registered name in the UTF-8 character encoding.
The server, hostport, hostname, domainlabel, toplabel, and alphanum
productions have been removed.
</t>
<t>
The resolving relative references algorithm of <xref target="RFC2396"/>
has been rewritten using pseudocode for this revision to improve clarity
and fix the following issues:
<list style="symbols">
<t>
<xref target="RFC2396"/> section 5.2, step 6a, failed to account for
a base URI with no path.
</t>
<t>
Restored the behavior of <xref target="RFC1808"/> where, if the
reference contains an empty path and a defined query component,
then the target URI inherits the base URI's path component.
</t>
<t>
Removed the special-case treatment of same-document references
within the URI parser in favor of a section that explains when a
reference should be interpreted by a dereferencing engine as a
same-document reference: when the resolved target URI and base URI,
excluding fragments, match.  This change does not modify the behavior
of existing same-document references as defined by RFC 2396
(fragment-only references); it merely adds the same-document distinction
to other references that refer to the base URI and simplifies the
interface between applications and their URI parsers, as is consistent with
the internal architecture of deployed URI processing implementations.
</t>
<t>
Separated the path merge routine into two routines: merge, for
describing combination of the base URI path with a relative-path
reference, and remove_dot_segments, for describing how to remove
the special "." and ".." segments from a composed path.  The
remove_dot_segments algorithm is now applied to all URI reference
paths in order to match common implementations and improve the
normalization of URIs in practice.  This change only impacts the
parsing of abnormal references and same-scheme references wherein
the base URI has a non-hierarchical path.
</t>
</list>
</t>
</section>
</section>
</back>
</rfc>
