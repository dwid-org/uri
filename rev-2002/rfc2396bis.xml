<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="no"?>
<?rfc toc="yes"?>
<?rfc linkmailto="no"?>
<?rfc editing="no"?>
<?rfc-ext parse-xml-in-artwork="yes" ?>
<rfc obsoletes="2732, 2396, 1808" updates="1738" category="std"
     ipr="full2026" docName="draft-fielding-uri-rfc2396bis-0x">

<front>
  <title abbrev='URI Generic Syntax'>Uniform Resource Identifier (URI): Generic Syntax</title>

  <author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
    <organization abbrev="MIT/LCS">World Wide Web Consortium</organization>
    <address>
      <postal>
        <street>MIT/LCS, Room NE43-356</street>
        <street>200 Technology Square</street>
        <city>Cambridge</city>
        <region>MA</region>
        <code>02139</code>
        <country>USA</country>
      </postal>
      <phone>+1-617-253-5702</phone>
      <facsimile>+1-617-258-5999</facsimile>
      <email>timbl@w3.org</email>
      <uri>http://www.w3.org/People/Berners-Lee/</uri>
    </address>
  </author>
  <author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
    <organization abbrev="Day Software">Day Software</organization>
    <address>
      <postal>
        <street>2 Corporate Plaza, Suite 150</street>
        <city>Newport Beach</city>
        <region>CA</region>
        <code>92660</code>
        <country>USA</country>
      </postal>
      <phone>+1-949-999-2523</phone>
      <facsimile>+1-949-644-5064</facsimile>
      <email>roy.fielding@day.com</email>
      <uri>http://www.apache.org/~fielding/</uri>
    </address>
  </author>
  <author initials='L.' surname='Masinter' fullname='Larry Masinter'>
    <organization abbrev="Adobe">Adobe Systems Incorporated</organization>
    <address>
      <postal>
        <street>345 Park Ave</street>
        <city>San Jose</city>
        <region>CA</region>
        <code>95110</code>
        <country>USA</country>
      </postal>
      <phone>+1-408-536-3024</phone>
      <email>LMM@acm.org</email>
      <uri>http://larry.masinter.net/</uri>
    </address>
  </author>

  <date month='May' year='2003'></date>

  <area>Applications</area>
  <keyword>uniform resource identifier</keyword>
  <keyword>URI</keyword>
  <keyword>URL</keyword>
  <keyword>URN</keyword>
  <keyword>WWW</keyword>
  <keyword>resource</keyword>

  <abstract>
<t>
A Uniform Resource Identifier (URI) is a compact string of characters
for identifying an abstract or physical resource.  This document
defines the generic syntax of a URI, including both absolute and
relative forms, and guidelines for their use.
</t>
<t>
This document defines a grammar that is a superset of all valid URIs,
such that an implementation can parse the common components of a URI
reference without knowing the scheme-specific requirements of every
possible identifier type.  This document does not define a generative
grammar for all URIs; that task will be performed by the individual
specifications of each URI scheme.
</t></abstract>
<note title='Editorial Note'>
<t>
Discussion of this draft and comments to the editors should be sent
to the uri@w3.org mailing list.  An issues list and version history
is available at
<eref target="http://www.apache.org/~fielding/uri/rev-2002/issues.html">&lt;http://www.apache.org/~fielding/uri/rev-2002/issues.html&gt;</eref>.
</t></note>
</front>
<middle>
<section title="Introduction" anchor="intro">
<t>
A Uniform Resource Identifier (URI) provides a simple and extensible
means for identifying a resource.  This specification of URI syntax
and semantics is derived from concepts introduced by the World Wide
Web global information initiative, whose use of such identifiers dates
from 1990 and is described in "Universal Resource Identifiers in WWW"
<xref target="RFC1630"/>, and is designed to meet the
recommendations laid out in "Functional Recommendations for Internet
Resource Locators" <xref target="RFC1736"/> and "Functional Requirements
for Uniform Resource Names" <xref target="RFC1737"/>.
</t>
<t>
This document obsoletes <xref target="RFC2396"/>, which merged
"Uniform Resource Locators" <xref target="RFC1738"/> and
"Relative Uniform Resource Locators" <xref target="RFC1808"/> in order
to define a single, generic syntax for all URIs.  It excludes those
portions of RFC 1738 that defined the specific syntax of individual
URI schemes; those portions will be updated as separate documents.
The process for registration of new URI schemes is defined separately
by <xref target="RFC2717"/>.
</t>
<t>
All significant changes from RFC 2396 are noted in Appendix G.
</t>

<section title="Overview of URIs" anchor="overview">
<t>
URIs are characterized as follows:
</t>
<iref item="uniform" primary="true"/>
<t>Uniform
  <list>
    <t>
Uniformity provides several benefits: it allows different types
of resource identifiers to be used in the same context, even
when the mechanisms used to access those resources may differ;
it allows uniform semantic interpretation of common syntactic
conventions across different types of resource identifiers; it
allows introduction of new types of resource identifiers
without interfering with the way that existing identifiers are
used; and, it allows the identifiers to be reused in many
different contexts, thus permitting new applications or
protocols to leverage a pre-existing, large, and widely-used
set of resource identifiers.
    </t>
  </list>
</t>
<iref item="resource" primary="true"/>
<t>Resource
  <list>
    <t>
Anything that can be named or described can be a resource.
Familiar examples include an electronic document, an image,
a service (e.g., "today's weather report for Los Angeles"),
and a collection of other resources.
A resource is not necessarily accessible via the Internet;
e.g., human beings, corporations, and bound books in a library
can also be resources.
Likewise, abstract concepts can be resources, such as the operators and
operands of a mathematical equation or the types of a relationship
(e.g., "parent" or "employee").
    </t>
  </list>
</t>
<iref item="identifier" primary="true"/>        
<t>Identifier
  <list>
    <t>
An identifier embodies the information required to distinguish what is
being identified from all other things within its scope of identification.
    </t>
  </list>
</t>
<t>
A URI is an identifier that consists of a sequence of characters
matching the restricted syntax defined by this specification.  A URI
can be used to refer to a resource.  This specification does not place any
limits on the nature of a resource or the reasons why an application
might wish to refer to a resource.  URIs have a global scope
and should be interpreted consistently regardless of context, but
that interpretation may be defined in relation to the user's context
(e.g., "http://localhost/" refers to a resource that is relative to
the user's network interface and yet not specific to any one user).
</t>

<section title="Generic Syntax" anchor="generic-syntax">
<iref item="generic syntax" primary="true"/>        
<t>
Each URI begins with a scheme name, as defined in
<xref target="scheme">Section 3.1</xref>, that refers to a specification
for assigning identifiers within that scheme.  As such, the URI syntax
is a federated and extensible naming system wherein each scheme's
specification may further restrict the syntax and semantics of identifiers
using that scheme.
</t>
<t>
This specification defines those elements of the URI syntax that are
required of all URI schemes or are common to many URI schemes.  It thus
defines the syntax and semantics that are needed to implement a
scheme-independent parsing mechanism for URI references, such that the
scheme-dependent handling of a URI can be postponed until the
scheme-dependent semantics are needed.  Likewise, protocols and data
formats that make use of URI references can refer to this specification
as defining the range of syntax allowed for all URIs, including those
schemes that have yet to be defined.
</t>
<t>
A parser of the generic URI syntax is capable of parsing any URI
reference into its major components; once the scheme is determined,
further scheme-specific parsing can be performed on the components.
In other words, the URI generic syntax is a superset of the syntax
of all URI schemes.
</t>
</section>

<section title="Examples" anchor="examples">
<figure><preamble>
The following examples illustrate URIs that are in common use.
</preamble><artwork>
   ftp://ftp.is.co.za/rfc/rfc1808.txt
      -- ftp scheme for File Transfer Protocol services

   gopher://gopher.tc.umn.edu:70/11/Mailing%20Lists/
      -- gopher scheme for Gopher and Gopher+ Protocol services

   http://www.ietf.org/rfc/rfc2396.txt
      -- http scheme for Hypertext Transfer Protocol services

   mailto:John.Doe@example.com
      -- mailto scheme for electronic mail addresses

   news:comp.infosystems.www.servers.unix
      -- news scheme for USENET news groups and articles

   telnet://melvyl.ucop.edu/
      -- telnet scheme for interactive TELNET services
</artwork></figure>
</section>

<section title="URI, URL, and URN" anchor="URLvsURN">
<iref item="URL" primary="true"/>        
<iref item="URN" primary="true"/>        
<iref item="locator" primary="true"/>        
<iref item="name" primary="true"/>        
<t>
A URI can be further classified as a locator, a name, or both.  The
term "Uniform Resource Locator" (URL) refers to the subset of URIs
that, in addition to identifying the resource, provide a means of
locating the resource by describing its primary access mechanism
(e.g., its network "location").  The term "Uniform Resource Name" (URN)
refers to the subset of URIs that are required to remain globally unique and
persistent even when the resource ceases to exist or becomes unavailable.
</t>
<t>
An individual scheme does not need to be classified as being just one of
"name" or "locator".  Instances of URIs from any given scheme may have
the characteristics of names or locators or both, often depending on the
persistence and care in the assignment of identifiers by the naming
authority, rather than any quality of the scheme.  This specification
deprecates use of the term "URN" for anything but URIs in the "urn" scheme
<xref target="RFC2141"/>.  This specification also deprecates the term "URL".
</t>
</section>

</section>
<section title="Design Considerations" anchor="design">

<section title="Transcribability" anchor="transcribability">        
<iref item="transcribability" primary="true"/>        
<t>
The URI syntax has been designed with global transcribability as one of
its main considerations.  A URI is a sequence of characters from a very
limited set: the letters of the basic Latin alphabet, digits,
and a few special characters.  A URI may be represented in a variety
of ways: e.g., ink on paper, pixels on a screen, or a sequence of
octets in a coded character set.  The interpretation of a URI depends
only on the characters used and not how those characters are
represented in a network protocol.
</t>
<t>
The goal of transcribability can be described by a simple scenario.
Imagine two colleagues, Sam and Kim, sitting in a pub at an
international conference and exchanging research ideas.  Sam asks Kim
for a location to get more information, so Kim writes the URI for the
research site on a napkin.  Upon returning home, Sam takes out the
napkin and types the URI into a computer, which then retrieves the
information to which Kim referred.
</t>
<t>
There are several design considerations revealed by the scenario:
  <list style="symbols">
    <t>
A URI is a sequence of characters that is not always
represented as a sequence of octets.
    </t>
    <t>
A URI might be transcribed from a non-network source, and thus
should consist of characters that are most likely to be able to
be entered into a computer, within the constraints imposed by
keyboards (and related input devices) across languages and locales.
    </t>
    <t>
A URI often needs to be remembered by people, and it is easier
for people to remember a URI when it consists of meaningful or
familiar components.
    </t>
  </list>
</t>
<t>
These design considerations are not always in alignment.  For example, it
is often the case that the most meaningful name for a URI component
would require characters that cannot be typed into some systems.  The
ability to transcribe a resource identifier from one medium to
another has been considered more important than having a URI consist of
the most meaningful of components.  In local or regional contexts
and with improving technology, users might benefit from being able to
use a wider range of characters; such use is not defined in this
document.
</t>
</section>

<section title="Separating Identification from Interaction"
         anchor="identification">
<iref item="access" primary="true"/>        
<t>
A common misunderstanding of URIs is that they are only used to
refer to accessible resources.  In fact, the URI alone only provides
identification; access to the resource is neither guaranteed nor
implied by the presence of a URI.  Instead, an operation (if any)
associated with a URI reference is defined by the protocol element,
data format attribute, or natural language text in which it appears.
</t>
<iref item="resolution" primary="true"/>        
<iref item="dereference" primary="true"/>        
<t>
Given a URI, a system may attempt to perform a variety of operations
on the resource, as might be characterized by such words as "denote",
"access", "update", "replace", or "find attributes".  Such operations
are defined by the protocols that make use of URIs, not by this
specification.  However, we do use a few general terms for describing
common operations on URIs.  URI "resolution" is the process of determining
an access mechanism and the appropriate parameters necessary to dereference
a URI; such resolution may require several iterations.  Using that access
mechanism to perform some action on the URI's resource is termed a
"dereference" of the URI.
</t>
<iref item="retrieval" primary="true"/>        
<iref item="representation" primary="true"/>        
<t>
When URIs are used within information systems to identify sources
of information, the most common form of URI dereference is "retrieval":
making use of a URI in order to retrieve a representation of its associated
resource.  A "representation" is a sequence of octets, along with metadata
describing those octets, that constitutes a record of the state of the
resource at the time that the representation is generated.  Retrieval is
achieved by a process that might include using the URI as a cache key to
check for a locally cached representation, resolution of the URI to
determine an appropriate access mechanism (if any), and dereference
of the URI for the sake of applying a retrieval operation.
</t>
<iref item="sameness" primary="true"/>        
<t>
URI references in information systems are designed to be late-binding:
the result of an access is generally determined at the time it is accessed
and may vary over time or due to other aspects of the interaction.
When an author creates a reference to such a resource, they do so with
the intention that the reference be used in the future; what is being
identified is not some specific result that was obtained in the past,
but rather some characteristic that is expected to be true for future
results.  In such cases, the resource referred to by the URI is actually
a sameness of characteristics as observed over time, perhaps elucidated
by additional comments or assertions made by the resource provider.
</t>
<t>
Although many URI schemes are named after protocols, this does not
imply that use of such a URI will result in access to the resource
via the named protocol.  URIs are often used simply for the sake of
identification.  Even when a URI is used to retrieve a representation
of a resource, that access might be through gateways, proxies, caches,
and name resolution services that are independent of the protocol
associated with the scheme name, and the resolution of some URIs may
require the use of more than one protocol (e.g., both DNS and HTTP
are typically used to access an "http" URI's origin server when
a representation isn't found in a local cache).
</t>
</section>

<section title="Hierarchical Identifiers" anchor="hierarchical">
<iref item="hierarchical" primary="true"/>        
<t>
The URI syntax is organized hierarchically, with components listed
in decreasing order from left to right.  For some URI schemes, the
visible hierarchy is limited to the scheme itself: everything after
the scheme component delimiter is considered opaque to URI processing.
Other URI schemes make the hierarchy explicit and visible to
generic parsing algorithms.
</t>
<t>
The URI syntax reserves the slash ("/"), question-mark ("?"), and
crosshatch ("#") characters for the purpose of delimiting components
that are significant to the generic parser's hierarchical interpretation
of an identifier.  In addition to aiding the readability of such
identifiers through the consistent use of familiar syntax, this
uniform representation of hierarchy across naming schemes allows
scheme-independent references to be made relative to that hierarchy.
</t>
<iref item="absolute" primary="true"/>        
<iref item="relative" primary="true"/>        
<t>
An "absolute" URI refers to a resource independent of the naming
hierarchy in which the identifier is used.  In contrast, a
"relative" URI refers to a resource by describing the difference within
a hierarchical name space between the current context and an absolute
URI of the resource.  <xref target="relative-URI">Section 5</xref> defines
a scheme-independent form of relative URI reference that can be used
in conjunction with a base URI of a hierarchical scheme to produce
the absolute URI form of that reference.
</t>
</section>

</section>

<section title="Syntax Notation" anchor="notation">
<iref item="ABNF" primary="true"/>        
<t>
This document uses the Augmented Backus-Naur Form (ABNF) notation of
<xref target="RFC2234"/> to define the URI syntax.
Although the ABNF defines syntax in terms of the US-ASCII character
encoding <xref target="ASCII"/>, the URI syntax should be interpreted
in terms of the character that the ASCII-encoded octet represents,
rather than the octet encoding itself.  How a URI is represented
in terms of bits and bytes on the wire is dependent upon
the character encoding of the protocol used to transport it, or the
charset of the document that contains it.
</t>
<iref item="URI grammar" subitem="ALPHA" primary="true"/>
<iref item="URI grammar" subitem="CR" primary="true"/>
<iref item="URI grammar" subitem="CTL" primary="true"/>
<iref item="URI grammar" subitem="DIGIT" primary="true"/>
<iref item="URI grammar" subitem="DQUOTE" primary="true"/>
<iref item="URI grammar" subitem="HEXDIG" primary="true"/>
<iref item="URI grammar" subitem="LF" primary="true"/>
<iref item="URI grammar" subitem="OCTET" primary="true"/>
<iref item="URI grammar" subitem="SP" primary="true"/>
<t>
The following core ABNF productions are used by this specification
as defined by Section 6.1 of <xref target="RFC2234"/>:
ALPHA, CR, CTL, DIGIT, DQUOTE, HEXDIG, LF, OCTET, and SP.
The complete URI syntax is collected in Appendix A.
</t>
</section>

</section>

<section title="URI Characters" anchor="characters">
<iref item="uric" primary="true"/>
<figure><preamble>
A URI consists of a restricted set of characters, primarily chosen to
aid transcribability and usability both in computer systems and in
non-computer communications.  Characters used conventionally as
delimiters around a URI are excluded.  The set of URI characters
consists of digits, letters, and a few graphic symbols
chosen from those common to most of the character encodings and
input facilities available to Internet users.
<iref item="URI grammar" subitem="uric" primary="true"/>
</preamble><artwork type="abnf">
   uric        = reserved / unreserved / escaped
</artwork></figure>
<t>
Within a URI, reserved characters are used to delimit syntax components,
unreserved characters are used to describe registered names, and
unreserved, non-delimiting reserved, and escaped characters are used to
represent strings of data (1*OCTET) within the components.
</t>

<section title="Encoding of Characters" anchor="encoding">
<t>
As described <xref target="notation">above</xref>, the URI syntax
is defined in terms of characters by reference to the
<xref target="ASCII">US-ASCII</xref> encoding of characters to octets.
This specification does not mandate the use of any particular mapping
between its character set and the octets used to store or transmit
those characters.
</t>
<t>
URI characters representing strings of data within a component may, if
allowed by the component production, represent an arbitrary sequence of
octets.  For example, portions of a given URI might correspond to a filename
on a non-ASCII filesystem, a query on non-ASCII data, numeric coordinates
on a map, etc.  Some URI schemes define a specific encoding of raw data
to US-ASCII characters as part of their scheme-specific requirements.
Most URI schemes represent data octets by the US-ASCII character
corresponding to that octet, either directly in the form of the
character's glyph or by use of an escape triplet (<xref target="escaped"/>).
</t>
<t>
When a URI scheme defines a component that represents textual data
consisting of characters from the Unicode (ISO 10646) character
set, we recommend that the data be encoded first as octets according
to the UTF-8 <xref target="UTF-8"/> character encoding, and then
escaping any octets that are not in the unreserved character set.
</t>
</section>

<section title="Reserved Characters" anchor="reserved">
<figure><preamble>
<iref item="reserved" primary="true"/>
URIs include components and sub-components that are delimited by certain
special characters.  These characters are called "reserved", since
their usage within a URI component is limited to their reserved
purpose within that component.  If data for a URI component would
conflict with the reserved purpose, then the conflicting data must be
<xref target="escaped">escaped</xref> before forming the URI.
<iref item="URI grammar" subitem="reserved" primary="true"/>
</preamble><artwork type="abnf">
   reserved    = "/" / "?" / "#" / "[" / "]" / ";" /
                 ":" / "@" / "&amp;" / "=" / "+" / "$" / ","
</artwork></figure>
<t>
Reserved characters are used as delimiters of the generic URI
components described in <xref target="components"/>, as well as within
those components for delimiting sub-components.  A component's ABNF
syntax rule will not use the "reserved" production directly; instead,
each rule lists those reserved characters that are allowed within
that component.  Allowed reserved characters that are not assigned a
sub-component delimiter role by this specification should be considered
reserved for special use by whatever software generates the URI (i.e.,
they may be used to delimit or indicate information that is significant
to interpretation of the identifier, but that significance is outside
the scope of this specification).  Outside of the URI's origin, a
reserved character cannot be escaped without fear of changing how
it will be interpreted; likewise, an escaped octet that corresponds
to a reserved character cannot be unescaped outside the software
that is responsible for interpreting it during URI resolution.
</t>
<t>
The slash ("/"), question-mark ("?"), and crosshatch ("#") characters
are reserved in all URI for the purpose of delimiting components
that are significant to the generic parser's hierarchical interpretation
of an identifier.  The hierarchical prefix of a URI, wherein the
slash ("/") character signifies a hierarchy delimiter, extends from
the <xref target="scheme">scheme</xref> through to the first
question-mark ("?"), crosshatch ("#"), or the end of the URI string.
In other words, the slash ("/") character is not treated as a
hierarchical separator within the query (<xref target="query"/>) and
fragment (<xref target="fragment"/>) components of a URI, but is
still considered reserved within those components for purposes
outside the scope of this specification.
</t>
</section>

<section title="Unreserved Characters" anchor="unreserved">
<figure><preamble>
<iref item="unreserved" primary="true"/>
<iref item="mark" primary="true"/>
Data characters that are allowed in a URI but do not have a reserved
purpose are called unreserved.  These include uppercase and lowercase
letters, decimal digits, and a limited set of punctuation marks and
symbols.
<iref item="URI grammar" subitem="unreserved" primary="true"/>
<iref item="URI grammar" subitem="mark" primary="true"/>
</preamble><artwork type="abnf">
   unreserved  = ALPHA / DIGIT / mark

   mark        = "-" / "_" / "." / "!" / "~" / "*" / "'" / "(" / ")"
</artwork></figure>
<t>
Unreserved characters can be escaped without changing the semantics
of a URI, but this should not be done unless the URI is being used
in a context that does not allow the unescaped character to appear.
URI normalization processes may unescape sequences in the
ranges of ALPHA (%41-%5A and %61-%7A), DIGIT (%30-%39), hyphen (%2D),
underscore (%5F), or tilde (%7E) without fear of creating a conflict,
but unescaping the other mark characters is usually counterproductive.
</t>
</section>

<section title="Escaped Characters" anchor="escaped">
<t>
Data must be escaped if it does not have a representation using an
unreserved character; this includes data that does not correspond to
a printable character of the US-ASCII coded character set or corresponds
to a US-ASCII character that delimits the component from others,
is reserved in that component for delimiting sub-components, or is
excluded from any use within a URI (<xref target="excluded"/>).
</t>

<section title="Escaped Encoding" anchor="percent-encoding">
<figure><preamble>
<iref item="escaped" primary="true"/>
An escaped octet is encoded as a character triplet, consisting of the
percent character "%" followed by the two hexadecimal digits representing
that octet's numeric value.  For example, "%20" is the escaped encoding
for the US-ASCII space character (SP).  This is sometimes referred to as
"percent-encoding" the octet.
<iref item="URI grammar" subitem="escaped" primary="true"/>
</preamble><artwork type="abnf">
   escaped     = "%" HEXDIG HEXDIG
</artwork><postamble>
The uppercase hexadecimal digits 'A' through 'F' are equivalent to the
lowercase digits 'a' through 'f', respectively.  Two URIs that differ
only in the case of hexadecimal digits used in escaped octets are
equivalent.  For consistency, we recommend that uppercase digits be
used by URI generators and normalizers.
</postamble></figure>
</section>

<section title="When to Escape and Unescape" anchor="when-to-escape">
<t>
Under normal circumstances, the only time that characters within a
URI string are escaped is during the process of generating the URI from
its component parts.  Each component may have its own set of characters
that are reserved, so only the mechanism responsible for generating or
interpreting that component can determine whether or not escaping a
character will change its semantics.  The exception is when a URI is
being used within a context where the unreserved "mark" characters
might need to be escaped, such as when used for a command-line argument
or within a single-quoted attribute.
</t>
<t>
Once generated, a URI is always in an escaped form.  When a URI is
resolved, the components significant to that scheme-specific
resolution process (if any) must be parsed and separated before the
escaped characters within those components can be safely unescaped.
</t>
<t>
In some cases, data that could be represented by an unreserved
character may appear escaped; for example, some of the unreserved
"mark" characters are automatically escaped by some systems.  A URI
normalizer may unescape escaped octets that are represented by characters
in the unreserved set.  For example, "%7E" is sometimes used instead
of tilde ("~") in an "http" URI path and can be converted to "~"
without changing the interpretation of the URI.
</t>
<t>
Because the percent ("%") character serves as the escape indicator,
it must be escaped as "%25" in order for that octet to be used as data
within a URI.  Implementers should be careful not to escape or unescape
the same string more than once, since unescaping an already unescaped
string might lead to misinterpreting a percent data character as
another escaped character, or vice versa in the case of escaping
an already escaped string.
</t>
</section>
</section>

<section title="Excluded US-ASCII Characters" anchor="excluded">
<t>
Although they are disallowed within the URI syntax, we include here a
description of those US-ASCII characters that have been excluded and
the reasons for their exclusion.
</t>
<t>
The control characters (CTL) in the US-ASCII coded character set are not
used within a URI, both because they are non-printable and because
they are likely to be misinterpreted by some control mechanisms.
</t>
<t>
The space character (SP) is excluded because significant spaces may
disappear and insignificant spaces may be introduced when a URI is
transcribed, typeset, or subjected to the treatment of word-processing
programs.  Whitespace is also used to delimit a URI in many contexts.
</t>
<figure><preamble>
<iref item="delims" primary="true"/>
The angle-bracket ("&lt;" and "&gt;") and double-quote (") characters are
excluded because they are often used as the delimiters around a URI in
text documents and protocol fields.  The percent character ("%")
is excluded because it is used for the encoding of 
<xref target="escaped">escaped</xref> characters.
<iref item="URI grammar" subitem="delims" primary="true"/>
</preamble><artwork>
   delims      = "&lt;" / "&gt;" / "%" / DQUOTE
</artwork></figure>
<figure><preamble>
<iref item="unwise" primary="true"/>
Other characters are excluded because gateways and other transport
agents are known to sometimes modify such characters.
<iref item="URI grammar" subitem="unwise" primary="true"/>
</preamble><artwork>
   unwise      = "{" / "}" / "|" / "\" / "^" / "`"
</artwork></figure>
<t>
Data octets corresponding to excluded characters must be escaped in order to
be represented within a URI.
</t>
</section>
</section>

<section title="URI Syntactic Components" anchor="components">
<iref item="URI" primary="true"/>
<iref item="hier-part" primary="true"/>
<iref item="net-path" primary="true"/>
<iref item="abs-path" primary="true"/>
<iref item="rel-path" primary="true"/>
<iref item="authority" primary="false"/>
<iref item="path" primary="false"/>
<figure><preamble>
The generic URI syntax consists of a hierarchical sequence of components
referred to as the scheme, authority, path, query, and fragment.
<iref item="URI grammar" subitem="URI" primary="true"/>
<iref item="URI grammar" subitem="hier-part" primary="true"/>
<iref item="URI grammar" subitem="net-path" primary="true"/>
<iref item="URI grammar" subitem="abs-path" primary="true"/>
<iref item="URI grammar" subitem="rel-path" primary="true"/>
<iref item="URI grammar" subitem="path-segments" primary="false"/>
<iref item="URI grammar" subitem="scheme" primary="false"/>
<iref item="URI grammar" subitem="query" primary="false"/>
<iref item="URI grammar" subitem="fragment" primary="false"/>
<iref item="URI grammar" subitem="authority" primary="false"/>
</preamble><artwork type="abnf">
   URI         = scheme ":" hier-part [ "?" query ] [ "#" fragment ]

   hier-part   = net-path / abs-path / rel-path

   net-path    = "//" authority [ abs-path ]
   abs-path    = "/"  path-segments
   rel-path    = path-segments
</artwork><postamble>
The scheme and path components are required, though path may be empty
(no characters).  An ABNF-driven parser of hier-part will find
that the three productions in the rule are ambiguous: they are
disambiguated by the "first-match-wins" (a.k.a. "greedy") algorithm.
In other words, if the string begins with two slash characters ("//"),
then it is a net-path; if it begins with only one slash character,
then it is an abs-path; otherwise, it is a rel-path.  Note that
rel-path does not necessarily contain any slash ("/") characters; a
non-hierarchical path will be treated as opaque data by a generic
URI parser.
</postamble></figure>
<t>
The authority component is only present when a string matches the
net-path production.  Since the presence of an authority component
restricts the remaining syntax for path, we have not included a
specific "path" rule in the syntax.  Instead, what we refer to as
the URI path is that part of the parsed URI string matching the
abs-path or rel-path production in the syntax above, since they are
mutually exclusive for any given URI and can be parsed as a single
component.
</t>

<section title="Scheme" anchor="scheme">
<iref item="scheme" primary="true"/>
<t>
Each URI begins with a scheme name that refers to a specification for
assigning identifiers within that scheme. As such, the URI syntax is a
federated and extensible naming system wherein each scheme's specification
may further restrict the syntax and semantics of identifiers using that
scheme. 
</t>
<figure><preamble>
Scheme names consist of a sequence of characters beginning with a
letter and followed by any combination of letters, digits, plus ("+"),
period ("."), or hyphen ("-").  Although scheme is case-insensitive,
the canonical form is lowercase and documents that specify schemes
must do so using lowercase letters.  An implementation should accept
uppercase letters as equivalent to lowercase in scheme names
(e.g., allow "HTTP" as well as "http"), for the sake of robustness,
but should only generate lowercase scheme names, for consistency.
<iref item="URI grammar" subitem="scheme" primary="true"/>
</preamble><artwork type="abnf">
   scheme      = ALPHA *( ALPHA / DIGIT / "+" / "-" / "." )
</artwork><postamble>
Individual schemes are not specified by this document.
The process for registration of new URI schemes is defined separately
by <xref target="RFC2717"/>.  The scheme registry maintains the mapping
between scheme names and their specifications.
</postamble></figure>
</section>

<section title="Authority" anchor="authority">
<iref item="authority" primary="true"/>
<t>
Many URI schemes include a hierarchical element for a naming
authority, such that governance of the name space defined by the
remainder of the URI is delegated to that authority (which may,
in turn, delegate it further).  The generic syntax provides a common
means for distinguishing an authority based on a registered domain name
or server address, along with optional port and user information.
</t>
<figure><preamble>
The authority component is preceded by a double slash ("//") and is
terminated by the next slash ("/"), question-mark ("?"), or
crosshatch ("#") character, or by the end of the URI.
<iref item="URI grammar" subitem="authority" primary="true"/>
<iref item="URI grammar" subitem="userinfo" primary="false"/>
<iref item="URI grammar" subitem="host" primary="false"/>
<iref item="URI grammar" subitem="port" primary="false"/>
</preamble><artwork type="abnf">
   authority   = [ userinfo "@" ] host [ ":" port ]
</artwork><postamble>
The parts "&lt;userinfo&gt;@" and ":&lt;port&gt;" may be omitted.
</postamble></figure>
<t>
Some schemes do not allow the userinfo and/or port sub-components.
When presented with a URI that violates one or more scheme-specific
restrictions, the scheme-specifc URI resolution process should flag
the reference as an error rather than ignore the unusued parts; doing so
reduces the number of equivalent URIs and helps detect an abuse of the
generic syntax that might indicate the URI has been constructed to
mislead the user (<xref target="security-semantic"/>).
</t>

<section title="User Information" anchor="userinfo">
<iref item="userinfo" primary="true"/>
<figure><preamble>
The userinfo sub-component may consist of a user name and, optionally,
scheme-specific information about how to gain authorization to access
the server.  The user information, if present, is followed by a
commercial at-sign ("@") that delimits it from the host.
<iref item="URI grammar" subitem="userinfo" primary="true"/>
</preamble><artwork type="abnf">
   userinfo    = *( unreserved / escaped / ";" /
                    ":" / "&amp;" / "=" / "+" / "$" / "," )
</artwork></figure>
<t>
Some URI schemes use the format "user:password" in the userinfo
field. This practice is NOT RECOMMENDED, because the passing of
authentication information in clear text has proven to
be a security risk in almost every case where it has been used.
Note also that userinfo might be crafted to look like a trusted
domain name in order to mislead users, as described in
<xref target="security-semantic"/>.
</t>
</section>

<section title="Host" anchor="host">
<iref item="host" primary="true"/>
<figure><preamble>
The host sub-component of authority is identified by an IPv6 literal
encapsulated within square brackets, an IPv4 address in dotted-decimal form,
or a domain name.
<iref item="URI grammar" subitem="host" primary="true"/>
</preamble><artwork type="abnf">
   host        = [ IPv6reference / IPv4address / hostname ]
</artwork><postamble>
If host is omitted, a default may be defined by the scheme-specific
semantics of the URI.  For example, the "file" URI scheme defaults to
"localhost", whereas the "http" URI scheme does not allow host to be
omitted.
</postamble></figure>
<t>
The production for host is ambiguous because it does not completely
distinguish between an IPv4address and a hostname.  Again, the
"first-match" algorithm applies: If host matches the production for
IPv4address, then it should be considered an IPv4 address literal
and not a hostname.
</t>
<figure><preamble>
<iref item="hostname" primary="true"/>
<iref item="qualified" primary="true"/>
<iref item="domainlabel" primary="true"/>
<iref item="alphanum" primary="true"/>
A hostname takes the form described in Section 3 of <xref target="RFC1034"/>
and Section 2.1 of <xref target="RFC1123"/>: a sequence of domain labels
separated by ".", each domain label starting and ending with an alphanumeric
character and possibly also containing "-" characters.  The rightmost
domain label of a fully qualified domain name may be followed by a
single "." if it is necessary to distinguish between the complete
domain name and some local domain.
<iref item="URI grammar" subitem="hostname" primary="true"/>
<iref item="URI grammar" subitem="qualified" primary="true"/>
<iref item="URI grammar" subitem="domainlabel" primary="true"/>
<iref item="URI grammar" subitem="alphanum" primary="true"/>
</preamble><artwork type="abnf">
   hostname    = domainlabel qualified
   qualified   = *( "." domainlabel ) [ "." ]
   domainlabel = alphanum [ 0*61( alphanum / "-" ) alphanum ]
   alphanum    = ALPHA / DIGIT
</artwork></figure>
<figure><preamble>
<iref item="IPv4" primary="true"/>
<iref item="IPv4address" primary="true"/>
<iref item="dec-octet" primary="true"/>
A host identified by an IPv4 literal address is represented in
dotted-decimal notation (a sequence of four decimal numbers in the
range 0 to 255, separated by "."), as described in <xref target="RFC1123"/>
by reference to <xref target="RFC0952"/>.  Note that other forms of
dotted notation may be interpreted on some platforms, as described in
<xref target="security-ipv4"/>, but only the dotted-decimal form of
four octets is allowed by this grammar.
<iref item="URI grammar" subitem="IPv4address" primary="true"/>
<iref item="URI grammar" subitem="dec-octet" primary="true"/>
</preamble><artwork type="abnf">
   IPv4address = dec-octet "." dec-octet "." dec-octet "." dec-octet
   dec-octet   = DIGIT                 ; 0-9
               / %x31-39 DIGIT         ; 10-99
               / "1" 2DIGIT            ; 100-199
               / "2" %x30-34 DIGIT     ; 200-249
               / "25" %x30-35          ; 250-255
</artwork></figure>
<figure><preamble>
<iref item="IPv6" primary="true"/>
<iref item="IPv6reference" primary="true"/>
<iref item="IPv6address" primary="true"/>
<iref item="ls32" primary="true"/>
<iref item="h4" primary="true"/>
A host identified by an IPv6 literal address <xref target="RFC3513"/>
is distinguished by enclosing the IPv6 literal within square-brakets
("[" and "]").  This is the only place where square-bracket characters
are allowed in the URI syntax.
<iref item="URI grammar" subitem="IPv6reference" primary="true"/>
<iref item="URI grammar" subitem="IPv6address" primary="true"/>
<iref item="URI grammar" subitem="ls32" primary="true"/>
<iref item="URI grammar" subitem="h4" primary="true"/>
</preamble><artwork type="abnf">
   IPv6reference = "[" IPv6address "]"

   IPv6address =                          6( h4 ":" ) ls32
               /                     "::" 5( h4 ":" ) ls32
               / [              h4 ] "::" 4( h4 ":" ) ls32
               / [ *1( h4 ":" ) h4 ] "::" 3( h4 ":" ) ls32
               / [ *2( h4 ":" ) h4 ] "::" 2( h4 ":" ) ls32
               / [ *3( h4 ":" ) h4 ] "::"    h4 ":"   ls32
               / [ *4( h4 ":" ) h4 ] "::"             ls32
               / [ *5( h4 ":" ) h4 ] "::"             h4
               / [ *6( h4 ":" ) h4 ] "::"

   ls32        = ( h4 ":" h4 ) / IPv4address
               ; least-significant 32 bits of address

   h4          = 1*4HEXDIG
</artwork></figure>
<t>
The presence of host within a URI does not imply that the scheme
requires access to the given host on the Internet.  In many cases,
the host syntax is used only for the sake of reusing the existing
registration process created and deployed for DNS, thus obtaining a
globally unique name without the cost of deploying another registry.
However, such use comes with its own costs: domain name ownership
may change over time for reasons not anticipated by the URI creator.
</t>
</section>

<section title="Port" anchor="port">
<iref item="port" primary="true"/>
<figure><preamble>
The port sub-component of authority is designated by an optional
port number in decimal following the host and delimited from it by
a single colon (":") character.
<iref item="URI grammar" subitem="port" primary="true"/>
</preamble><artwork type="abnf">
   port        = *DIGIT
</artwork><postamble>
If port is omitted, a default may be defined by the scheme-specific
semantics of the URI.  Likewise, the type of network port designated by
the port number (e.g., TCP, UDP, SCTP, etc.) is defined by the URI scheme.
For example, the "http" URI scheme defines a default of TCP port 80.
</postamble></figure>
</section>

</section>

<section title="Path" anchor="path">
<figure><preamble>
<iref item="path" primary="true"/>
The path component contains data, specific to the authority (or the
scheme if there is no authority component), identifying the resource
within the scope of that scheme and authority.
<iref item="path-segments" primary="true"/>
<iref item="segment" primary="true"/>
<iref item="pchar" primary="true"/>
<iref item="URI grammar" subitem="path" primary="true"/>
<iref item="URI grammar" subitem="path-segments" primary="true"/>
<iref item="URI grammar" subitem="segment" primary="true"/>
<iref item="URI grammar" subitem="pchar" primary="true"/>
</preamble><artwork type="abnf">
   path          = abs-path / rel-path

   path-segments = segment *( "/" segment )
   segment       = *pchar

   pchar         = unreserved / escaped / ";" /
                   ":" / "@" / "&amp;" / "=" / "+" / "$" / ","
</artwork></figure>
<t>
The path may consist of a sequence of path segments separated by a
single slash "/" character.  Within a path segment, the characters
"/", ";", "=", and "?" are reserved.  The semicolon (";") and
equals ("=") characters have the reserved purpose of delimiting
parameters and parameter values within a path segment.  However,
parameters are not significant to the parsing of relative references.
</t>
</section>

<section title="Query" anchor="query">
<figure><preamble>
<iref item="query" primary="true"/>
The query component is a string of information to be interpreted by
the resource.
<iref item="URI grammar" subitem="query" primary="true"/>
</preamble><artwork type="abnf">
   query       = *( pchar / "/" / "?" )
</artwork></figure>
<t>
Within a query component, the characters ";", ":", "@", "&amp;",
"=", "+", ",", and "$" are reserved.  The characters slash ("/") and
question-mark ("?") are allowed to represent data within the query
component, but such use is discouraged; a common mistake in incorrect
implementations is to consider them to be hierarchical separators,
thus resulting in non-interoperable results while parsing relative
references if the base URI contains "/" or "?" inside the query.
</t>
</section>

<section title="Fragment Identifier" anchor="fragment">
<figure><preamble>
<iref item="fragment" primary="true"/>
   When a URI reference is used to perform a retrieval action on the
   identified resource, the optional fragment identifier, separated from
   the URI by a crosshatch ("#") character, consists of additional
   reference information to be interpreted by the user agent after the
   retrieval action has been successfully completed.  As such, it is not
   part of a URI, but is often used in conjunction with a URI.
<iref item="URI grammar" subitem="fragment" primary="true"/>
</preamble><artwork type="abnf">
   fragment    = *( pchar / "/" / "?" )
</artwork></figure>
<t>
   The semantics of a fragment identifier is a property of the data
   resulting from a retrieval action, regardless of the type of URI used
   in the reference.  Therefore, the format and interpretation of
   fragment identifiers is dependent on the media type
   <xref target="RFC2046"/> of the
   retrieval result.  The character restrictions described in
<xref target="characters"/>
   for a URI also apply to the fragment in a URI-reference.  Individual
   media types may define additional restrictions or structure within
   the fragment for specifying different types of "partial views" that
   can be identified within that media type.
</t>
<t>
   A fragment identifier is only meaningful when a URI reference is
   intended for retrieval and the result of that retrieval is a document
   for which the identified fragment is consistently defined.
</t>
</section>

</section>

<section title="URI References" anchor="uri-reference">
<iref item="URI-reference" primary="true"/>
<iref item="absolute-URI" primary="true"/>
<figure><preamble>
   The term "URI-reference" is used here to denote the common usage of a
   resource identifier.  A URI reference may be absolute or relative,
   and may have additional information attached in the form of a
   fragment identifier.  However, "the URI" that results from such a
   reference includes only the absolute URI after the fragment
   identifier (if any) is removed and after any relative URI is resolved
   to its absolute form.  Although it is possible to limit the
   discussion of URI syntax and semantics to that of the absolute
   result, most usage of URI is within general URI references, and it is
   impossible to obtain the URI from such a reference without also
   parsing the fragment and resolving the relative form.
<iref item="URI grammar" subitem="URI-reference" primary="true"/>
<iref item="URI grammar" subitem="absolute-URI" primary="true"/>
</preamble><artwork type="abnf">
   URI-reference = [ absolute-URI / relative-URI ] [ "#" fragment ]
   absolute-URI  = scheme ":" hier-part [ "?" query ]
</artwork></figure>
<figure><preamble>
<iref item="absolute-URI-reference" primary="true"/>
   Many protocol elements allow only the absolute form of a URI with
   an optional fragment identifier.
<iref item="URI grammar" subitem="absolute-URI-reference" primary="true"/>
</preamble><artwork type="abnf">
   absolute-URI-reference = absolute-URI [ "#" fragment ]
</artwork></figure>
<t>
   The syntax for a relative URI is a shortened form of that for an absolute
   URI, where some prefix of the URI is missing and certain path
   components ("." and "..") have a special meaning when, and only when,
   interpreting a relative path.  The relative URI syntax is defined in
<xref target="relative-URI"/>.
</t>

<section title="Same-document References" anchor="same-document">
<t>
   A URI reference that does not contain a URI is a reference to the
   current document.  In other words, an empty URI reference within a
   document is interpreted as a reference to the start of that document,
   and a reference containing only a fragment identifier is a reference
   to the identified fragment of that document.  Traversal of such a
   reference should not result in an additional retrieval action.
   However, if the URI reference occurs in a context that is always
   intended to result in a new request, as in the case of HTML's FORM
   element <xref target="HTML"/>, then an empty URI reference represents
   the base URI of the current document and should be replaced by that
   URI when transformed into a request.
</t>
</section>

<section title="Parsing a URI Reference" anchor="parsing">
<t>
   A URI reference is typically parsed according to the four main
   components and fragment identifier in order to determine what
   components are present and whether the reference is relative or
   absolute.  The individual components are then parsed for their
   subparts and, if not opaque, to verify their validity.
</t>
<t>
   Although the BNF defines what is allowed in each component, it is
   ambiguous in terms of differentiating between an authority component
   and a path component that begins with two slash characters.  The
   greedy algorithm is used for disambiguation: the left-most matching
   rule soaks up as much of the URI reference string as it is capable of
   matching.  In other words, the authority component wins.
</t>
<t>
An authority component is not required for a URI scheme to make use
of relative references.  A base URI without an authority component
implies that any relative reference will also be without an authority
component.
</t>
<t>
   Readers familiar with regular expressions should see Appendix B for a
   concrete parsing example and test oracle.
</t>
</section>
</section>

<section title="Relative URI References" anchor="relative-URI">
<iref item="relative-URI" primary="true"/>
<t>
   It is often the case that a group or "tree" of documents has been
   constructed to serve a common purpose; the vast majority of URIs in
   these documents point to resources within the tree rather than
   outside of it.  Similarly, documents located at a particular site are
   much more likely to refer to other resources at that site than to
   resources at remote sites.
</t>
<t>
   Relative addressing of URIs allows document trees to be partially
   independent of their location and access scheme.  For instance, it is
   possible for a single set of hypertext documents to be simultaneously
   accessible and traversable via each of the "file", "http", and "ftp"
   schemes if the documents refer to each other using relative URIs.
   Furthermore, such document trees can be moved, as a whole, without
   changing any of the relative references.  Experience within the WWW
   has demonstrated that the ability to perform relative referencing is
   necessary for the long-term usability of embedded URIs.
</t>
<figure><preamble>
   The relative URI syntax takes advantage of the hier-part syntax
   (<xref target="components"/>) in order to express a reference that is
   relative to the namespace of another hierarchical URI.
<iref item="URI grammar" subitem="relative-URI" primary="true"/>
</preamble><artwork type="abnf">
   relative-URI  = [ net-path / abs-path / rel-path ] [ "?" query ]
</artwork></figure>
<t>
   A relative reference beginning with two slash characters is termed a
   network-path reference, as defined by net-path in <xref target="components"/>.
   Such references are rarely used.
</t>
<t>
   A relative reference beginning with a single slash character is
   termed an absolute-path reference, as defined by abs-path in
   <xref target="components"/>.
</t>
<figure><preamble>
<iref item="rel-path" primary="true"/>
<iref item="rel-segment" primary="true"/>
   A relative reference that does not begin with a scheme name or a
   slash character is termed a relative-path reference.
<iref item="URI grammar" subitem="rel-path" primary="true"/>
<iref item="URI grammar" subitem="rel-segment" primary="true"/>
</preamble><artwork type="abnf">
   rel-path    = rel-segment [ abs-path ]

   rel-segment = 1*( unreserved / escaped / ";" /
                     "@" / "&amp;" / "=" / "+" / "$" / "," )
</artwork></figure>
<t>
   Within a relative-path reference, the complete path segments "." and
   ".." have special meanings: "the current hierarchy level" and "the
   level above this hierarchy level", respectively.  Although this is
   very similar to their use within Unix-based filesystems to indicate
   directory levels, these path components are only considered special
   when resolving a relative-path reference to its absolute form
   (Section 5.2).
</t>
<t>
   Authors should be aware that a path segment which contains a colon
   character cannot be used as the first segment of a relative URI path
   (e.g., "this:that"), because it would be mistaken for a scheme name.
   It is therefore necessary to precede such segments with other
   segments (e.g., "./this:that") in order for them to be referenced as
   a relative path.
</t>
<t>
   It is not necessary for all URI within a given scheme to be
   restricted to the hier-part syntax, since the hierarchical
   properties of that syntax are only necessary when a relative URI is
   used within a particular document.  Documents can only make use of
   a relative URI when their base URI fits within the hier-part syntax.
   It is assumed that any document which contains a relative reference
   will also have a base URI that obeys the syntax.  In other words, a
   relative URI cannot be used within a document that has an unsuitable
   base URI.
</t>
<t>
   Some URI schemes do not allow a hierarchical syntax matching the
   hier-part syntax, and thus cannot use relative references.
</t>

<section title="Establishing a Base URI" anchor="base-URI">
<t>
   The term "relative URI" implies that there exists some absolute "base
   URI" against which the relative reference is applied.  Indeed, the
   base URI is necessary to define the semantics of any relative URI
   reference; without it, a relative reference is meaningless.  In order
   for relative URI to be usable within a document, the base URI of that
   document must be known to the parser.
</t>
<t>
   The base URI of a document can be established in one of four ways,
   listed below in order of precedence.  The order of precedence can be
   thought of in terms of layers, where the innermost defined base URI
   has the highest precedence.  This can be visualized graphically as:
</t>
<figure><artwork>
   .----------------------------------------------------------.
   |  .----------------------------------------------------.  |
   |  |  .----------------------------------------------.  |  |
   |  |  |  .----------------------------------------.  |  |  |
   |  |  |  |  .----------------------------------.  |  |  |  |
   |  |  |  |  |       &lt;relative-reference&gt;       |  |  |  |  |
   |  |  |  |  `----------------------------------'  |  |  |  |
   |  |  |  | (5.1.1) Base URI embedded in the       |  |  |  |
   |  |  |  |         document's content             |  |  |  |
   |  |  |  `----------------------------------------'  |  |  |
   |  |  | (5.1.2) Base URI of the encapsulating entity |  |  |
   |  |  |         (message, document, or none).        |  |  |
   |  |  `----------------------------------------------'  |  |
   |  | (5.1.3) URI used to retrieve the entity            |  |
   |  `----------------------------------------------------'  |
   | (5.1.4) Default Base URI is application-dependent        |
   `----------------------------------------------------------'
</artwork></figure>

<section title="Base URI within Document Content" anchor="base-context">
<t>
   Within certain document media types, the base URI of the document can
   be embedded within the content itself such that it can be readily
   obtained by a parser.  This can be useful for descriptive documents,
   such as tables of content, which may be transmitted to others through
   protocols other than their usual retrieval context (e.g., E-Mail or
   USENET news).
</t>
<t>
   It is beyond the scope of this document to specify how, for each
   media type, the base URI can be embedded.  It is assumed that user
   agents manipulating such media types will be able to obtain the
   appropriate syntax from that media type's specification.  An example
   of how the base URI can be embedded in the Hypertext Markup Language
   (HTML) <xref target="HTML"/> is provided in Appendix D.
</t>
<t>
   A mechanism for embedding the base URI within MIME container types
   (e.g., the message and multipart types) is defined by MHTML
   <xref target="RFC2110"/>.  Protocols that do not use the MIME message header syntax,
   but which do allow some form of tagged metainformation to be included
   within messages, may define their own syntax for defining the base
   URI as part of a message.
</t>
</section>

<section title="Base URI from the Encapsulating Entity"
         anchor="base-encapsulated">
<t>
   If no base URI is embedded, the base URI of a document is defined by
   the document's retrieval context.  For a document that is enclosed
   within another entity (such as a message or another document), the
   retrieval context is that entity; thus, the default base URI of the
   document is the base URI of the entity in which the document is
   encapsulated.
</t>
</section>

<section title="Base URI from the Retrieval URI" anchor="base-retrieval">
<t>
   If no base URI is embedded and the document is not encapsulated
   within some other entity (e.g., the top level of a composite entity),
   then, if a URI was used to retrieve the base document, that URI shall
   be considered the base URI.  Note that if the retrieval was the
   result of a redirected request, the last URI used (i.e., that which
   resulted in the actual retrieval of the document) is the base URI.
</t>
</section>

<section title="Default Base URI" anchor="base-default">
<t>
   If none of the conditions described in above apply,
   then the base URI is defined by the context of the application.
   Since this definition is necessarily application-dependent, failing
   to define the base URI using one of the other methods may result in
   the same content being interpreted differently by different types of
   application.
</t>
<t>
   It is the responsibility of the distributor(s) of a document
   containing a relative URI to ensure that the base URI for that document
   can be established.  It must be emphasized that a relative URI cannot
   be used reliably in situations where the document's base URI is not
   well-defined.
</t>
</section>
</section>

<section title="Resolving Relative References to Absolute Form"
         anchor="absolutize">
<t>
   This section describes an example algorithm for resolving URI
   references that might be relative to a given base URI.  The algorithm
   is intended to provide a definitive result that can be used to test
   the output of other implementations.  Implementation of the algorithm
   itself is not required, but the result given by an implementation must
   match the result that would be given by this algorithm.
</t>
<t>
The base URI is established according to the rules of
<xref target="base-URI"/> and parsed into the four main components
as described in <xref target="components"/>.  Note
   that only the scheme component is required to be present in the base
   URI; the other components may be empty or undefined.  A component is
   undefined if its preceding separator does not appear in the URI
   reference; the path component is never undefined, though it may be
   empty.  The base URI's query component is not used by the resolution
   algorithm and may be discarded.
</t>
<figure><preamble>
   For each URI reference (R), the following pseudocode describes an
   algorithm for transforming R into its target (T), which is either
   an absolute URI or the current document, and R's optional fragment:
</preamble>
<artwork>
   (R.scheme, R.authority, R.path, R.query, fragment) = parse(R);
      -- The URI reference is parsed into the four components and
      -- fragment identifier, as described in Section 4.3.

   if ((not validating) and (R.scheme == Base.scheme)) then
      -- A non-validating parser may ignore a scheme in the
      -- reference if it is identical to the base URI's scheme.
      undefine(R.scheme);
   endif;

   if defined(R.scheme) then
      T.scheme    = R.scheme;
      T.authority = R.authority;
      T.path      = R.path;
      T.query     = R.query;
   else
      if defined(R.authority) then
         T.authority = R.authority;
         T.path      = R.path;
         T.query     = R.query;
      else
         if (R.path == "") then
            if defined(R.query) then
               T.path  = Base.path;
               T.query = R.query;
            else
               -- An empty reference refers to the current document
               return (current-document, fragment);
            endif;
         else
            if (R.path starts-with "/") then
               T.path = R.path;
            else
               T.path = merge(Base.path, R.path);
            endif;
            T.query = R.query;
         endif;
         T.authority = Base.authority;
      endif;
      T.scheme = Base.scheme;
   endif;

   return (T, fragment);
</artwork></figure>
<t>
The pseudocode above refers to a merge routine for merging a
relative-path reference with the path of the base URI to obtain the
target path.  Although there are many ways to do this, we will describe
a simple method using a separate string buffer:
<list style="numbers">
<t>
All but the last segment of the base URI's path component is
copied to the buffer.  In other words, any characters after the
last (right-most) slash character, if any, are excluded.
If the base URI's path component is the empty string, then
a single slash character ("/") is copied to the buffer.
</t>
<t>
The reference's path component is appended to the buffer
string.
</t>
<t>
All occurrences of "./", where "." is a complete path segment,
are removed from the buffer string.
</t>
<t>
If the buffer string ends with "." as a complete path segment,
that "." is removed.
</t>
<t>
All occurrences of "&lt;segment&gt;/../", where &lt;segment&gt; is a
complete path segment not equal to "..", are removed from the
buffer string.  Removal of these path segments is performed
iteratively, removing the leftmost matching pattern on each
iteration, until no matching pattern remains.
</t>
<t>
If the buffer string ends with "&lt;segment&gt;/..", where &lt;segment&gt;
is a complete path segment not equal to "..", that
"&lt;segment&gt;/.." is removed.
</t>
<t>
If the resulting buffer string still begins with one or more
complete path segments of "..", then the reference is
considered to be in error.  Implementations may handle this
error by retaining these components in the resolved path (i.e.,
treating them as part of the final URI), by removing them from
the resolved path (i.e., discarding relative levels above the
root), or by avoiding traversal of the reference.
</t>
<t>
The remaining buffer string is the target URI's path component.
</t>
  </list>
</t>
<t>
   Some systems may find it more efficient to implement the merge
   algorithm as a pair of path segment stacks being merged, rather
   than as a series of string pattern replacements.
  <list>
    <t>
      Note: Some WWW client applications will fail to separate the
      reference's query component from its path component before merging
      the base and reference paths.  This may result in a loss of
      information if the query component contains the strings "/../" or "/./".
    </t>
  </list>
</t>
<figure><preamble>
The resulting target URI components and fragment can be
recombined to provide the absolute form of the URI reference.
Using pseudocode, this would be:
</preamble><artwork>
   result = ""

   if defined(T.scheme) then
      append T.scheme to result;
      append ":" to result;
   endif;

   if defined(T.authority) then
      append "//" to result;
      append T.authority to result;
   endif;

   append T.path to result;

   if defined(T.query) then
      append "?" to result;
      append T.query to result;
   endif;

   if defined(fragment) then
      append "#" to result;
      append fragment to result;
   endif;

   return result;
</artwork><postamble>
Note that we must be careful to preserve the distinction between a
component that is undefined, meaning that its separator was not
present in the reference, and a component that is empty, meaning
that the separator was present and was immediately followed by the
next component separator or the end of the reference.
</postamble></figure>
<t>
   Resolution examples are provided in Appendix C.
</t>
</section>
</section>

<section title="URI Normalization and Comparison" anchor="comparison">
<t>
One of the most common operations on URIs is simple comparison:
determining if two URIs are equivalent without using the URIs to
access their respective resource(s).  A comparison is performed
every time a response cache is accessed, a browser checks its
history to color a link, or an XML parser processes tags within a namespace.
Extensive normalization prior to comparison of URIs is often used
by spiders and indexing engines to prune a search space or
reduce duplication of request actions and response storage.
</t>
<t>
URI comparison is performed in respect to some particular purpose,
and software with differing purposes will often be subject to differing
design trade-offs in regards to how much effort should be spent in
reducing duplicate identifiers.  This section describes a variety of
methods that may be used to compare URIs, the trade-offs between them,
and the types of applications that might use them.
</t>
  <section title="URI Equivalence" anchor="equivalence">
  <t>
  Since URIs exist to identify resources, presumably they should be
  considered equivalent when they identify the same resource.  However,
  such a definition of equivalence is not of much practical use, since
  there is no way for software to compare two resources without knowledge
  of their origin.  For this reason, determination of equivalence or
  difference of URIs is based on string comparison, perhaps augmented by
  reference to additional rules provided by URI scheme definitions.
  We use the terms "different" and "equivalent" to describe
  the possible outcomes of such comparisons, but there
  are many application-dependent versions of equivalence.
  </t>
  <t>
  Even though it is possible to determine that two URIs are equivalent,
  it is never possible to be sure that two URIs identify different
  resources. Therefore, comparison methods are designed to minimize
  false negatives while strictly avoiding false positives.
  </t>
  <t>
  In testing for equivalence, it is generally unwise to directly compare
  relative URI references; they should be converted to their absolute forms
  before comparison.  Furthermore, when URI references are being compared
  for the purpose of selecting (or avoiding) a network action, such as
  retrieval of a representation, it is often necessary to separate fragment
  identifiers from the URIs prior to comparison.
  </t>
  </section>
  <section title="Comparison Ladder" anchor="comparison-ladder">
  <t>
  A variety of methods are used in practice to test URI equivalence.
  These methods fall into a range, distinguished by the amount of
  processing required and the degree to which the probability of false
  negatives is reduced.  As noted above, false negatives cannot in
  principle be eliminated.  In practice, their probability can be reduced,
  but this reduction requires more processing and is
  not cost-effective for all applications.
  </t>
  <t>
  If this range of comparison practices is considered as a ladder, the
  following discussion will climb the ladder, starting with those that
  are cheap but have a relatively higher chance of producing false negatives,
  and proceeding to those that have higher computational cost and lower risk
  of false negatives.
  </t>
    <section title="Simple String Comparison" anchor="comparison-string">
    <t>
    If two URIs, considered as character strings, are identical, then it is
    safe to conclude that they are equivalent.  This type of equivalence test
    has very low computational cost and is in wide use in a variety of
    applications, particularly in the domain of parsing.
    </t>
    <t>
    Testing strings for equivalence requires some basic precautions.
    This procedure is often referred to as "bit-for-bit" or "byte-for-byte"
    comparison, which is potentially misleading.  Testing of strings for
    equality is normally based on pairwise comparison of the characters
    that make up the strings, starting from the first and proceeding until
    both strings are exhausted and all characters found to be equal, or a
    pair of characters compares unequal or one of the strings is exhausted
    before the other.
    </t>
    <t>
    Such character comparisons require that each pair of characters be put
    in comparable form.  For example, should one URI be stored in a byte
    array in EBCDIC encoding, and the second be in a Java String object,
    bit-for-bit comparisons applied naively will produce both false-positive
    and false-negative errors.  Thus, in principle, it is better to speak of
    equality on a character-for-character rather than byte-for-byte or
    bit-for-bit basis.
    </t>
    <t>
    Unicode defines a character as being identified by number
    ("codepoint") with an associated bundle of visual and other semantics.
    At the software level, it is not practical to compare semantic bundles,
    so in practical terms, character-by-character comparisons are done
    codepoint-by-codepoint.
    </t>
    </section>
    <section title="Syntax-based Normalization" anchor="normalize-syntax">
<figure><preamble>
Software may use logic based on the definitions provided by this
specification to reduce the probability of false negatives.  Such
processing is (moderately) higher in cost than character-for-character
string comparison.  For example, an application using this approach
could reasonably consider the following two URIs equivalent:
</preamble><artwork>
   example://a/b/c/%7A
   eXAMPLE://a/./b/../b/c/%7a
</artwork><postamble>
Web user agents, such as browsers, typically apply this type of URI
normalization when determining whether a cached response is available.
Syntax-based normalization includes such techniques
as case normalization, escape normalization, and removal of leftover
relative path segments.
</postamble></figure>
      <section title="Case Normalization" anchor="normalize-case">
      <t>
      When a URI scheme uses elements of the common syntax, it will
      also use the common syntax equivalence rules, namely that the scheme
      and hostname are case insensitive and therefore can be normailized
      to lowercase.  For example, the URI &lt;HTTP://www.EXAMPLE.com/&gt; is
      equivalent to &lt;http://www.example.com/&gt;.
      </t>
      </section>
      <section title="Escape Normalization" anchor="normalize-escape">
      <t>
      The percent-escape mechanism described in <xref target="escaped"/>
      a frequent source
      of variance among otherwise identical URIs.  One cause is the choice
      of uppercase or lowercase letters for the hexadecimal digits
      within the escape sequence (e.g., "%3a" versus "%3A").  Such
      sequences are always equivalent; for the sake of uniformity, URI
      generators and normalizers are strongly encouraged to use uppercase
      letters for the hex digits A-F.
      </t>
      <t>
      Only characters that are excluded from or reserved within the URI
      syntax must be escaped when used as data.  However, some URI generators
      go beyond that and escape characters that do not require escaping,
      resulting in URIs that are equivalent to their unescaped counterparts.
      Such URIs can be normalized by unescaping sequences that represent
      the unreserved characters, as described in <xref target="unreserved"/>.
      </t>
      </section>
      <section title="Path Segment Normalization" anchor="normalize-path">
      <t>
      The complete path segments "." and ".." have a special meaning within
      hierarchical URI schemes.  As such, they should not appear in absolute
      URI paths; if they are found, they can be removed by splitting the URI
      just after the "/" that starts the path, using the left half as
      the base URI and the right as a relative reference, and normalizing
      the URI by merging the two in in accordance with the relative URI
      processing algorithm (<xref target="relative-URI"/>).
      </t>
      </section>
    </section>
    <section title="Scheme-based Normalization" anchor="normalize-scheme">
<figure><preamble>
The syntax and semantics of URIs vary from scheme to scheme, as described
by the defining specification for each scheme.  Software may use
scheme-specific rules, at further processing cost, to reduce the
probability of false negatives.  For example, Web spiders that populate
most large search engines would consider the following two URIs to be
equivalent:
</preamble><artwork>
   http://example.com/
   http://example.com:80/
</artwork><postamble>
This behavior is based on the rules provided by the syntax and semantics
of the "http" URI scheme, which defines an empty port component as being
equivalent to the default TCP port for HTTP (port 80).  In general, a
URI scheme that uses the generic syntax for authority is defined such that
a URI with an explicit ":port", where the port is the default for the
scheme, is equivalent to one where the port is elided.
</postamble></figure>
    </section>
    <section title="Protocol-based Normalization" anchor="normalize-protocol">
<figure><preamble>
Web spiders, for which substantial effort to reduce the incidence
of false negatives is often cost-effective, are observed to implement
even more aggressive techniques in URI comparison.  For example, if they
observe that a URI such as
</preamble><artwork>
   http://example.com/data
</artwork></figure>
<figure><preamble>
redirects to
</preamble><artwork>
   http://example.com/data/
</artwork><postamble>
    they will likely regard the two as equivalent in the future.
    Obviously, this kind of technique is only appropriate in special
    situations.
</postamble></figure>
    </section>
  </section>
  <section title="Good Practice When Using URIs" anchor="normalize-good-practice">
  <t>
  It is in the best interests of everyone to avoid false-negatives in
  comparing URIs, and to only require the minimum amount of
  software processing for such comparisons.  Those who generate and
  make reference to URIs can reduce the cost of processing and the risk
  of false negatives by consistently providing them in a form that is
  reasonably canonical with respect to their scheme.  Specifically:
  <list>
    <t>Always provide the URI scheme in lowercase characters.</t>
    <t>Always provide the hostname, if any, in lowercase characters.</t>
    <t>Only perform percent-escaping where it is essential.</t>
    <t>Always use uppercase A-through-F characters when percent-escaping.</t>
    <t>Use the UTF-8 character-to-octet mapping, whenever possible.</t>
    <t>Prevent /./ and /../ from appearing in absolute URI paths.</t>
  </list>
  </t>
  <t>
  The choices listed above are motivated by observations that a high
  proportion of deployed software already use these techniques in
  practice for the purposes of normalization.
  </t>
  </section>
</section>

<section title="Security Considerations" anchor="security">
<t>
A URI does not in itself pose a security threat.  However, since URIs
are often used to provide a compact set of instructions for access to
network resources, care must be taken to properly interpret the data
within a URI, to prevent that data from causing unintended access, and
to avoid including data that should not be revealed in plain text.
</t>
<section title="Reliability and Consistency" anchor="security-reliability">
<t>
There is no guarantee that, having once used a given URI to retrieve
some information, that the same information will be retievable by
that URI in the future. Nor is there any guarantee that the information
retrievable via that URI in the future will be observably similar to 
that retrieved in the past.  The URI syntax does not constrain how a
given scheme or authority apportions its namespace or maintains it
over time.  Such a guarantee can only be obtained from the person(s)
controlling that namespace and the resource in question.  A specific
URI scheme may define additional semantics, such as name persistence,
if those semantics are required of all naming authorities for that scheme.
</t>
</section>
<section title="Malicious Construction" anchor="security-malicious">
<t>
It is sometimes possible to construct a URI such that an attempt to
perform a seemingly harmless, idempotent operation, such as the
retrieval of a representation associated with a resource, will in fact
cause a possibly damaging remote operation to occur.  The unsafe URI
is typically constructed by specifying a port number other than that
reserved for the network protocol in question.  The client
unwittingly contacts a site that is in fact running a different
protocol.  The content of the URI contains instructions that, when
interpreted according to this other protocol, cause an unexpected
operation.  An example has been the use of a gopher URI to cause an
unintended or impersonating message to be sent via a SMTP server.
</t>
<t>
Caution should be used when using any URI that specifies a TCP port
number other than the default for the protocol, especially when it is
a number within the reserved space.
</t>
<t>
Care should be taken when a URI contains escaped delimiters for a
given protocol (for example, CR and LF characters for telnet
protocols) that these are not unescaped before transmission.  This
might violate the protocol, but avoids the potential for such
characters to be used to simulate an extra operation or parameter in
that protocol, which might lead to an unexpected and possibly harmful
remote operation being performed.
</t>
</section>
<section title="Rare IP Address Formats" anchor="security-ipv4">
<t>
Although the URI syntax for IPv4address only allows the common,
dotted-decimal form of IPv4 address literal, many implementations that
process URIs make use of platform-dependent system routines, such as
gethostbyname() and inet_aton(), to translate the string literal to an
actual IP address.  Unfortunately, such system routines often allow and
process a much larger set of formats than those described in
<xref target="host"/>.
</t>
<t>
For example, many implementations allow dotted forms of three numbers,
wherein the last part is interpreted as a 16-bit quantity and placed in
the right-most two bytes of the network address (e.g., a Class B network).
Likewise, a dotted form of two numbers means the last part is interpreted
as a 24-bit quantity and placed in the right most three bytes of the network
address (Class A), and a single number (without dots) is interpreted as
a 32-bit quantity and stored directly in the network address.  Adding
further to the confusion, some implementations allow each dotted part
to be interpreted as decimal, octal, or hexadecimal, as specified in
the C language (i.e., a leading 0x or 0X implies hexadecimal; otherwise,
a leading 0 implies octal; otherwise, the number is interpreted as decimal).
</t>
<t>
These additional IP address formats are not allowed in the URI syntax
due to differences between platform implementations.  However, they
can become a security concern if an application attempts to filter
access to resources based on the IP address in string literal format.
If such filtering is performed, it is recommended that literals
be converted to numeric form and filtered based on the numeric value,
rather than a prefix or suffix of the string form.
</t>
</section>
<section title="Sensitive Information" anchor="security-sensitive">
<t>
It is clearly unwise to use a URI that contains a password which is
intended to be secret. In particular, the use of a password within
the userinfo component of a URI is strongly discouraged except
in those rare cases where the 'password' parameter is intended to be
public.
</t>
</section>
<section title="Semantic Attacks" anchor="security-semantic">
<figure><preamble>
Because the userinfo component is rarely used and appears before the
hostname in the authority component, it can be used to construct a URI
that is intended to mislead a human user by appearing to identify one
(trusted) naming authority while actually identifying a different
authority hidden behind the noise.  For example
</preamble><artwork>
   http://www.example.com&amp;story=breaking_news@10.0.0.1/top_story.htm
</artwork><postamble>
might lead a human user to assume that the authority is
'www.example.com', whereas it is actually '10.0.0.1'.  Note that the
misleading userinfo could be much longer than the example above.
</postamble></figure>
<t>
A misleading URI, such as the one above, is an attack on the user's
preconceived notions about the meaning of a URI, rather than an attack
on the software itself.  User agents may be able to reduce the impact
of such attacks by visually distinguishing the various components of
the URI when rendered, such as by using a different color or tone to
render userinfo if any is present, though there is no general panacea.
More information on URI-based semantic attacks can be found in 
<xref target="Siedzik"/>.
</t>
</section>
</section>

<section title="Acknowledgements" anchor="ack">
<t>
This document is derived from RFC 2396 <xref target="RFC2396"/>,
RFC 1808 <xref target="RFC1808"/>, and RFC 1738 <xref target="RFC1738"/>;
the acknowledgements in those specifications still apply.
It also incorporates the update (with corrections) for IPv6 literals
in the host syntax, as defined by Robert M. Hinden, Brian E. Carpenter,
and Larry Masinter in <xref target="RFC2732"/>.
In addition, contributions by Reese Anschultz, Tim Bray, Rob Cameron,
Dan Connolly, Adam M. Costello, Jason Diamond, Martin Duerst, Stefan Eissing,
Clive D.W. Feather, Pat Hayes, Henry Holtzman, Graham Klyne, Dan Kohn,
Bruce Lilly, Andrew Main, Michael Mealling, Julian Reschke, Tomas Rokicki,
Miles Sabin, Ronald Tschalaer, Marc Warne, Stuart Williams, and Henry Zongaro
are gratefully acknowledged.
</t>
</section>
</middle>
<back>
  <references title="Normative References">

<reference anchor="ASCII">
  <front>
    <title>Coded Character Set -- 7-bit American Standard Code for Information Interchange</title>
    <author>
      <organization>American National Standards Institute</organization>
    </author>
    <date month="" year="1986" />
  </front>
  <seriesInfo name="ANSI" value="X3.4" />
</reference>

<reference anchor='RFC2234'>
<front>
<title abbrev='ABNF for Syntax Specifications'>Augmented BNF for Syntax Specifications: ABNF</title>
<author initials='D.H.' surname='Crocker' fullname='David H. Crocker'>
<organization>Internet Mail Consortium</organization>
<address>
<postal>
<street>675 Spruce Dr.</street>
<city>Sunnyvale</city>
<region>CA</region>
<code>94086</code>
<country>US</country></postal>
<phone>+1 408 246 8253</phone>
<facsimile>+1 408 249 6205</facsimile>
<email>dcrocker@imc.org</email></address></author>
<author initials='P.' surname='Overell' fullname='Paul Overell'>
<organization>Demon Internet Ltd</organization>
<address>
<postal>
<street>Dorking Business Park</street>
<street>Dorking</street>
<city>Surrey</city>
<region>England</region>
<code>RH4 1HN</code>
<country>UK</country></postal>
<email>paulo@turnpike.com</email></address></author>
<date month='November' year='1997' /></front>
<seriesInfo name='RFC' value='2234' />
<format type='TXT' octets='24265' target='ftp://ftp.isi.edu/in-notes/rfc2234.txt' />
</reference>

  </references>

  <references title="Informative References">
  
<reference anchor='RFC2277'>
<front>
<title abbrev='Charset Policy'>IETF Policy on Character Sets and Languages</title>
<author initials='H.T.' surname='Alvestrand' fullname='Harald Tveit Alvestrand'>
<organization>UNINETT</organization>
<address>
<postal>
<street>P.O.Box 6883 Elgeseter</street>
<street>N-7002 TRONDHEIM</street>
<country>NORWAY</country></postal>
<phone>+47 73 59 70 94</phone>
<email>Harald.T.Alvestrand@uninett.no</email></address></author>
<date month='January' year='1998'></date>
<area>Applications</area>
<keyword>Internet Engineering Task Force</keyword>
<keyword>character encoding</keyword></front>
<seriesInfo name='BCP' value='18' />
<seriesInfo name='RFC' value='2277' />
</reference>

<reference anchor='RFC1630'>
<front>
<title abbrev='URIs in WWW'>Universal Resource Identifiers in WWW: A Unifying Syntax for the Expression of Names and Addresses of Objects on the Network as used in the World-Wide Web</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization>CERN, World-Wide Web project</organization>
<address>
<postal>
<street>1211 Geneva 23</street>
<city></city>
<region></region>
<code></code>
<country>CH</country></postal>
<phone>+41 22 7673755</phone>
<facsimile>+41 22 7677155</facsimile>
<email>timbl@info.cern.ch</email></address></author>
<date month='June' year='1994'></date></front>
<seriesInfo name='RFC' value='1630' />
</reference>

<reference anchor='RFC1738'>
<front>
<title>Uniform Resource Locators (URL)</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization>CERN, World-Wide Web project</organization>
<address>
<postal>
<street>1211 Geneva 23</street>
<city></city>
<region></region>
<code></code>
<country>CH</country></postal>
<phone>+41 22 7673755</phone>
<facsimile>+41 22 7677155</facsimile>
<email>timbl@info.cern.ch</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Xerox PARC</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code>
<country>US</country></postal>
<phone>+1 415 812 4365</phone>
<facsimile>+1 415 812 4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='M.' surname='McCahill' fullname='Mark McCahill'>
<organization>University of Minnesota, Computer and Information Services</organization>
<address>
<postal>
<street>100 Union Street SE, Shepherd Labs</street>
<street>Room 152</street>
<city>Minneapolis</city>
<region>MN</region>
<code>55455</code>
<country>US</country></postal>
<phone>+1 612 625 1300</phone>
<email>mpm@boombox.micro.umn.edu</email></address></author>
<date month='December' year='1994'></date>
</front>
<seriesInfo name='RFC' value='1738' />
</reference>
  
<reference anchor='RFC2396'>
<front>
<title abbrev='URI Generic Syntax'>Uniform Resource Identifiers (URI): Generic Syntax</title>
<author initials='T.' surname='Berners-Lee' fullname='Tim Berners-Lee'>
<organization abbrev='MIT/LCS'>World Wide Web Consortium</organization>
<address>
<postal>
<street>MIT Laboratory for Computer Science, NE43-356</street>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code></postal>
<facsimile>+1(617)258-8682</facsimile>
<email>timbl@w3.org</email></address></author>
<author initials='R.T.' surname='Fielding' fullname='Roy T. Fielding'>
<organization abbrev='U.C. Irvine'>University of California, Irvine</organization>
<address>
<postal>
<street>Information and Computer Science</street>
<city>Irvine</city>
<region>CA</region>
<code>92697-3425</code></postal>
<facsimile>+1(949)824-1715</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization abbrev='Xerox Corporation'>Xerox PARC</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94034</code></postal>
<facsimile>+1(415)812-4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<date month='August' year='1998' />
<area>Applications</area>
<keyword>resource</keyword>
<keyword>URI</keyword>
</front>
<seriesInfo name='RFC' value='2396' />
</reference>

<reference anchor='RFC1123'>
<front>
<title>Requirements for Internet Hosts - Application and Support</title>
<author initials='R.' surname='Braden' fullname='Robert Braden'>
<organization>University of Southern California (USC), Information Sciences Institute</organization>
<address>
<postal>
<street>4676 Admiralty Way</street>
<city>Marina del Rey</city>
<region>CA</region>
<code>90292-6695</code>
<country>US</country></postal>
<phone>+1 213 822 1511</phone>
<email>Braden@ISI.EDU</email></address></author>
<date month='October' year='1989'></date></front>
<seriesInfo name='STD' value='3' />
<seriesInfo name='RFC' value='1123' />
</reference>

<reference anchor='RFC1808'>
<front>
<title>Relative Uniform Resource Locators</title>
<author initials='R.' surname='Fielding' fullname='Roy T. Fielding'>
<organization>University of California Irvine, Department of Information and Computer Science</organization>
<address>
<postal>
<street></street>
<city>Irvine</city>
<region>CA</region>
<code>92717-3425</code>
<country>US</country></postal>
<phone>+1 714 824 4049</phone>
<facsimile>+1 714 824 4056</facsimile>
<email>fielding@ics.uci.edu</email></address></author>
<date month='June' year='1995'></date>
</front>
<seriesInfo name='RFC' value='1808' />
</reference>

<reference anchor='RFC2046'>
<front>
<title abbrev='Media Types'>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types</title>
<author initials='N.' surname='Freed' fullname='Ned Freed'>
<organization>Innosoft International, Inc.</organization>
<address>
<postal>
<street>1050 East Garvey Avenue South</street>
<city>West Covina</city>
<region>CA</region>
<code>91790</code>
<country>US</country></postal>
<phone>+1 818 919 3600</phone>
<facsimile>+1 818 919 3614</facsimile>
<email>ned@innosoft.com</email></address></author>
<author initials='N.' surname='Borenstein' fullname='Nathaniel S. Borenstein'>
<organization>First Virtual Holdings</organization>
<address>
<postal>
<street>25 Washington Avenue</street>
<city>Morristown</city>
<region>NJ</region>
<code>07960</code>
<country>US</country></postal>
<phone>+1 201 540 8967</phone>
<facsimile>+1 201 993 3032</facsimile>
<email>nsb@nsb.fv.com</email></address></author>
<date month='November' year='1996'></date>
</front>
<seriesInfo name='RFC' value='2046' />
</reference>

<reference anchor="RFC2518">
<front>
<title>HTTP Extensions for Distributed Authoring -- WEBDAV</title>
<author initials="Y." surname="Goland" fullname="Y. Goland">
  <organization>Microsoft Corporation</organization>
  <address><email>yarong@microsoft.com</email></address>
</author>
<author initials="E." surname="Whitehead" fullname="E. J. Whitehead, Jr.">
  <organization abbrev="UC Irvine">Dept. Of Information and Computer
Science, University of California, Irvine</organization>
  <address><email>ejw@ics.uci.edu</email></address>
</author>
<author initials="A." surname="Faizi" fullname="A. Faizi">
  <organization abbrev="Netscape">Netscape</organization>
  <address><email>asad@netscape.com</email></address>
</author>
<author initials="S.R." surname="Carter" fullname="S. R. Carter">
  <organization abbrev="Novell">Novell</organization>
  <address><email>srcarter@novell.com</email></address>
</author>
<author initials="D." surname="Jensen" fullname="D. Jensen">
  <organization abbrev="Novell">Novell</organization>
  <address><email>dcjensen@novell.com</email></address>
</author>
<date month="February" year="1999"/>
</front>
<seriesInfo name="RFC" value="2518"/>
</reference>

<reference anchor='RFC0952'>
<front>
<title>DoD Internet host table specification</title>
<author initials='K.' surname='Harrenstien' fullname='K. Harrenstien'>
<organization>SRI International</organization></author>
<author initials='M.' surname='Stahl' fullname='M. Stahl'>
<organization>SRI International</organization></author>
<author initials='E.' surname='Feinler' fullname='E. Feinler'>
<organization>SRI International</organization></author>
<date month='October' day='1' year='1985' /></front>
<seriesInfo name='RFC' value='952' />
<format type='TXT' octets='12388' target='ftp://ftp.isi.edu/in-notes/rfc952.txt' />
</reference>

<reference anchor='RFC3513'>
<front>
<title abbrev='IPv6 Addressing'>Internet Protocol Version 6 (IPv6) Addressing Architecture</title>
<author initials='R.' surname='Hinden' fullname='Robert M. Hinden'>
<organization>Nokia</organization>
<address>
<postal>
<street>313 Fairchild Drive</street>
<street>Mountainview</street>
<street>CA 94043</street>
<country>USA</country></postal>
<phone>+1 650-625-2004</phone>
<email>hinden@iprg.nokia.com</email></address></author>
<author initials='S.' surname='Deering' fullname='Stephen E. Deering'>
<organization>Cisco Systems, Inc.</organization>
<address>
<postal>
<street>170 West Tasman Drive</street>
<street>San Jose</street>
<street>CA 95134-1706</street>
<country>USA</country></postal>
<phone>+1 408 527-8213</phone>
<email>deering@cisco.com</email></address></author>
<date month='April' year='2003' />
<area>Internet</area>
<keyword>internet protocol version 6</keyword>
<keyword>IPv6</keyword>
<keyword>addressing</keyword>
</front>
<seriesInfo name='RFC' value='3513' />
<format type='TXT' octets='53920' target='ftp://ftp.isi.edu/in-notes/rfc3513.txt' />
</reference>

<reference anchor='RFC2732'>
<front>
<title abbrev='IPv6 Literal Addresses in URL&apos;s'>Format for Literal IPv6 Addresses in URL's</title>
<author initials='R.M.' surname='Hinden' fullname='Robert M. Hinden'>
<organization>Nokia</organization>
<address>
<postal>
<street>313 Fairchild Drive</street>
<city>Mountain View</city>
<region>CA</region>
<code>94043</code>
<country>US</country></postal>
<phone>+1 650 625 2004</phone>
<email>hinden@iprg.nokia.com</email></address></author>
<author initials='B.E.' surname='Carpenter' fullname='Brian E. Carpenter'>
<organization>IBM, iCAIR</organization>
<address>
<postal>
<street>1890 Maple Avenue</street>
<street>Suite 150</street>
<city>Evanston</city>
<region>IL</region>
<code>60201</code>
<country>US</country></postal>
<email>brian@icair.org</email></address></author>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>AT&amp;T Labs</organization>
<address>
<postal>
<street>75 Willow Road</street>
<city>Menlo Park</city>
<region>CA</region>
<code>94025</code>
<country>US</country></postal>
<email>LMM@acm.org</email></address></author>
<date month='December' year='1999' />
</front>
<seriesInfo name='RFC' value='2732' />
<format type='TXT' octets='7984' target='ftp://ftp.isi.edu/in-notes/rfc2732.txt' />
</reference>

<reference anchor='RFC1736'>
<front>
<title abbrev='Recommendations for IRLs'>Functional Recommendations for Internet Resource Locators</title>
<author initials='J.' surname='Kunze' fullname='John A. Kunze'>
<organization>Information Systems and Technology</organization>
<address>
<postal>
<street>293 Evans Hall</street>
<city>Berkeley</city>
<region>CA</region>
<code>94720</code>
<country>US</country></postal>
<phone>+1 510 642 1530</phone>
<facsimile>+1 510 643 5385</facsimile>
<email>jak@violet.berkeley.edu</email></address></author>
<date month='February' year='1995'></date></front>
<seriesInfo name='RFC' value='1736' />
</reference>

<reference anchor='RFC1737'>
<front>
<title abbrev='Requirements for Uniform Resource Names'>Functional Requirements for Uniform Resource Names</title>
<author initials='L.' surname='Masinter' fullname='Larry Masinter'>
<organization>Xerox Palo Alto Research Center</organization>
<address>
<postal>
<street>3333 Coyote Hill Road</street>
<city>Palo Alto</city>
<region>CA</region>
<code>94304</code>
<country>US</country></postal>
<phone>+1 415 812 4365</phone>
<facsimile>+1 415 812 4333</facsimile>
<email>masinter@parc.xerox.com</email></address></author>
<author initials='K.' surname='Sollins' fullname='Karen Sollins'>
<organization>MIT Laboratory for Computer Science</organization>
<address>
<postal>
<street>545 Technology Square</street>
<city>Cambridge</city>
<region>MA</region>
<code>02139</code>
<country>US</country></postal>
<phone>+1 617 253 2673</phone>
<email>sollins@lcs.mit.edu</email></address></author>
<date month='December' year='1994'></date></front>
<seriesInfo name='RFC' value='1737' />
</reference>

<reference anchor='RFC2141'>
<front>
<title>URN Syntax</title>
<author initials='R.' surname='Moats' fullname='Ryan Moats'>
<organization>AT&amp;T</organization>
<address>
<postal>
<street>15621 Drexel Circle</street>
<street>Omaha</street>
<street>NE 68135-2358</street>
<country>USA</country></postal>
<phone>+1 402 894-9456</phone>
<email>jayhawk@ds.internic.net</email></address></author>
<date month='May' year='1997' />
<area>Applications</area>
<keyword>URN</keyword>
<keyword>uniform resource</keyword>
<abstract>
<t>
   Uniform Resource Names (URNs) are intended to serve as persistent,
   location-independent, resource identifiers. This document sets
   forward the canonical syntax for URNs.  A discussion of both existing
   legacy and new namespaces and requirements for URN presentation and
   transmission are presented.  Finally, there is a discussion of URN
   equivalence and how to determine it.
</t></abstract>
</front>
<seriesInfo name='RFC' value='2141' />
<format type='TXT' octets='14077' target='ftp://ftp.isi.edu/in-notes/rfc2141.txt' />
<format type='HTML' octets='32020' target='http://xml.resource.org/public/rfc/html/rfc2141.html' />
<format type='XML' octets='17551' target='http://xml.resource.org/public/rfc/xml/rfc2141.xml' />
</reference>

<reference anchor='RFC1034'>
<front>
<title abbrev='Domain Concepts and Facilities'>Domain names - concepts and facilities</title>
<author initials='P.' surname='Mockapetris' fullname='P. Mockapetris'>
<organization>Information Sciences Institute (ISI)</organization></author>
<date month='November' year='1987'></date></front>
<seriesInfo name='STD' value='13' />
<seriesInfo name='RFC' value='1034' />
</reference>

<reference anchor='RFC2110'>
<front>
<title abbrev='MHTML'>MIME E-mail Encapsulation of Aggregate Documents, such as HTML (MHTML)</title>
<author initials='J.' surname='Palme' fullname='Jacob Palme'>
<organization>Stockholm University and KTH</organization>
<address>
<postal>
<street>Electrum 230</street>
<street>S-164 40 Kista</street>
<country>Sweden</country></postal>
<phone>+46-8-16 16 67</phone>
<facsimile>+46-8-783 08 29</facsimile>
<email>jpalme@dsv.su.se</email></address></author>
<author initials='A.' surname='Hopmann' fullname='Alex Hopmann'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>3590 North First Street</street>
<street>Suite 300</street>
<street>San Jose</street>
<street>CA 95134</street>
<street>Working group chairman:</street></postal>
<email>alexhop@microsoft.com</email></address></author>
<date month='March' year='1997'></date>
<area>Applications</area>
<keyword>encapsulate</keyword>
<keyword>hypertext markup language</keyword>
<keyword>mail</keyword>
<keyword>multipurpose internet mail extensions</keyword>
</front>
<seriesInfo name='RFC' value='2110' />
</reference>

<reference anchor='RFC2717'>
<front>
<title>Registration Procedures for URL Scheme Names</title>
<author initials='R.' surname='Petke' fullname='Rich Petke'>
<organization>UUNET Technologies</organization>
<address>
<postal>
<street>5000 Britton Road</street>
<street>P. O. Box 5000</street>
<city>Hilliard</city>
<region>OH</region>
<code>43026-5000</code>
<country>US</country></postal>
<phone>+1 614 723 4157</phone>
<facsimile>+1 614 723 8407</facsimile>
<email>rpetke@wcom.net</email></address></author>
<author initials='I.' surname='King' fullname='Ian King'>
<organization>Microsoft Corporation</organization>
<address>
<postal>
<street>One Microsoft Way</street>
<city>Redmond</city>
<region>WA</region>
<code>98052-6399</code>
<country>US</country></postal>
<phone>+1 425 703 2293</phone>
<facsimile>+1 425 936 7329</facsimile>
<email>iking@microsoft.com</email></address></author>
<date month='November' year='1999' />
</front>
<seriesInfo name='BCP' value='35' />
<seriesInfo name='RFC' value='2717' />
</reference>

<reference anchor='HTML'>
<front>
<title>Hypertext Markup Language (HTML 4.01) Specification</title>
<author initials='D.' surname='Raggett' fullname='Dave Raggett'>
<organization>W3C/MIT</organization>
</author>
<author initials='A.' surname='Le Hors' fullname='Arnaud Le Hors'>
<organization>W3C/Inria</organization>
</author>
<author initials='I.' surname='Jacobs' fullname='Ian Jacobs'>
<organization>W3C/MIT</organization>
</author>
<date month='December' year='1999'></date>
</front>
<format type='HTML' target='http://www.w3.org/TR/html401/' />
</reference>

<reference anchor='Siedzik'>
<front>
<title>Semantic Attacks: What's in a URL?</title>
<author initials='R.' surname='Siedzik' fullname='Richard Siedzik'>
<organization>SANS Institute</organization>
</author>
<date day='6' month='April' year='2001'></date>
</front>
<format type='HTML' target='http://www.sans.org/rr/threats/semantic.php' />
</reference>

<reference anchor='UTF-8'>
<front>
<title abbrev='UTF-8'>UTF-8, a transformation format of ISO 10646</title>
<author initials='F.' surname='Yergeau' fullname='Francois Yergeau'>
<organization>Alis Technologies</organization>
<address>
<postal>
<street>100, boul. Alexis-Nihon</street>
<street>Suite 600</street>
<city>Montreal</city>
<region>Quebec</region>
<code>H4M 2P2</code>
<country>CA</country></postal>
<phone>+1 514 747 2547</phone>
<facsimile>+1 514 747 2561</facsimile>
<email>fyergeau@alis.com</email></address></author>
<date month='January' year='1998'></date>
</front>
<seriesInfo name='RFC' value='2279' />
</reference>
  
</references>

<section title="Collected ABNF for URI" anchor="collected-abnf">
<figure><artwork>
To be filled-in later.
</artwork></figure>
</section>

<section title="Parsing a URI Reference with a Regular Expression" anchor="regexp">
<t>
   As described in Section 4.3, the generic URI syntax is not sufficient
   to disambiguate the components of some URIs.  Since the
   "greedy algorithm" described in that section is identical to the
   disambiguation method used by POSIX regular expressions, it is
   natural and commonplace to use a regular expression for parsing the
   potential four components and fragment identifier of a URI reference.
</t>
<t>
   The following line is the regular expression for breaking-down a
   well-formed URI reference into its components.
</t>
<figure><artwork>
   ^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?
    12            3  4          5       6  7        8 9
</artwork></figure>
<t>
   The numbers in the second line above are only to assist readability;
   they indicate the reference points for each subexpression (i.e., each
   paired parenthesis).  We refer to the value matched for subexpression
   &lt;n&gt; as $&lt;n&gt;.  For example, matching the above expression to
</t>
<figure><artwork>
   http://www.ics.uci.edu/pub/ietf/uri/#Related
</artwork></figure>
<t>
   results in the following subexpression matches:
</t>
<figure><artwork>
   $1 = http:
   $2 = http
   $3 = //www.ics.uci.edu
   $4 = www.ics.uci.edu
   $5 = /pub/ietf/uri/
   $6 = &lt;undefined&gt;
   $7 = &lt;undefined&gt;
   $8 = #Related
   $9 = Related
</artwork></figure>
<t>
   where &lt;undefined&gt; indicates that the component is not present, as is
   the case for the query component in the above example.  Therefore, we
   can determine the value of the four components and fragment as
</t>
<figure><artwork>
   scheme    = $2
   authority = $4
   path      = $5
   query     = $7
   fragment  = $9
</artwork></figure>
<t>
   and, going in the opposite direction, we can recreate a URI reference
   from its components using the algorithm of Section 5.2.
</t>
</section>

<section title="Examples of Resolving Relative URI References" anchor="relative-examples">
<t>
   Within an object with a well-defined base URI of
</t>
<figure><artwork>
   http://a/b/c/d;p?q
</artwork></figure>
<t>
   the relative URI would be resolved as follows:
</t>

<section title="Normal Examples" anchor="relative-normal">
<figure><artwork>
   g:h           =  g:h
   g             =  http://a/b/c/g
   ./g           =  http://a/b/c/g
   g/            =  http://a/b/c/g/
   /g            =  http://a/g
   //g           =  http://g
   ?y            =  http://a/b/c/d;p?y
   g?y           =  http://a/b/c/g?y
   #s            =  (current document)#s
   g#s           =  http://a/b/c/g#s
   g?y#s         =  http://a/b/c/g?y#s
   ;x            =  http://a/b/c/;x
   g;x           =  http://a/b/c/g;x
   g;x?y#s       =  http://a/b/c/g;x?y#s
   .             =  http://a/b/c/
   ./            =  http://a/b/c/
   ..            =  http://a/b/
   ../           =  http://a/b/
   ../g          =  http://a/b/g
   ../..         =  http://a/
   ../../        =  http://a/
   ../../g       =  http://a/g
</artwork></figure>
</section>

<section title="Abnormal Examples" anchor="relative-abnormal">
<t>
   Although the following abnormal examples are unlikely to occur in
   normal practice, all URI parsers should be capable of resolving them
   consistently.  Each example uses the same base as above.
</t>
<t>
   An empty reference refers to the start of the current document.
</t>
<figure><artwork>
   &lt;&gt;            =  (current document)
</artwork></figure>
<t>
   Parsers must be careful in handling the case where there are more
   relative path ".." segments than there are hierarchical levels in the
   base URI's path.  Note that the ".." syntax cannot be used to change
   the authority component of a URI.
</t>
<figure><artwork>
   ../../../g    =  http://a/../g
   ../../../../g =  http://a/../../g
</artwork></figure>
<t>
   In practice, some implementations strip leading relative symbolic
   elements (".", "..") after applying a relative URI calculation, based
   on the theory that compensating for obvious author errors is better
   than allowing the request to fail.  Thus, the above two references
   will be interpreted as "http://a/g" by some implementations.
</t>
<t>
   Similarly, parsers must avoid treating "." and ".." as special when
   they are not complete components of a relative path.
</t>
<figure><artwork>
   /./g          =  http://a/./g
   /../g         =  http://a/../g
   g.            =  http://a/b/c/g.
   .g            =  http://a/b/c/.g
   g..           =  http://a/b/c/g..
   ..g           =  http://a/b/c/..g
</artwork></figure>
<t>
   Less likely are cases where the relative URI uses unnecessary or
   nonsensical forms of the "." and ".." complete path segments.
</t>
<figure><artwork>
   ./../g        =  http://a/b/g
   ./g/.         =  http://a/b/c/g/
   g/./h         =  http://a/b/c/g/h
   g/../h        =  http://a/b/c/h
   g;x=1/./y     =  http://a/b/c/g;x=1/y
   g;x=1/../y    =  http://a/b/c/y
</artwork></figure>
<t>
   Some applications fail to separate the reference's query and/or
   fragment components from a relative path before merging it with
   the base path.  This error is rarely noticed, since typical usage
   of a fragment never includes the hierarchy ("/") character, and the
   query component is not normally used within relative references.
</t>
<figure><artwork>
   g?y/./x       =  http://a/b/c/g?y/./x
   g?y/../x      =  http://a/b/c/g?y/../x
   g#s/./x       =  http://a/b/c/g#s/./x
   g#s/../x      =  http://a/b/c/g#s/../x
</artwork></figure>
<t>
   Some parsers allow the scheme name to be present in a relative URI if
   it is the same as the base URI scheme.  This is considered to be a
   loophole in prior specifications of partial URI <xref target="RFC1630"/>.
   Its use should be avoided, but is allowed for backwards compatibility.
</t>
<figure><artwork>
   http:g        =  http:g           ; for validating parsers
                 /  http://a/b/c/g   ; for backwards compatibility
</artwork></figure>

</section>
</section>

<section title="Embedding the Base URI in HTML documents" anchor="html">
<t>
   It is useful to consider an example of how the base URI of a document
   can be embedded within the document's content.  In this appendix, we
   describe how documents written in the Hypertext Markup Language
   (HTML) <xref target="HTML"/> can include an embedded base URI.  This appendix
   does not form a part of the URI specification and should not be
   considered as anything more than a descriptive example.
</t>
<t>
   HTML defines a special element "BASE" which, when present in the
   "HEAD" portion of a document, signals that the parser should use the
   BASE element's "HREF" attribute as the base URI for resolving any
   relative URI.  The "HREF" attribute must be an absolute URI.  Note
   that, in HTML, element and attribute names are case-insensitive.  For
   example:
</t>
<figure><artwork>
   &lt;!doctype html public "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
   &lt;HTML&gt;&lt;HEAD&gt;
   &lt;TITLE&gt;An example HTML document&lt;/TITLE&gt;
   &lt;BASE href="http://www.example.com/Test/a/b/c"&gt;
   &lt;/HEAD&gt;&lt;BODY&gt;
   ... &lt;A href="../x"&gt;a hypertext anchor&lt;/A&gt; ...
   &lt;/BODY&gt;&lt;/HTML&gt;
</artwork></figure>
<t>
   A parser reading the example document should interpret the given
   relative URI "../x" as representing the absolute URI
</t>
<figure><artwork>
   &lt;http://www.example.com/Test/a/x&gt;
</artwork></figure>
<t>
   regardless of the context in which the example document was obtained.
</t>
</section>

<section title="Recommendations for Delimiting URI in Context" anchor="delimiting">
<t>
   URIs are often transmitted through formats that do not provide a clear
   context for their interpretation.  For example, there are many
   occasions when a URI is included in plain text; examples include text
   sent in electronic mail, USENET news messages, and, most importantly,
   printed on paper.  In such cases, it is important to be able to
   delimit the URI from the rest of the text, and in particular from
   punctuation marks that might be mistaken for part of the URI.
</t>
<t>
   In practice, URI are delimited in a variety of ways, but usually
   within double-quotes "http://example.com/", angle brackets
   &lt;http://example.com/&gt;, or just using whitespace
</t>
<figure><artwork>
   http://example.com/
</artwork></figure>
<t>
   These wrappers do not form part of the URI.
</t>
<t>
   In the case where a fragment identifier is associated with a URI
   reference, the fragment would be placed within the brackets as well
   (separated from the URI with a "#" character).
</t>
<t>
   In some cases, extra whitespace (spaces, linebreaks, tabs, etc.) may
   need to be added to break a long URI across lines. The whitespace
   should be ignored when extracting the URI.
</t>
<t>
   No whitespace should be introduced after a hyphen ("-") character.
   Because some typesetters and printers may (erroneously) introduce a
   hyphen at the end of line when breaking a line, the interpreter of a
   URI containing a line break immediately after a hyphen should ignore
   all unescaped whitespace around the line break, and should be aware
   that the hyphen may or may not actually be part of the URI.
</t>
<t>
   Using &lt;&gt; angle brackets around each URI is especially recommended as
   a delimiting style for a URI that contains whitespace.
</t>
<t>
   The prefix "URL:" (with or without a trailing space) was formerly
   recommended as a way to help distinguish a URI from other bracketed
   designators, though it is not commonly used in practice and is
   no longer recommended.
</t>
<t>
   For robustness, software that accepts user-typed URI should attempt
   to recognize and strip both delimiters and embedded whitespace.
</t>
<figure><preamble>
For example, the text:
</preamble><artwork>
   Yes, Jim, I found it under "http://www.w3.org/Addressing/",
   but you can probably pick it up from &lt;ftp://ds.internic.
   net/rfc/&gt;.  Note the warning in &lt;http://www.ics.uci.edu/pub/
   ietf/uri/historical.html#WARNING&gt;.
</artwork></figure>
<t>
contains the URI references
</t>
<figure><artwork>
   http://www.w3.org/Addressing/
   ftp://ds.internic.net/rfc/
   http://www.ics.uci.edu/pub/ietf/uri/historical.html#WARNING
</artwork></figure>
</section>

<section title="Abbreviated URIs" anchor="abbreviated">
<t>
   The URI syntax was designed for unambiguous reference to network
   resources and extensibility via the URI scheme.  However, as URI
   identification and usage have become commonplace, traditional media
   (television, radio, newspapers, billboards, etc.) have increasingly
   used abbreviated URI references.  That is, a reference consisting of
   only the authority and path portions of the identified resource, such
   as
</t>
<figure><artwork>
   www.w3.org/Addressing/
</artwork></figure>
<t>
   or simply the DNS hostname on its own.  Such references are primarily
   intended for human interpretation rather than machine, with the
   assumption that context-based heuristics are sufficient to complete
   the URI (e.g., most hostnames beginning with "www" are likely to have
   a URI prefix of "http://").  Although there is no standard set of
   heuristics for disambiguating abbreviated URI references, many client
   implementations allow them to be entered by the user and
   heuristically resolved.  It should be noted that such heuristics may
   change over time, particularly when new URI schemes are introduced.
</t>
<t>
   Since an abbreviated URI has the same syntax as a relative URI path,
   abbreviated URI references cannot be used in contexts where relative
   URIs are expected.  This limits the use of abbreviated URIs to places
   where there is no defined base URI, such as dialog boxes and off-line
   advertisements.
</t>
</section>


<section title="Summary of Non-editorial Changes" anchor="changes">

<section title="Additions" anchor="additions">
<t>
IPv6 literals have been added to the list of possible identifiers
for the host portion of a authority component, as described by
<xref target="RFC2732"/>, with the addition of "[" and "]" to
the reserved, uric, and uric-no-slash sets.  Square brackets are
now specified as reserved for the authority component and not
allowed in the URI syntax except for their use as delimiters for an
IPv6reference within host.  In order to make this change without
changing the technical definition of the path, query, and fragment
components, those rules were redefined to directly specify the
characters allowed rather than continuing to be defined in terms
of uric.
</t>
<t>
Since <xref target="RFC2732"/> defers to <xref target="RFC3513"/>
for definition of an IPv6 literal address, which unfortunately lacks
an ABNF description of IPv6address, we created a new ABNF rule
for IPv6address that matches the text representations defined by
Section 2.2 of <xref target="RFC3513"/>.  Likewise, the definition
of IPv4address has been improved in order to limit each decimal
octet to the range 0-255, and the definition of hostname has been
improved to better specify length limitations and partially-qualified
domain names.
</t>
<t>
Section 6 on URI normalization and comparison has been completely
rewritten and extended using input from Tim Bray and discussion within
the W3C Technical Architecture Group.  Likewise, section 2.1 on the
encoding of characters has been replaced.
</t>
<t>
An ABNF production for URI has been introduced to correspond to the
common usage of the term: an absolute URI with optional fragment.
</t>
</section>

<section title="Modifications from RFC 2396" anchor="modifications">
<t>
The ad-hoc BNF syntax has been replaced with the ABNF of
<xref target="RFC2234"/>.  This change required all rule names that
formerly included underscore characters to be renamed with a dash instead.
Likewise, absoluteURI and relativeURI have been changed to absolute-URI
and relative-URI, respectively, for consistency.
</t>
<t>
Section 2.2 on reserved characters has been rewritten to clearly explain
what characters are reserved, when they are reserved, and why they are
reserved even when not used as delimiters by the generic syntax.
Likewise, the section on escaped characters has been rewritten, and
URI normalizers are now given license to unescape any octets
corresponding to unreserved characters.  The crosshatch ("#") character
has been moved back from the excluded delims to the reserved set.
</t>
<t>
I am in the midst of rewriting the ABNF for URI to make it more
friendly to LALR parsers and significantly reduce complexity.
As a result, the layout form of syntax description has been removed,
along with the opaque-part and uric-no-slash ABNF productions.
All references to "opaque" URIs have been replaced with a better
description of how the path component may be opaque to hierarchy.
The fragment identifier has been moved back into the URI components,
though I am still working on the text.
</t>
<t>
The ABNF of hier-part and relative-URI (Section 3) has been corrected
to allow a relative URI path to be empty.  This also allows an
absolute-URI to consist of nothing after the "scheme:", as is present
in practice with the "DAV:" namespace <xref target="RFC2518"/> and
the "about:" URI used by many browser implementations.
The ambiguity regarding the parsing of net-path, abs-path, and rel-path
is now fully explained and disambiguated in the same section.
</t>
<t>
Registry-based naming authorities that use the hierarchical authority
syntax component are now limited to DNS hostnames, since those have
been the only such URIs in deployment.  This change was necessary to
enable internationalized domain names to be processed in their native
character encodings at the application layers above URI processing.
The reg_name, server, and hostport productions have been removed
to simplify parsing of the URI syntax.
</t>
<t>
The ABNF of qualified has been simplified to remove a parsing ambiguity
without changing the allowed syntax.  The toplabel production has been
removed because it served no useful purpose.
The ambiguity regarding the parsing of host as IPv4address or hostname
is now fully explained and disambiguated in the same section.
</t>
<t>
The resolving relative references algorithm of <xref target="RFC2396"/>
has been rewritten using pseudocode for this revision to improve clarity
and fix the following issues:
  <list style="symbols">
  <t>
    <xref target="RFC2396"/> section 5.2, step 6a, failed to account for
    a base URI with no path.
  </t>
  <t>
    Restored the behavior of <xref target="RFC1808"/> where, if the
    reference contains an empty path and a defined query component,
    then the target URI inherits the base URI's path component.
  </t>
  </list>
</t>
</section>
</section>
</back>
</rfc>
