Uniform Resource Identifiers Working Group               R. T. Fielding
INTERNET-DRAFT                                                UC Irvine
Expires July 9, 1995                                    January 9, 1995


                  Relative Uniform Resource Locators
                 <draft-ietf-uri-relative-url-03.txt>


Status of this Memo

   This document is an Internet-Draft.  Internet-Drafts are working
   documents of the Internet Engineering Task Force (IETF), its areas,
   and its working groups.  Note that other groups may also distribute
   working documents as Internet-Drafts.

   Internet-Drafts are draft documents valid for a maximum of six
   months and may be updated, replaced, or obsoleted by other
   documents at any time.  It is inappropriate to use Internet-
   Drafts as reference material or to cite them other than as
   ``work in progress.''

   To learn the current status of any Internet-Draft, please check
   the ``1id-abstracts.txt'' listing contained in the Internet-
   Drafts Shadow Directories on ftp.is.co.za (Africa),
   nic.nordu.net (Europe), munnari.oz.au (Pacific Rim),
   ds.internic.net (US East Coast), or ftp.isi.edu (US West Coast).

   Distribution of this document is unlimited.  Please send comments
   to the author, Roy T. Fielding <fielding@ics.uci.edu>, or to the
   URI working group (URI-WG) of the Internet Engineering Task Force
   (IETF) at <uri@bunyip.com>. Discussions of the group are archived at
   <URL:http://www.acl.lanl.gov/URI/archive/uri-archive.index.html>.


Abstract

   A Uniform Resource Locator (URL) is a compact representation of the
   location and access method for a resource available via the Internet.
   When embedded within a base document, a URL in its absolute form may
   contain a great deal of information which is already known from the
   context of that base document's retrieval, including the scheme,
   network location, and parts of the url-path.  In situations where the
   base URL is well-defined and known to the parser (human or machine),
   it is useful to be able to embed URL references which inherit that
   context rather than re-specifying it in every instance.  This
   document defines the syntax and semantics for such Relative Uniform
   Resource Locators.


1.  Introduction

   This work is derived from concepts introduced by the World-Wide Web
   global information initiative, whose use of such objects dates from
   1990 and is described in "Universal Resource Identifiers in WWW",
   RFC 1630 [3].  This document is a companion to RFC 1738, 
   "Uniform Resource Locators (URL)" [4], which specifies the
   syntax and semantics of absolute URLs.  A URL is "absolute" if it
   can be interpreted consistently and unambiguously, with global scope,
   independent of any other URL.

   This document describes the syntax and semantics for "relative"
   Uniform Resource Locators (relative URLs): a compact representation
   of the location of a resource relative to an absolute base URL.
   The syntax of relative URLs is a subset of that defined for
   Uniform Resource Locators.

   A common use for Uniform Resource Locators is to embed them within
   a document (referred to as the "base" document) for the purpose of
   identifying other Internet-accessible resources.  For example, in
   hypertext documents, URLs can be used as the identifiers for
   hypertext link destinations. 

   Absolute URLs contain a great deal of information which may already
   be known from the context of the base document's retrieval,
   including the scheme, network location, and parts of the URL path.
   In situations where the base URL is well-defined and known, it is
   useful to be able to embed a URL reference which inherits that
   context rather than re-specifying it within each instance.
   Similarly, relative URLs can be used within data-entry dialogs to
   decrease the number of characters necessary to describe a location.

   It is often the case that a group or "tree" of documents has been
   constructed to serve a common purpose; the vast majority of URLs
   within these documents point to locations within the tree rather
   than outside of it.  Similarly, documents located at a particular
   Internet site are much more likely to refer to other resources at
   that site than to resources at remote sites.

   Relative addressing of URLs allows document trees to be partially
   independent of their location and access scheme.  For instance,
   if they refer to each other using relative URLs, it is possible for
   a single set of documents to be simultaneously accessible and, if
   hypertext, traversable via each of the "file", "http", and "ftp"
   schemes. Furthermore, document trees can be moved, as a whole,
   without changing any of the embedded URLs.  Experience within the
   World-Wide Web has demonstrated that the ability to perform relative
   referencing is necessary for the long-term usability of embedded
   URLs.

2.  Relative URL Syntax

   The syntax for relative URLs is a subset of that for absolute
   URLs [4].  Relative URLs are distinct in that some prefix of the URL
   is missing and certain path components ("." and "..") have a special
   meaning when interpreting a relative path.  Because a relative URL
   may appear in any context that could hold an absolute URL, systems
   that support relative URLs must be able to recognize them as part
   of the URL parsing process. 

   Although this document does not seek to define the overall URL
   syntax, some discussion of it is necessary in order to describe the
   parsing of relative URLs.  In particular, base documents can only
   make use of relative URLs when their base URL fits within the generic
   syntax described below.  Although some URL schemes do not require
   this generic syntax, it is assumed that any document which contains
   a relative reference does have a base URL that obeys the syntax.
   In other words, relative URLs cannot be used within documents that
   have abnormal base URLs.

2.1.  URL Syntactic Components

   The URL syntax is dependent upon the scheme.  Some schemes use
   reserved characters like "?" and ";" to indicate special components,
   while others just consider them to be part of the path.  However,
   there is enough uniformity in the use of URLs to allow a parser
   to resolve relative URLs based upon a single, generic syntax.
   This generic syntax consists of six components:

      <scheme>://<net_loc>/<path>;<params>?<query>#<fragment>

   each of which, except <scheme>, may be absent from a particular URL.
   These components are defined as follows (a complete BNF is provided
   in Section 2.2):

      scheme ":"   ::= scheme name, as per Section 2.1 of [4].

      "//" net_loc ::= network location and login information, as per
                       Section 3.1 of [4].

      "/" path     ::= URL path, as per Section 3.1 of [4].

      ";" params   ::= object parameters (e.g. ";type=a" as in 
                       Section 3.2.2 of [4]).

      "?" query    ::= query information, as per Section 3.3 of [4].

      "#" fragment ::= fragment identifier.

   The order of the components is important.  If both <params> and
   <query> are present, the <query> information must occur after the
   <params>.

2.2.  BNF for Relative URLs

   This is a BNF-like description of the Relative Uniform Resource
   Locator syntax, using the conventions of RFC 822 [7], except that
   "|" is used to designate alternatives.  Briefly, literals are quoted
   with "", parentheses "(" and ")" are used to group elements, optional
   elements are enclosed in [brackets], and elements may be preceded
   with <n>* to designate n or more repetitions of the following
   element; n defaults to 0.

   URL         = ( absoluteURL | relativeURL ) [ "#" fragment ]

   absoluteURL = scheme ":" *( uchar | reserved )

   relativeURL = net_path | abs_path | rel_path

   net_path    = "//" net_loc [ abs_path ]
   abs_path    = "/"  rel_path
   rel_path    = [ path ] [ ";" params ] [ "?" query ]

   path        = fsegment *( "/" segment )
   fsegment    = 1*pchar
   segment     =  *pchar

   params      = param *( ";" param )
   param       = *( pchar | "/" )

   scheme      = 1*( alpha | digit | "+" | "-" | "." )
   net_loc     =  *( pchar | ";" | "?" )
   query       =  *( uchar | reserved )
   fragment    =  *( uchar | reserved )

   pchar       = uchar | ":" | "@" | "&" | "="
   uchar       = unreserved | escape
   unreserved  = alpha | digit | safe | extra | national

   escape      = "%" hex hex
   hex         = digit | "A" | "B" | "C" | "D" | "E" | "F" |
		         "a" | "b" | "c" | "d" | "e" | "f"

   alpha       = lowalpha | hialpha
   lowalpha    = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                 "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                 "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"
   hialpha     = "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" | 
                 "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" | 
                 "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"

   digit       = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                 "8" | "9"

   safe        = "$" | "-" | "_" | "." | "+"
   extra       = "!" | "*" | "'" | "(" | ")" | ","
   national    = "{" | "}" | "|" | "\" | "^" | "~" | "[" | "]" | "`"
   reserved    = ";" | "/" | "?" | ":" | "@" | "&" | "="
   punctuation = "<" | ">" | "#" | "%" | <">


2.3.  Specific Schemes and their Syntactic Categories

   Each URL scheme has its own rules regarding the presence or absence
   of the syntactic components described in Section 2.1 and 2.2.
   In addition, some schemes are never appropriate for use with relative
   URLs.  However, since relative URLs will only be used within contexts
   in which they are useful, these scheme-specific differences can be
   ignored by the resolution process.

   Within this section, we include as examples only those schemes that
   have a defined URL syntax in [4].  The following schemes are never
   used with relative URLs:

      mailto     Electronic Mail [7]
      telnet     TELNET Protocol for Interactive Sessions [13]

   Some URL schemes allow the use of reserved characters for purposes
   outside the generic grammar given above.  However, such use is rare.
   Relative URLs can be used with these schemes whenever the applicable
   base URL is restricted to the generic syntax.

      gopher     Gopher and Gopher+ Protocols [1, 2]
      news       USENET news [9]
      nntp       USENET news using NNTP access [10]
      prospero   Prospero Directory Service [12]
      wais       Wide Area Information Servers Protocol [8,15]

   Finally, the following schemes can always be parsed using the generic
   syntax.

      file       Host-specific Files
      ftp        File Transfer Protocol [14]
      http       Hypertext Transfer Protocol [6]

   It is recommended that new schemes be designed to be parsable via
   the generic syntax if they are intended to be used with relative
   URLs.  A description of the allowed relative forms should be included
   when a new scheme is registered, as per Section 4 of [4].

2.4.  Parsing a URL

   An accepted method for parsing URLs is necessary to disambiguate the
   generic URL syntax of Section 2.2 and to describe the algorithm for
   resolving relative URLs presented in Section 4.  This section
   describes the parsing rules for breaking down a URL (relative or
   absolute) into the component parts described in Section 2.1.  The
   rules assume that the URL has already been separated from any
   surrounding text and copied to a "parse string".  The rules are
   listed in the order in which they would be applied by the parser.

2.4.1.  Parsing the Fragment Identifier

   If the parse string contains a crosshatch "#" character, then the
   substring after the first (left-most) crosshatch "#" and up to the
   end of the parse string is the <fragment> identifier.  If the
   crosshatch is the last character, or no crosshatch is present, then
   the fragment identifier is empty.  The matched substring, including
   the crosshatch character, is removed from the parse string before
   continuing.

   Note that the fragment identifier is not considered part of the URL.
   However, since it is often attached to the URL, parsers must be able
   to recognize and set aside fragment identifiers as part of the
   process.

2.4.2.  Parsing the Scheme

   If the parse string contains a colon ":" after the first character
   and before any characters not allowed as part of a scheme name
   (i.e. any not an alphanumeric, plus "+", period ".", or hyphen "-"),
   the <scheme> of the URL is the substring of characters up to but not
   including the first colon.  These characters and the colon are then
   removed from the parse string before continuing. 
 
2.4.3.  Parsing the Network Location/Login

   If the parse string begins with a double-slash "//", then the
   substring of characters after the double-slash and up to, but not
   including, the next slash "/" character is the network location/login
   (<net_loc>) of the URL.  If no trailing slash "/" is present, the
   entire remaining parse string is assigned to <net_loc>.  The 
   double-slash and <net_loc> are removed from the parse string before
   continuing. 
 
2.4.4.  Parsing the Query Information

   If the parse string contains a question mark "?" character, then the
   substring after the first (left-most) question mark "?" and up to the
   end of the parse string is the <query> information.  If the question
   mark is the last character, or no question mark is present, then the
   query information is empty.  The matched substring, including the
   question mark character, is removed from the parse string before
   continuing.

2.4.5.  Parsing the Parameters

   If the parse string contains a semicolon ";" character, then the
   substring after the first (left-most) semicolon ";" and up to the
   end of the parse string is the parameters (<params>).  If the
   semicolon is the last character, or no semicolon is present, then
   <params> is empty.  The matched substring, including the semicolon
   character, is removed from the parse string before continuing.

2.4.6.  Parsing the Path

   After the above steps, all that is left of the parse string is
   the URL <path> and the slash "/" that may precede it.  Even though
   the initial slash is not part of the URL path, the parser must
   remember whether or not it was present so that later processes
   can differentiate between relative and absolute paths.  Often this
   is done by simply storing the preceding slash along with the path.

3.  Establishing a Base URL

   In order for relative URLs to be usable within a base document,
   the absolute "base URL" of that document must be known to the
   parser.  There are three methods for obtaining the base URL of
   a document, listed here in order of precedence.

3.1.  Base URL within Document Content

   Within certain document media types, the base URL of the document
   can be embedded within the content itself such that it can be
   readily obtained by a parser.  This can be useful for descriptive
   documents, such as tables of content, which may be transmitted to
   others through protocols other than their usual retrieval context
   (e.g. E-Mail or USENET news).

   It is beyond the scope of this document to specify how, for each
   media type, the base URL can be embedded.  However, an example of
   how this is done for the Hypertext Markup Language (HTML) [5] is
   provided in an Appendix (Section 10).

3.2.  Base URL within Message Headers

   For schemes which make use of message headers like those described
   in RFC 822 [7], a second method for identifying the base URL of a
   document is to include that URL in the message headers.  It is
   recommended that the format of this header be:

      Base-URL: "<" absoluteURL ">"

   where "Base-URL" is case-insensitive.  For example,

      Base-URL: <http://www.ics.uci.edu/Test/a/b/c>

   would indicate that any relative URLs found within the document
   should be parsed relative to <URL:http://www.ics.uci.edu/Test/a/b/c>.
   Any whitespace (including that used for line folding) inside the
   angle brackets should be ignored.

   In situations where both an embedded base URL (as described in
   Section 3.1) and a "Base-URL" message header are present, the
   embedded base URL takes precedence.

3.3.  Base URL from the Retrieval Context

   If neither an embedded base URL nor a "Base-URL" message header
   is present, then, if a URL was used to retrieve the base document,
   that URL shall be considered the base URL.  Note that if the
   retrieval was the result of a redirected request, the last URL used
   (i.e., that which resulted in the actual retrieval of the document)
   is the base URL.

3.4.  Default Base URL

   If none of the conditions described in Sections 3.1 -- 3.3 apply,
   then the base URL is considered to be the empty string and all
   embedded URLs within that document shall be interpreted as absolute.
   It is the responsibility of the distributor(s) of a document
   containing relative URLs to ensure that the base URL for that
   document can be established.  It must be emphasized that relative
   URLs cannot be used reliably in situations where the object's base
   URL is not well-defined.

4.  Resolving Relative URLs

   This section describes an example algorithm for resolving URLs
   within a context in which the URLs may be relative, such that the
   result is always a URL in absolute form.  Although this algorithm
   cannot guarantee that the resulting URL will equal that intended
   by the original author, it does guarantee that any valid URL
   (relative or absolute) can be consistently transformed to an
   absolute form given a valid base URL.

   The following steps are performed in order:

   Step 1: The base URL is established according to the rules of
           Section 3.  If the base URL is the empty string (unknown),
           the embedded URL is interpreted as an absolute URL and
           we are done.

   Step 2: Both the base and embedded URLs are parsed into their
           component parts as described in Section 2.4.

           a) If the embedded URL is entirely empty, it inherits the
              entire base URL (i.e. is set equal to the base URL)
              and we are done.

           b) If the embedded URL starts with a scheme name, it is
              interpreted as an absolute URL and we are done.

           c) Otherwise, the embedded URL inherits the scheme of
              the base URL.

   Step 3: If the embedded URL's <net_loc> is non-empty, we skip to
           Step 7.  Otherwise, the embedded URL inherits the <net_loc>
           (if any) of the base URL.

   Step 4: If the embedded URL path is preceded by a slash "/", the
           path is not relative and we skip to Step 7.

   Step 5: If the embedded URL path is empty (and not preceded by a
           slash), then the embedded URL inherits the base URL path,
           and

           a) if the embedded URL's <params> is non-empty, we skip to
              step 7; otherwise, it inherits the <params> of the base
              URL (if any) and

           b) if the embedded URL's <query> is non-empty, we skip to
              step 7; otherwise, it inherits the <query> of the base
              URL (if any) and we skip to step 7.

   Step 6: The last segment of the base URL's path (anything
           following the rightmost slash "/", or the entire path if no
           slash is present) is removed and the embedded URL's path is
           appended in its place.  The following operations are
           then applied, in order, to the new path:
 
           a) All occurrences of "./", where "." is a complete path
              segment, are removed.

           b) If the path ends with "." as a complete path segment,
              that "." is removed.

           c) All occurrences of "<segment>/../", where <segment> and
              ".." are complete path segments, are removed.  Removal of
              these path segments is performed iteratively, removing the
              leftmost matching pattern on each iteration, until no
              matching pattern remains.

           d) If the path ends with "<segment>/..", that "<segment>/.."
              is removed.

   Step 7: The resulting URL components, including any inherited from
           the base URL, are recombined to give the absolute form of
           the embedded URL.

   Parameters, regardless of their purpose, do not form a part of the
   URL path and thus have no effect on the resolving of relative paths.
   In particular, the presence or absence of the ";type=d" parameter
   on an ftp URL has no effect on the interpretation of paths relative
   to that URL.  Fragment identifiers are only inherited from the base
   URL when the entire embedded URL is empty.

5.  Examples and Recommended Practice

   Within an object with a well-defined base URL of

      <URL:http://a/b/c/d;p?q#f>

   the relative URLs would be resolved as follows: 

5.1.  Normal Examples

      g:h        = <URL:g:h>
      g          = <URL:http://a/b/c/g>
      ./g        = <URL:http://a/b/c/g>
      g/         = <URL:http://a/b/c/g/>
      /g         = <URL:http://a/g>
      //g        = <URL:http://g>
      ?y         = <URL:http://a/b/c/d;p?y>
      g?y        = <URL:http://a/b/c/g?y>
      g?y/./x    = <URL:http://a/b/c/g?y/./x>
      #s         = <URL:http://a/b/c/d;p?q#s>
      g#s        = <URL:http://a/b/c/g#s>
      g#s/./x    = <URL:http://a/b/c/g#s/./x>
      g?y#s      = <URL:http://a/b/c/g?y#s>
      ;x         = <URL:http://a/b/c/d;x>
      g;x        = <URL:http://a/b/c/g;x>
      g;x?y#s    = <URL:http://a/b/c/g;x?y#s>
      .          = <URL:http://a/b/c/>
      ./         = <URL:http://a/b/c/>
      ..         = <URL:http://a/b/>
      ../        = <URL:http://a/b/>
      ../g       = <URL:http://a/b/g>
      ../..      = <URL:http://a/>
      ../../     = <URL:http://a/>
      ../../g    = <URL:http://a/g>

5.2.  Abnormal Examples

      <>         = <URL:http://a/b/c/d;p?q#f>    [an empty reference]
      ../../../g = <URL:http://a/../g>
      ./../g     = <URL:http://a/b/g>
      ./g/.      = <URL:http://a/b/c/g/>
      /./g       = <URL:http://a/./g>
      g/./h      = <URL:http://a/b/c/g/h>
      g/../h     = <URL:http://a/b/c/h>
      g.         = <URL:http://a/b/c/g.>
      .g         = <URL:http://a/b/c/.g>
      g..        = <URL:http://a/b/c/g..>
      ..g        = <URL:http://a/b/c/..g>
      http:g     = <URL:http:g>
      http:      = <URL:http:>

   Note that, although the abnormal examples are not likely to occur
   for a normal relative URL, all URL parsers should be capable of
   resolving them consistently.

5.3.  Recommended Practice

   Authors should be aware that path names which contain a colon
   ":" character cannot be used as the first component of a relative
   URL path (e.g. "this:that") because they will likely be mistaken for
   a scheme name.  It is therefore necessary to precede such cases with
   other components (e.g., "./this:that"), or to escape the colon
   character (e.g., "this%3Athat"), in order for them to be correctly
   parsed.  The former solution is preferred because it has no effect
   on the absolute form of the URL.

   There is an ambiguity in the semantics for the ftp URL scheme
   regarding the use of a trailing slash ("/") character and/or a
   parameter ";type=d" to indicate a resource that is an ftp directory.
   If the result of retrieving that directory includes embedded 
   relative URLs, it is necessary that the base URL path for that result
   include a trailing slash.  For this reason, it is recommended that
   the ";type=d" parameter value not be used.

6.  Security Considerations

   There are no security considerations in the use or parsing of relative
   URLs.  However, once a relative URL has been resolved to its absolute
   form, the same security considerations apply as those described in
   RFC 1738 [4].

7.  Acknowledgements

   This work is derived from concepts introduced by Tim Berners-Lee and
   the World-Wide Web global information initiative.  Relative URLs are
   described as "Partial URLs" in RFC 1630 [3].  That description was
   expanded for inclusion as an appendix for an early draft of RFC 1738,
   "Uniform Resource Locators (URL)" [4].  However, after further
   discussion, the URI-WG decided to specify Relative URLs separately
   from the primary URL draft.

   This document is intended to fulfill the requirements for Internet
   Resource Locators as stated in [11].  It has benefited greatly from
   the comments of all those participating in the URI-WG.  Particular
   thanks go to Larry Masinter, Michael A. Dolan, Guido van Rossum, and
   Dave Kristol for identifying problems/deficiencies in earlier drafts.

8.  References

   [1] F. Anklesaria, M. McCahill, P. Lindner, D. Johnson,
       D. Torrey, and B. Alberti, "The Internet Gopher Protocol:
       A distributed document search and retrieval protocol",
       RFC 1436, University of Minnesota, March 1993.
       <URL:ftp://ds.internic.net/rfc/rfc1436.txt>

   [2] F. Anklesaria, P. Lindner, M. McCahill, D. Torrey,
       D. Johnson, and B. Alberti, "Gopher+: Upward compatible
       enhancements to the Internet Gopher protocol", University of
       Minnesota, July 1993.  <URL:ftp://boombox.micro.umn.edu
       /pub/gopher/gopher_protocol/Gopher+/Gopher+.txt>, July 1993.

   [3] T. Berners-Lee, "Universal Resource Identifiers in WWW:
       A Unifying Syntax for the Expression of Names and Addresses of
       Objects on the Network as used in the World-Wide Web", RFC 1630,
       CERN, June 1994. <URL:ftp://ds.internic.net/rfc/rfc1630.txt>

   [4] T. Berners-Lee, L. Masinter, and M. McCahill, Editors,
       "Uniform Resource Locators (URL)", RFC 1738, CERN, 
       Xerox Corporation, University of Minnesota, December 1994. 
       <URL:ftp://ds.internic.net/rfc/rfc1738.txt>

   [5] T. Berners-Lee and D. Connolly, "HyperText Markup Language
       Specification -- 2.0", Work in Progress, MIT, HaL Computer
       Systems, November 1994.
       <URL:http://www.ics.uci.edu/pub/ietf/html/>

   [6] T. Berners-Lee, R. T. Fielding, and H. Frystyk Nielsen,
       "Hypertext Transfer Protocol -- HTTP/1.0" , Work in Progress,
       MIT, UC Irvine, CERN, December 1993.
       <URL:http://www.ics.uci.edu/pub/ietf/http/>

   [7] D. H. Crocker, "Standard for the Format of ARPA Internet
       Text Messages", STD 11, RFC 822, UDEL, August 1982.
       <URL:ftp://ds.internic.net/rfc/rfc822.txt>

   [8] F. Davis, B. Kahle, H. Morris, J. Salem, T. Shen, R. Wang,
       J. Sui, and M. Grinbaum, "WAIS Interface Protocol Prototype
       Functional Specification", (v1.5), Thinking Machines Corporation,
       April 1990. <URL:ftp://quake.think.com/pub/wais/doc/protspec.txt>

   [9] M. Horton and R. Adams, "Standard For Interchange of USENET
       Messages", RFC 1036, AT&T Bell Laboratories, Center for
       Seismic Studies, December 1987.
       <URL:ftp://ds.internic.net/rfc/rfc1036.txt>

  [10] B. Kantor and P. Lapsley, "Network News Transfer Protocol:
       A Proposed Standard for the Stream-Based Transmission of News",
       RFC 977, UC San Diego & UC Berkeley, February 1986.
       <URL:ftp://ds.internic.net/rfc/rfc977.txt>

  [11] J. Kunze, "Functional Requirements for Internet Resource
       Locators", Work in Progress, IS&T, UC Berkeley, November 1994.
       <URL:ftp://ds.internic.net/internet-drafts/
       draft-ietf-uri-irl-fun-req-02.txt>

  [12] B. C. Neuman and S. Augart, "The Prospero Protocol",
       USC/Information Sciences Institute, June 1993.
       <URL:ftp://prospero.isi.edu/pub/prospero/doc/
       prospero-protocol.PS.Z>

  [13] J. Postel and J. K. Reynolds, "TELNET Protocol Specification",
       RFC 854, USC/Information Sciences Institute, May 1983.
       <URL:ftp://ds.internic.net/rfc/rfc854.txt>

  [14] J. Postel and J. K. Reynolds, "File Transfer Protocol (FTP)",
       STD 9, RFC 959, USC/Information Sciences Institute, October 1985.
       <URL:ftp://ds.internic.net/rfc/rfc959.txt>

  [15] M. St. Pierre, J. Fullton, K. Gamiel, J. Goldman, B. Kahle,
       J. Kunze, H. Morris, and F. Schiettecatte,
       "WAIS over Z39.50-1988", RFC 1625, WAIS, Inc., CNIDR,
       Thinking Machines Corp., UC Berkeley, FS Consulting, June 1994.
       <URL:ftp://ds.internic.net/rfc/rfc1625.txt>

9.  Author's Address

   Roy T. Fielding
   Department of Information and Computer Science
   University of California
   Irvine, CA  92717-3425
   U.S.A.

   Tel: +1 (714) 824-4049
   Fax: +1 (714) 824-4056
   Email: fielding@ics.uci.edu

   This Internet-Draft expires July 9, 1995.


10.  Appendix - Embedding the Base URL in HTML documents.

   It is useful to consider an example of how the base URL of a
   document can be embedded within the document's content.  In this
   appendix, we describe how documents written in the Hypertext Markup
   Language (HTML) [5] can include an embedded base URL.  This appendix
   does not form a part of the relative URL specification and should not
   be considered as anything more than a descriptive example.

   HTML defines a special element "BASE" which, when present in the
   "HEAD" portion of a document, signals that the parser should use
   the BASE element's "HREF" attribute as the base URL for resolving
   any relative URLs.  The "HREF" attribute must be an absolute URL.
   Note that, in HTML, element and attribute names are case-insensitive.
   For example:

      <!doctype html public "-//IETF//DTD HTML//EN">
      <HTML><HEAD>
      <TITLE>An example HTML document</TITLE>
      <BASE href="http://www.ics.uci.edu/Test/a/b/c">
      </HEAD><BODY>
      ... <A href="../x">a hypertext anchor</A> ...
      </BODY></HTML>

   A parser reading the example document should interpret the given
   relative URL "../x" as representing the absolute URL

      <URL:http://www.ics.uci.edu/Test/a/x>

   regardless of the context in which the example document was obtained.

